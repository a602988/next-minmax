{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/env.mjs"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\n/**\n * 環境變數配置 - 程式碼優先的配置管理\n *\n * 設計原則：\n * 1. env.mjs 包含所有預設值和業務邏輯配置\n * 2. .env 檔案只覆寫需要變更或敏感的設定\n * 3. 開發時依賴預設值，生產時用環境變數覆蓋\n * 4. 共享配置避免重複定義\n *\n * 主要修正：\n * 1. 使用 z.coerce 簡化類型轉換，例如 z.coerce.boolean() 會自動將 \"true\" 轉為 true。\n * 2. 移除動態生成 client config 的函式，直接在 client schema 中定義 NEXT_PUBLIC_ 變數。\n * 3. runtimeEnv 直接設為 process.env，這是 Next.js 環境下的標準做法。\n */\n\nexport const env = createEnv({\n    /**\n     * 伺服器端專用環境變數。\n     * 這些變數「不會」暴露給客戶端，適合放置敏感資訊如 API 金鑰。\n     */\n    server: {\n        // ==========================================\n        // 專案核心配置 - 伺服器端專用\n        // ==========================================\n        PROJECT_CODE: z.string().default(\"minmax2025\"),\n        COUNTRY_SUBDOMAIN_MAP: z.string().default('{}'),\n\n        // ==========================================\n        // API 與外部服務配置 - 伺服器端專用\n        // ==========================================\n        API_BASE_URL: z.string().url().default(\"https://v5.jeffy.test\"),\n        I18N_CACHE_STRATEGY: z.enum([\"memory\", \"redis\", \"none\"]).default(\"memory\"),\n\n    },\n\n    /**\n     * 客戶端環境變數。\n     * 必須以 `NEXT_PUBLIC_` 開頭，這些變數會被打包進客戶端的 JavaScript bundle 中。\n     * 絕對不要在此處放置任何敏感資訊。\n     */\n    client: {\n        // ==========================================\n        // 🏗️ 專案基本資訊 (來自共享配置)\n        // ==========================================\n        NEXT_PUBLIC_PROJECT_NAME: z.string().default(\"測試網站\"),\n        NEXT_PUBLIC_API_VERSION: z.string().default(\"1.0.0\"),\n\n        // ==========================================\n        // 🌍 國際化與語系配置 (來自共享配置)\n        // ==========================================\n        NEXT_PUBLIC_DEFAULT_LOCALE: z.string().default(\"zh-TW\"),\n        NEXT_PUBLIC_SUPPORTED_LOCALES: z.string().default('zh-TW'),\n        NEXT_PUBLIC_LOCALE_PREFIX_MODE: z.enum(['always', 'as-needed', 'never']).default('as-needed'),\n        NEXT_PUBLIC_LOCALE_DETECTION_ENABLED: z.coerce.boolean().default(true),\n        NEXT_PUBLIC_MULTI_LANGUAGE_ENABLED: z.coerce.boolean().default(true),\n        NEXT_PUBLIC_INTERNATIONALIZATION_ENABLED: z.coerce.boolean().default(true),\n\n        // ==========================================\n        // 🗺️ 地理位置偵測配置 (來自共享配置)\n        // ==========================================\n        NEXT_PUBLIC_GEO_DETECTION_STRATEGY: z.enum([\"cdn-only\", \"api-only\", \"cdn-fallback\"]).default(\"api-only\"),\n        NEXT_PUBLIC_GEO_DETECTION_ENABLED: z.coerce.boolean().default(false),\n        NEXT_PUBLIC_GEO_REDIRECT_MODE: z.enum([\"off\", \"suggest\", \"force\"]).default(\"suggest\"),\n        NEXT_PUBLIC_FORCE_REDIRECT: z.coerce.boolean().default(false),\n        NEXT_PUBLIC_CDN_COUNTRY_HEADER: z.string().default(\"cf-ipcountry\"),\n        NEXT_PUBLIC_GEO_API_PROVIDER: z.enum([\"ipapi\", \"ipinfo\", \"geoplugin\"]).default(\"geoplugin\"),\n        NEXT_PUBLIC_GEO_API_TIMEOUT: z.coerce.number().default(5000),\n\n        // ==========================================\n        // 🔄 快取系統配置 (來自共享配置)\n        // ==========================================\n        NEXT_PUBLIC_CACHE_ENABLED: z.coerce.boolean().default(true),\n        NEXT_PUBLIC_CACHE_CDN_ENABLED: z.coerce.boolean().default(false),\n        NEXT_PUBLIC_CACHE_DEFAULT_TTL: z.coerce.number().default(3600),\n\n        // ==========================================\n        // ⚙️ 功能開關 (來自共享配置)\n        // ==========================================\n        NEXT_PUBLIC_DEV_MODE_ENABLED: z.coerce.boolean().default(false),\n        NEXT_PUBLIC_MEMBERSHIP_ENABLED: z.coerce.boolean().default(false),\n\n        // ==========================================\n        // 🔧 開發與測試配置 (來自共享配置)\n        // ==========================================\n        NEXT_PUBLIC_USE_MOCK_API: z.coerce.boolean().default(true),\n        NEXT_PUBLIC_MOCK_API_DELAY: z.coerce.number().default(100),\n        NEXT_PUBLIC_MOCK_ERROR_ENABLED: z.coerce.boolean().default(false),\n        NEXT_PUBLIC_MOCK_ERROR_RATE: z.coerce.number().min(0).max(1).default(0.0),\n\n        // ==========================================\n        // 📊 監控與日誌配置 (來自共享配置)\n        // ==========================================\n        NEXT_PUBLIC_API_LOGGING_ENABLED: z.coerce.boolean().default(false),\n        NEXT_PUBLIC_PERFORMANCE_MONITORING_ENABLED: z.coerce.boolean().default(false),\n\n        // ==========================================\n        // ⏱️ 超時設定 (來自共享配置)\n        // ==========================================\n        NEXT_PUBLIC_API_TIMEOUT: z.coerce.number().default(30000),\n        NEXT_PUBLIC_CONTENT_API_TIMEOUT: z.coerce.number().default(60000),\n\n        // ==========================================\n        // 🌐 API 與服務配置 - 客戶端專用\n        // ==========================================\n        NEXT_PUBLIC_API_BASE_URL: z.string().url().default(\"http://localhost:3000/api/ssr/\"),\n\n        // ==========================================\n        // 🔧 外部服務配置 - 客戶端專用\n        // ==========================================\n        NEXT_PUBLIC_SENTRY_DSN: z.string().url().optional(),\n    },\n\n    /**\n     * 運行時的環境變數來源。\n     * 對於 Next.js，這應該總是 `process.env`。\n     * createEnv 會自動處理 server-side 和 client-side 的變數分離。\n     */\n    runtimeEnv: process.env,\n\n    /**\n     * 如果你想在建置（build）階段，當缺少客戶端環境變數時就讓建置失敗，\n     * 可以取消下面這行的註解。\n     */\n    // skipValidation: !!process.env.CI,\n});"],"names":[],"mappings":"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"}},
    {"offset": {"line": 140, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/config/api.config.ts"],"sourcesContent":["import { env } from '@/env.mjs';\n\n/**\n * API 應用配置（只保留業務邏輯）\n * - 不鏡射 env 值；需要時於此集中處理條件/轉換/群組\n * - 命名使用小寫（camelCase）\n */\n\n\n\n\nexport const apiConfig = {\n    // 衍生：根據是否使用 Mock 選擇實際 baseUrl\n    baseUrl: env.NEXT_PUBLIC_USE_MOCK_API ? env.NEXT_PUBLIC_API_BASE_URL : env.API_BASE_URL,\n\n    // 衍生：根據是否使用 Mock 切換端點路徑\n    endpoints: env.NEXT_PUBLIC_USE_MOCK_API\n        ? {\n            language: 'languages',\n            locales: 'locales',\n            systemMenus: 'system-menus',\n            webData: 'web-data',\n            detail: 'detail',\n        }\n        : {\n            language: '/api/v1/languages',\n            locales: '/api/v1/locales',\n            systemMenus: '/api/v1/system-menus',\n            webData: '/api/v1/web-data',\n            detail: '/api/v1/detail',\n        },\n\n    // 群組：超時（毫秒）直接取 env，集中使用\n    timeouts: {\n        api: env.NEXT_PUBLIC_API_TIMEOUT,\n        content: env.NEXT_PUBLIC_CONTENT_API_TIMEOUT,\n        geo: env.NEXT_PUBLIC_GEO_API_TIMEOUT,\n    },\n\n    // 業務常數：重試策略（如需環境化，於此處加衍生邏輯）\n    retry: {\n        attempts: 3,\n        delay: 1000,\n        exponentialBackoff: true,\n    },\n\n    // 業務判斷：是否模擬延遲/錯誤與相關參數\n    shouldSimulateDelay: () => env.NEXT_PUBLIC_USE_MOCK_API && env.NEXT_PUBLIC_MOCK_API_DELAY > 0,\n    getMockDelay: () => env.NEXT_PUBLIC_MOCK_API_DELAY,\n    shouldSimulateError: () => env.NEXT_PUBLIC_MOCK_ERROR_ENABLED && Math.random() < env.NEXT_PUBLIC_MOCK_ERROR_RATE,\n} as const;\n\nexport type ApiConfig = typeof apiConfig;"],"names":[],"mappings":";;;AAAA;;AAWO,MAAM,YAAY;IACrB,8BAA8B;IAC9B,SAAS,mHAAA,CAAA,MAAG,CAAC,wBAAwB,GAAG,mHAAA,CAAA,MAAG,CAAC,wBAAwB,GAAG,mHAAA,CAAA,MAAG,CAAC,YAAY;IAEvF,wBAAwB;IACxB,WAAW,mHAAA,CAAA,MAAG,CAAC,wBAAwB,GACjC;QACE,UAAU;QACV,SAAS;QACT,aAAa;QACb,SAAS;QACT,QAAQ;IACZ,IACE;QACE,UAAU;QACV,SAAS;QACT,aAAa;QACb,SAAS;QACT,QAAQ;IACZ;IAEJ,wBAAwB;IACxB,UAAU;QACN,KAAK,mHAAA,CAAA,MAAG,CAAC,uBAAuB;QAChC,SAAS,mHAAA,CAAA,MAAG,CAAC,+BAA+B;QAC5C,KAAK,mHAAA,CAAA,MAAG,CAAC,2BAA2B;IACxC;IAEA,4BAA4B;IAC5B,OAAO;QACH,UAAU;QACV,OAAO;QACP,oBAAoB;IACxB;IAEA,sBAAsB;IACtB,qBAAqB,IAAM,mHAAA,CAAA,MAAG,CAAC,wBAAwB,IAAI,mHAAA,CAAA,MAAG,CAAC,0BAA0B,GAAG;IAC5F,cAAc,IAAM,mHAAA,CAAA,MAAG,CAAC,0BAA0B;IAClD,qBAAqB,IAAM,mHAAA,CAAA,MAAG,CAAC,8BAA8B,IAAI,KAAK,MAAM,KAAK,mHAAA,CAAA,MAAG,CAAC,2BAA2B;AACpH"}},
    {"offset": {"line": 183, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/config/app.client.config.ts"],"sourcesContent":["import { env } from '@/env.mjs';\n\n/**\n * 客戶端應用配置（僅保留必要的業務衍生值）\n * - 直接在使用處讀 env.NEXT_PUBLIC_*，此處不重複包裝\n * - 命名使用小寫（camelCase）\n */\nexport const appConfig = {\n    // 衍生：API 超時（毫秒），若無設定則回退 30000\n    apiTimeout:\n        typeof env.NEXT_PUBLIC_API_TIMEOUT === 'number'\n            ? env.NEXT_PUBLIC_API_TIMEOUT\n            : Number.parseInt(String(env.NEXT_PUBLIC_API_TIMEOUT ?? ''), 10) || 30000,\n\n    // 衍生：i18n 啟用（客戶端視角）的布林正規化\n    i18nEnabled:\n        typeof env.NEXT_PUBLIC_MULTI_LANGUAGE_ENABLED === 'boolean'\n            ? env.NEXT_PUBLIC_MULTI_LANGUAGE_ENABLED\n            : String(env.NEXT_PUBLIC_MULTI_LANGUAGE_ENABLED).toLowerCase() === 'true',\n} as const;\n\nexport type AppClientConfig = typeof appConfig;"],"names":[],"mappings":";;;AAAA;;AAOO,MAAM,YAAY;IACrB,8BAA8B;IAC9B,YACI,OAAO,mHAAA,CAAA,MAAG,CAAC,uBAAuB,KAAK,WACjC,mHAAA,CAAA,MAAG,CAAC,uBAAuB,GAC3B,OAAO,QAAQ,CAAC,OAAO,mHAAA,CAAA,MAAG,CAAC,uBAAuB,IAAI,KAAK,OAAO;IAE5E,0BAA0B;IAC1B,aACI,OAAO,mHAAA,CAAA,MAAG,CAAC,kCAAkC,KAAK,YAC5C,mHAAA,CAAA,MAAG,CAAC,kCAAkC,GACtC,OAAO,mHAAA,CAAA,MAAG,CAAC,kCAAkC,EAAE,WAAW,OAAO;AAC/E"}},
    {"offset": {"line": 198, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/config/app.server.config.ts"],"sourcesContent":["import { env } from '@/env.mjs';\n\n/**\n * 服務端應用配置層\n * 只包含真正需要業務邏輯處理的配置\n * ⚠️ 此檔案只能在伺服器端使用\n */\nexport const SERVER_APP_CONFIG = {\n    // 國際化配置 - 數據轉換\n    i18n: {\n        supportedLocales: env.SUPPORTED_LOCALES.split(',').map((locale) => locale.trim()),\n        countrySubdomainMap: JSON.parse(env.COUNTRY_SUBDOMAIN_MAP || '{}'),\n    },\n\n    // API 配置 - 條件邏輯\n    api: {\n        baseUrl: env.USE_MOCK_API ? env.API_BASE_URL : env.API_BASE_URL,\n    },\n} as const;\n\n// 導出計算屬性 - 只包含真正的業務邏輯組合\nexport const SERVER_COMPUTED = {\n    /** 是否啟用完整國際化功能（伺服端視角） */\n    isI18nEnabled: () => env.INTERNATIONALIZATION_ENABLED && env.MULTI_LANGUAGE_ENABLED,\n\n    /** 檢查是否支援特定語系 */\n    isLocaleSupported: (locale: string) => SERVER_APP_CONFIG.i18n.supportedLocales.includes(locale),\n\n    /** 是否應該模擬 API 延遲 */\n    shouldSimulateDelay: () => env.USE_MOCK_API && env.MOCK_API_DELAY > 0,\n\n    /** 是否應該模擬錯誤 */\n    shouldSimulateError: () => env.MOCK_ERROR_ENABLED && Math.random() < env.MOCK_ERROR_RATE,\n} as const;\n\nexport type ServerAppConfig = typeof SERVER_APP_CONFIG;"],"names":[],"mappings":";;;;AAAA;;AAOO,MAAM,oBAAoB;IAC7B,eAAe;IACf,MAAM;QACF,kBAAkB,mHAAA,CAAA,MAAG,CAAC,iBAAiB,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,SAAW,OAAO,IAAI;QAC9E,qBAAqB,KAAK,KAAK,CAAC,mHAAA,CAAA,MAAG,CAAC,qBAAqB,IAAI;IACjE;IAEA,gBAAgB;IAChB,KAAK;QACD,SAAS,mHAAA,CAAA,MAAG,CAAC,YAAY,GAAG,mHAAA,CAAA,MAAG,CAAC,YAAY,GAAG,mHAAA,CAAA,MAAG,CAAC,YAAY;IACnE;AACJ;AAGO,MAAM,kBAAkB;IAC3B,uBAAuB,GACvB,eAAe,IAAM,mHAAA,CAAA,MAAG,CAAC,4BAA4B,IAAI,mHAAA,CAAA,MAAG,CAAC,sBAAsB;IAEnF,eAAe,GACf,mBAAmB,CAAC,SAAmB,kBAAkB,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC;IAExF,kBAAkB,GAClB,qBAAqB,IAAM,mHAAA,CAAA,MAAG,CAAC,YAAY,IAAI,mHAAA,CAAA,MAAG,CAAC,cAAc,GAAG;IAEpE,aAAa,GACb,qBAAqB,IAAM,mHAAA,CAAA,MAAG,CAAC,kBAAkB,IAAI,KAAK,MAAM,KAAK,mHAAA,CAAA,MAAG,CAAC,eAAe;AAC5F"}},
    {"offset": {"line": 225, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/config/locale.server.config.ts"],"sourcesContent":["import { env } from '@/env.mjs';\n\n/**\n * 服務端語系配置（只保留需要的轉換與工具）\n * - 不鏡射 env 值（如 defaultLocale/localePrefixMode），在使用處直接讀 env\n * - 命名使用小寫（camelCase）\n */\n\nexport const serverLocaleConfig = {\n    // 衍生：支援語系陣列\n    supportedLocales: env.SUPPORTED_LOCALES.split(',').map((l) => l.trim()),\n    // 工具：語系驗證（使用衍生 supportedLocales）\n    isValidLocale: (locale: string): boolean => {\n        return serverLocaleConfig.supportedLocales.includes(locale);\n    },\n    // 工具：取得有效的預設語系\n    getValidDefaultLocale: (): string => {\n        const envDefault = env.DEFAULT_LANGUAGE;\n        return serverLocaleConfig.supportedLocales.includes(envDefault)\n            ? envDefault\n            : serverLocaleConfig.supportedLocales[0];\n    },\n    // 衍生：國家子網域映射\n    countrySubdomainMap: JSON.parse(env.COUNTRY_SUBDOMAIN_MAP || '{}'),\n    // 工具：依國家取子網域（使用衍生 countrySubdomainMap）\n    getSubdomainByCountry: (country: string): string | null => {\n        return serverLocaleConfig.countrySubdomainMap[country] || null;\n    },\n} as const;\n\nexport type ServerLocaleConfig = typeof serverLocaleConfig;"],"names":[],"mappings":";;;AAAA;;AAQO,MAAM,qBAAqB;IAC9B,YAAY;IACZ,kBAAkB,mHAAA,CAAA,MAAG,CAAC,iBAAiB,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,IAAM,EAAE,IAAI;IACpE,iCAAiC;IACjC,eAAe,CAAC;QACZ,OAAO,mBAAmB,gBAAgB,CAAC,QAAQ,CAAC;IACxD;IACA,eAAe;IACf,uBAAuB;QACnB,MAAM,aAAa,mHAAA,CAAA,MAAG,CAAC,gBAAgB;QACvC,OAAO,mBAAmB,gBAAgB,CAAC,QAAQ,CAAC,cAC9C,aACA,mBAAmB,gBAAgB,CAAC,EAAE;IAChD;IACA,aAAa;IACb,qBAAqB,KAAK,KAAK,CAAC,mHAAA,CAAA,MAAG,CAAC,qBAAqB,IAAI;IAC7D,uCAAuC;IACvC,uBAAuB,CAAC;QACpB,OAAO,mBAAmB,mBAAmB,CAAC,QAAQ,IAAI;IAC9D;AACJ"}},
    {"offset": {"line": 253, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/config/locale.client.config.ts"],"sourcesContent":["import { env } from '@/env.mjs';\n\n/**\n * 客戶端語系配置（僅保留業務邏輯）\n * 原則：\n * - 不重複 env.mjs，原始值在使用處直接讀 env.NEXT_PUBLIC_*\n * - 只做必要的衍生/工具，命名用小寫（camelCase）\n */\nexport const clientLocaleConfig = {\n    // 衍生：支援語系陣列\n    supportedLocales: env.NEXT_PUBLIC_SUPPORTED_LOCALES.split(',').map((l) => l.trim()),\n\n    // 工具：驗證語系是否被支援（使用衍生 supportedLocales）\n    isValidLocale: (locale: string): boolean => {\n        return clientLocaleConfig.supportedLocales.includes(locale);\n    },\n} as const;\n\nexport type ClientLocaleConfig = typeof clientLocaleConfig;\n"],"names":[],"mappings":";;;AAAA;;AAQO,MAAM,qBAAqB;IAC9B,YAAY;IACZ,kBAAkB,mHAAA,CAAA,MAAG,CAAC,6BAA6B,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,IAAM,EAAE,IAAI;IAEhF,sCAAsC;IACtC,eAAe,CAAC;QACZ,OAAO,mBAAmB,gBAAgB,CAAC,QAAQ,CAAC;IACxD;AACJ"}},
    {"offset": {"line": 270, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/config/cache.client.config.ts"],"sourcesContent":["/**\n * 快取系統客戶端配置檔案（僅業務邏輯）\n */\n\n// redis 相關鍵格式（客戶端僅作 key 規則使用，不連線）\nconst redisConfig = {\n    prefix: 'minmax:',\n    keySeparator: ':',\n} as const;\n\n/**\n * 快取資料類型定義 - 統一管理所有快取相關設定\n * - 僅保留客戶端需要的預設 ttl/tags/描述\n */\nconst cacheDataTypes = {\n    languages: {\n        ttl: 7200, // 2 小時\n        tags: ['languages', 'static-data'] as string[],\n        description: '語言資料快取',\n    },\n    locales: {\n        ttl: 7200, // 2 小時\n        tags: ['locales', 'static-data'] as string[],\n        description: '地區設定快取',\n    },\n    menus: {\n        ttl: 3600, // 1 小時\n        tags: ['menus', 'navigation'] as string[],\n        description: '選單資料快取',\n    },\n    webData: {\n        ttl: 3600, // 1 小時\n        tags: ['web-data', 'static-data'] as string[],\n        description: '網站資料快取',\n    },\n    pages: {\n        ttl: 1800, // 30 分鐘\n        tags: ['pages', 'content'] as string[],\n        description: '頁面內容快取',\n    },\n    geoData: {\n        ttl: 1800, // 30 分鐘\n        tags: ['geo-data', 'location'] as string[],\n        description: '地理位置資料快取',\n    },\n    userData: {\n        ttl: 600, // 10 分鐘\n        tags: ['user-data', 'dynamic-data'] as string[],\n        description: '使用者資料快取',\n    },\n    apiResponse: {\n        ttl: 3600, // 預設 1 小時，服務端可覆蓋\n        tags: ['api-response'] as string[],\n        description: 'API 回應快取',\n    },\n} as const;\n\nexport type CacheDataType = keyof typeof cacheDataTypes;\n\n/**\n * 客戶端快取配置（僅業務邏輯）\n */\nexport const cacheConfig = {\n    // 基礎配置（客戶端預設值）\n    enabled: true,\n    cdnEnabled: false,\n    defaultTtl: 3600,\n    strategy: 'memory' as const,\n\n    // key 規則（僅作為 key 生成規範）\n    redis: redisConfig,\n\n    // 從 cacheDataTypes 自動生成 ttl 與 tags 映射\n    ttl: {\n        languages: cacheDataTypes.languages.ttl,\n        locales: cacheDataTypes.locales.ttl,\n        menus: cacheDataTypes.menus.ttl,\n        webData: cacheDataTypes.webData.ttl,\n        pages: cacheDataTypes.pages.ttl,\n        geoData: cacheDataTypes.geoData.ttl,\n        userData: cacheDataTypes.userData.ttl,\n        apiResponse: cacheDataTypes.apiResponse.ttl,\n    },\n\n    tags: {\n        languages: cacheDataTypes.languages.tags,\n        locales: cacheDataTypes.locales.tags,\n        menus: cacheDataTypes.menus.tags,\n        webData: cacheDataTypes.webData.tags,\n        pages: cacheDataTypes.pages.tags,\n        geoData: cacheDataTypes.geoData.tags,\n        userData: cacheDataTypes.userData.tags,\n        apiResponse: cacheDataTypes.apiResponse.tags,\n    },\n\n    // 快取鍵值生成（不依賴自身物件，避免初始化順序問題）\n    generateKey: (type: CacheDataType, identifier: string, locale?: string): string => {\n        const parts = [redisConfig.prefix, type, identifier];\n        if (locale) parts.push(locale);\n        return parts.join(redisConfig.keySeparator);\n    },\n} as const;\n\n/**\n * 取得指定資料類型的完整配置\n */\nexport function getCacheConfig(type: CacheDataType) {\n    return cacheDataTypes[type];\n}\n\n/**\n * 取得指定資料類型的 TTL（毫秒）\n */\nexport function getCacheTtl(type: CacheDataType): number {\n    return cacheDataTypes[type].ttl * 1000;\n}\n\n/**\n * 取得指定資料類型的標籤\n */\nexport function getCacheTags(type: CacheDataType): string[] {\n    return cacheDataTypes[type].tags;\n}\n\n/**\n * 根據標籤找到相關的資料類型\n */\nexport function getDataTypesByTag(tag: string): CacheDataType[] {\n    return Object.entries(cacheDataTypes)\n        .filter(([_, config]) => config.tags.includes(tag))\n        .map(([key]) => key as CacheDataType);\n}\n\n/**\n * 取得所有可用的標籤\n */\nexport function getAllCacheTags(): string[] {\n    const allTags = Object.values(cacheDataTypes).flatMap((config) => config.tags);\n    return [...new Set(allTags)];\n}\n\n/**\n * 取得快取配置摘要（用於除錯）\n */\nexport function getCacheConfigSummary() {\n    return Object.entries(cacheDataTypes).map(([type, config]) => ({\n        type,\n        ttl: `${config.ttl}s (${config.ttl / 60}min)`,\n        tags: config.tags.join(', '),\n        description: config.description,\n    }));\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 424, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/config/cache.server.config.ts"],"sourcesContent":["/**\n * 快取系統服務端配置（僅業務邏輯）\n * - 不重複 env：用 getter 直接回傳 env 值\n * - 保留 server 覆寫 ttl 與鍵規則（generateKey）\n * - 命名使用小寫（camelCase）\n */\nimport { env } from '@/env.mjs';\nimport {\n    cacheConfig,                 // client 的 key 規則與基本 ttl/tags\n    getCacheConfig,\n    getCacheTtl as getCacheTtlClientMs,\n    getCacheTags as getCacheTagsClient,\n    getDataTypesByTag,\n    getAllCacheTags,\n    getCacheConfigSummary,\n    type CacheDataType,\n} from './cache.client.config';\n\n// 服務端覆寫：僅作必要差異（例：apiResponse）\nconst serverTtl = {\n    ...cacheConfig.ttl,\n    apiResponse: env.CACHE_DEFAULT_TTL, // 秒\n} as const;\n\nconst serverTags = {\n    ...cacheConfig.tags,\n} as const;\n\nexport const serverCacheConfig = {\n    // key 規則（沿用 client）\n    redis: cacheConfig.redis,\n\n    // ttl/tags 聚合（server 覆寫）\n    ttl: serverTtl,   // 秒\n    tags: serverTags,\n\n    // 快取鍵值生成（純規則）\n    generateKey: (type: CacheDataType, identifier: string, locale?: string): string => {\n        const parts = [cacheConfig.redis.prefix, type, identifier];\n        if (locale) parts.push(locale);\n        return parts.join(cacheConfig.redis.keySeparator);\n    },\n} as const;\n\n// 直接讀 env（避免鏡射）\nexport const isCacheEnabled = (): boolean => env.CACHE_ENABLED;\nexport const isCdnEnabled = (): boolean => env.CACHE_CDN_ENABLED;\nexport const getDefaultTtl = (): number => env.CACHE_DEFAULT_TTL; // 秒\nexport const getCacheStrategy = (): 'memory' | 'redis' | 'none' => env.I18N_CACHE_STRATEGY;\n\n// 共用導出\nexport {\n    getCacheConfig,\n    getCacheTtlClientMs,\n    getCacheTagsClient,\n    getDataTypesByTag,\n    getAllCacheTags,\n    getCacheConfigSummary,\n    type CacheDataType,\n};\n\n// 服務端便捷函式\nexport function getServerCacheConfig(type: CacheDataType) {\n    const base = getCacheConfig(type);\n    return {\n        type,\n        ttl: serverTtl[type],            // 秒\n        tags: serverTags[type],\n        description: base.description,\n    };\n}\nexport function getServerCacheTtl(type: CacheDataType): number {\n    return serverTtl[type];            // 秒\n}\nexport function getServerCacheTtlMs(type: CacheDataType): number {\n    return serverTtl[type] * 1000;     // 毫秒\n}\nexport function getServerCacheTags(type: CacheDataType): string[] {\n    return serverTags[type];\n}\nexport function getServerCacheConfigSummary() {\n    return (Object.keys(serverTtl) as CacheDataType[]).map((type) => ({\n        type,\n        ttl: `${serverTtl[type]}s (${serverTtl[type] / 60}min)`,\n        tags: serverTags[type].join(', '),\n        description: getCacheConfig(type).description,\n    }));\n}\n\nexport type ServerCacheConfig = typeof serverCacheConfig;"],"names":[],"mappings":"AAAA;;;;;CAKC;;;;;;;;;;;;AACD;AACA;;;AAWA,8BAA8B;AAC9B,MAAM,YAAY;IACd,GAAG,kJAAA,CAAA,cAAW,CAAC,GAAG;IAClB,aAAa,mHAAA,CAAA,MAAG,CAAC,iBAAiB;AACtC;AAEA,MAAM,aAAa;IACf,GAAG,kJAAA,CAAA,cAAW,CAAC,IAAI;AACvB;AAEO,MAAM,oBAAoB;IAC7B,oBAAoB;IACpB,OAAO,kJAAA,CAAA,cAAW,CAAC,KAAK;IAExB,yBAAyB;IACzB,KAAK;IACL,MAAM;IAEN,cAAc;IACd,aAAa,CAAC,MAAqB,YAAoB;QACnD,MAAM,QAAQ;YAAC,kJAAA,CAAA,cAAW,CAAC,KAAK,CAAC,MAAM;YAAE;YAAM;SAAW;QAC1D,IAAI,QAAQ,MAAM,IAAI,CAAC;QACvB,OAAO,MAAM,IAAI,CAAC,kJAAA,CAAA,cAAW,CAAC,KAAK,CAAC,YAAY;IACpD;AACJ;AAGO,MAAM,iBAAiB,IAAe,mHAAA,CAAA,MAAG,CAAC,aAAa;AACvD,MAAM,eAAe,IAAe,mHAAA,CAAA,MAAG,CAAC,iBAAiB;AACzD,MAAM,gBAAgB,IAAc,mHAAA,CAAA,MAAG,CAAC,iBAAiB,EAAE,IAAI;AAC/D,MAAM,mBAAmB,IAAmC,mHAAA,CAAA,MAAG,CAAC,mBAAmB;;AAcnF,SAAS,qBAAqB,IAAmB;IACpD,MAAM,OAAO,CAAA,GAAA,kJAAA,CAAA,iBAAc,AAAD,EAAE;IAC5B,OAAO;QACH;QACA,KAAK,SAAS,CAAC,KAAK;QACpB,MAAM,UAAU,CAAC,KAAK;QACtB,aAAa,KAAK,WAAW;IACjC;AACJ;AACO,SAAS,kBAAkB,IAAmB;IACjD,OAAO,SAAS,CAAC,KAAK,EAAa,IAAI;AAC3C;AACO,SAAS,oBAAoB,IAAmB;IACnD,OAAO,SAAS,CAAC,KAAK,GAAG,MAAU,KAAK;AAC5C;AACO,SAAS,mBAAmB,IAAmB;IAClD,OAAO,UAAU,CAAC,KAAK;AAC3B;AACO,SAAS;IACZ,OAAO,AAAC,OAAO,IAAI,CAAC,WAA+B,GAAG,CAAC,CAAC,OAAS,CAAC;YAC9D;YACA,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,EAAE,SAAS,CAAC,KAAK,GAAG,GAAG,IAAI,CAAC;YACvD,MAAM,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC;YAC5B,aAAa,CAAA,GAAA,kJAAA,CAAA,iBAAc,AAAD,EAAE,MAAM,WAAW;QACjD,CAAC;AACL"}},
    {"offset": {"line": 513, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/config/index.ts"],"sourcesContent":["/**\n * 統一配置導出\n * 整合所有配置相關的設定\n */\n\n// 導出環境變數配置\n// export { env } from '../env.mjs';\n\n// 導出 API 配置\nexport * from './api.config';\n\n// 導出應用程式配置\nexport * from './app.client.config';\nexport * from './app.server.config';\n\n// 導出語系配置\nexport * from './locale.server.config';\nexport * from './locale.client.config';\n\n// 導出快取配置\nexport * from './cache.client.config';\nexport * from './cache.server.config';"],"names":[],"mappings":"AAAA;;;CAGC,GAED,WAAW;AACX,oCAAoC;AAEpC,YAAY;;AACZ;AAEA,WAAW;AACX;AACA;AAEA,SAAS;AACT;AACA;AAEA,SAAS;AACT;AACA"}},
    {"offset": {"line": 554, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/i18n/routing.ts"],"sourcesContent":["import { defineRouting } from 'next-intl/routing';\nimport { serverLocaleConfig } from '@/config/';\nimport { env } from '@/env.mjs';\n\n\nexport const routing = defineRouting({\n    // 支援的語系 - 從環境變數讀取，會被 API 動態覆蓋\n    locales: serverLocaleConfig.supportedLocales,\n\n    // 預設語系 - 先用 env，若不在支援清單內則回退第一個\n    defaultLocale: serverLocaleConfig.getValidDefaultLocale(),\n\n\n    // 語系前綴模式 - 從環境變數讀取\n    localePrefix: env.LOCALE_PREFIX_MODE,\n\n    // 啟用語系檢測 - 從環境變數讀取\n    localeDetection: env.LOCALE_DETECTION_ENABLED\n});"],"names":[],"mappings":";;;AAAA;AACA;AAAA;AACA;;;;AAGO,MAAM,UAAU,CAAA,GAAA,0OAAA,CAAA,gBAAa,AAAD,EAAE;IACjC,8BAA8B;IAC9B,SAAS,mJAAA,CAAA,qBAAkB,CAAC,gBAAgB;IAE5C,+BAA+B;IAC/B,eAAe,mJAAA,CAAA,qBAAkB,CAAC,qBAAqB;IAGvD,mBAAmB;IACnB,cAAc,mHAAA,CAAA,MAAG,CAAC,kBAAkB;IAEpC,mBAAmB;IACnB,iBAAiB,mHAAA,CAAA,MAAG,CAAC,wBAAwB;AACjD"}},
    {"offset": {"line": 578, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/features/geo/providers/geoplugin.provider.ts"],"sourcesContent":["/**\n * geoplugin.com 地理位置偵測供應商實作\n *\n * 此模組實作了 geoplugin.com 的地理位置偵測服務，將其 API 回應轉換為\n * 標準化的 GeoResult 格式。geoplugin 是一個免費的 IP 地理位置服務，\n * 無需 API 金鑰即可使用，適合開發和測試環境。\n *\n * 主要特性：\n * - 免費服務，無需註冊或 API 金鑰\n * - 支援 IPv4 和 IPv6 地址查詢\n * - 提供國家、地區、城市、經緯度等資訊\n * - 包含時區和貨幣資訊\n * - 支援自訂逾時控制和 fetch 實作\n *\n * 使用限制：\n * - 免費服務可能有請求頻率限制\n * - 準確度可能不如付費服務\n * - 生產環境建議搭配快取和備援策略\n *\n * API 端點：https://www.geoplugin.net/json.gp\n * 文件：http://www.geoplugin.com/webservices/json\n */\n\nimport { GeoProvider, GeoLookupParams, GeoResult } from '../types/geo.types';\n\n/**\n * geoplugin.com 的回應型別（僅列常用欄位，保留額外欄位以防未來擴充）\n */\ninterface GeoPluginResponse {\n    geoplugin_request?: string;        // 回傳之請求 IP\n    geoplugin_countryCode?: string;    // 國家代碼（ISO 3166-1 alpha-2）\n    geoplugin_countryName?: string;    // 國家名稱\n    geoplugin_region?: string;         // 州/省/行政區（名稱）\n    geoplugin_regionCode?: string;     // 州/省/行政區（代碼）\n    geoplugin_city?: string;           // 城市\n    geoplugin_latitude?: string | number;   // 緯度\n    geoplugin_longitude?: string | number;  // 經度\n    geoplugin_timezone?: string;       // 時區（例如 Asia/Taipei）\n    geoplugin_currencyCode?: string;   // 貨幣代碼（例如 TWD、USD）\n    geoplugin_currencySymbol?: string; // 貨幣符號（例如 NT$、$）\n    [key: string]: unknown;            // 允許其他未列舉的欄位\n}\n\n/**\n * geoplugin.com Provider 實作\n * - 目標：將 geoplugin 的回應轉換為標準化的 GeoResult\n * - 特性：無需 API Key；適合開發/測試；生產請搭配快取與備援策略\n */\nexport const geoPluginProvider: GeoProvider = {\n    name: 'geoplugin', // 供應商識別字串（方便記錄與切換）\n\n    async lookup({ ip, timeoutMs, fetchImpl }: GeoLookupParams): Promise<GeoResult | null> {\n        const baseUrl = 'https://www.geoplugin.net/json.gp';                   // geoplugin JSON 端點\n        const url = ip ? `${baseUrl}?ip=${encodeURIComponent(ip)}` : baseUrl;  // 可選：指定 IP，未指定則以來源 IP 判斷\n\n        // 逾時控制：避免阻塞 SSR / 中介層\n        const controller = new AbortController();                               // 用於中止 fetch 的控制器\n        const timer = setTimeout(() => controller.abort(), Math.max(1, timeoutMs)); // 在 timeoutMs 後中止請求\n        const started = Date.now();                                             // 記錄起始時間以計算耗時\n\n        try {\n            // 可注入自訂 fetch（測試用或加代理/重試），預設使用全域 fetch\n            const fetchFn = fetchImpl ?? fetch;                                 // 若未提供則採用全域 fetch\n            const res = await fetchFn(url, {\n                method: 'GET',\n                headers: { Accept: 'application/json' },                        // 明確要求 JSON\n                signal: controller.signal,                                      // 綁定中止訊號\n            });\n\n            // HTTP 非 2xx 視為失敗，降級為 null（不拋例外，保持上層流程平順）\n            if (!res.ok) {\n                return null;                                                    // 回傳 null 表示未取得有效資料\n            }\n\n            const json: GeoPluginResponse = await res.json();                   // 解析 JSON 回應\n            const elapsedMs = Date.now() - started;                             // 計算本次請求耗時（毫秒）\n\n            // 將 geoplugin 回應映射到標準 GeoResult\n            const result: GeoResult = {\n                ip: safeString(json?.geoplugin_request),                        // 偵測到的 IP（若回傳）\n                countryCode: safeString(json?.geoplugin_countryCode) ?? null,   // 國家代碼（失敗則 null）\n                countryName: safeString(json?.geoplugin_countryName) ?? null,   // 國家名稱\n                region: safeString(json?.geoplugin_region)                      // 優先採用名稱\n                    ?? safeString(json?.geoplugin_regionCode)               // 次選代碼\n                    ?? null,                                                // 最終無資料\n                city: safeString(json?.geoplugin_city) ?? null,                 // 城市\n                latitude: safeNumber(json?.geoplugin_latitude),                 // 緯度（字串/數字 → number|null）\n                longitude: safeNumber(json?.geoplugin_longitude),               // 經度（字串/數字 → number|null）\n                timeZone: safeString(json?.geoplugin_timezone) ?? null,         // 時區（例如 Asia/Taipei）\n                currency: normalizeCurrency(json),                               // 貨幣資訊（皆無時回傳 null）\n                raw: json,                                                      // 保留原始回應以利除錯（不建議直接曝露至前端）\n                provider: 'geoplugin',                                          // 供應商識別（統一格式）\n                fromCache: false,                                               // Provider 本身不處理快取；由外層服務負責\n                elapsedMs,                                                      // 本次查詢耗時（毫秒）\n            };\n\n            return result;                                                      // 回傳標準化結果\n        } catch {\n            // 包含逾時（AbortError）在內的任何錯誤皆降級為 null，避免中斷流程\n            return null;                                                        // 回傳 null 交由上層兜底\n        } finally {\n            clearTimeout(timer);                                                // 清理逾時計時器，避免資源洩漏\n        }\n    },\n};\n\n/* 工具函式（純函式，便於測試與重用） */\n\n/**\n * 將未知值安全轉為非空字串\n * - 空字串、null、undefined 皆回傳 undefined\n */\nfunction safeString(val: unknown): string | undefined {\n    if (val === null || val === undefined) return undefined;                    // 無值直接回 undefined\n    const s = String(val).trim();                                               // 轉字串並去除前後空白\n    return s.length ? s : undefined;                                            // 空字串視為無效\n}\n\n/**\n * 將未知值安全轉為 number\n * - 非有限數字或無值回傳 null\n */\nfunction safeNumber(val: unknown): number | null {\n    if (val === null || val === undefined) return null;                         // 無值回 null\n    const n = Number(val);                                                      // 嘗試轉為數字\n    return Number.isFinite(n) ? n : null;                                       // 非有限數字視為無效\n}\n\n/**\n * 正規化 geoplugin 的貨幣資訊\n * - 若 code 與 symbol 皆缺失則回傳 null，避免產生空物件\n */\nfunction normalizeCurrency(json: GeoPluginResponse): { code?: string | null; symbol?: string | null } | null {\n    const code = safeString(json?.geoplugin_currencyCode) ?? null;              // 貨幣代碼（例如 TWD、USD）\n    const symbol = safeString(json?.geoplugin_currencySymbol) ?? null;          // 貨幣符號（例如 NT$、$）\n    if (code === null && symbol === null) return null;                          // 兩者皆無 → 視為無資料\n    return { code, symbol };                                                    // 至少有一項則回傳物件\n}"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;CAqBC;;;AA2BM,MAAM,oBAAiC;IAC1C,MAAM;IAEN,MAAM,QAAO,EAAE,EAAE,EAAE,SAAS,EAAE,SAAS,EAAmB;QACtD,MAAM,UAAU,qCAAuD,oBAAoB;QAC3F,MAAM,MAAM,KAAK,GAAG,QAAQ,IAAI,EAAE,mBAAmB,KAAK,GAAG,SAAU,yBAAyB;QAEhG,sBAAsB;QACtB,MAAM,aAAa,IAAI,mBAAiD,kBAAkB;QAC1F,MAAM,QAAQ,WAAW,IAAM,WAAW,KAAK,IAAI,KAAK,GAAG,CAAC,GAAG,aAAa,oBAAoB;QAChG,MAAM,UAAU,KAAK,GAAG,IAAgD,cAAc;QAEtF,IAAI;YACA,uCAAuC;YACvC,MAAM,UAAU,aAAa,OAAuC,kBAAkB;YACtF,MAAM,MAAM,MAAM,QAAQ,KAAK;gBAC3B,QAAQ;gBACR,SAAS;oBAAE,QAAQ;gBAAmB;gBACtC,QAAQ,WAAW,MAAM;YAC7B;YAEA,0CAA0C;YAC1C,IAAI,CAAC,IAAI,EAAE,EAAE;gBACT,OAAO,MAAyD,oBAAoB;YACxF;YAEA,MAAM,OAA0B,MAAM,IAAI,IAAI,IAAsB,aAAa;YACjF,MAAM,YAAY,KAAK,GAAG,KAAK,SAAqC,eAAe;YAEnF,gCAAgC;YAChC,MAAM,SAAoB;gBACtB,IAAI,WAAW,MAAM;gBACrB,aAAa,WAAW,MAAM,0BAA0B;gBACxD,aAAa,WAAW,MAAM,0BAA0B;gBACxD,QAAQ,WAAW,MAAM,kBAAuC,SAAS;oBAClE,WAAW,MAAM,sBAAoC,OAAO;oBAC5D;gBACP,MAAM,WAAW,MAAM,mBAAmB;gBAC1C,UAAU,WAAW,MAAM;gBAC3B,WAAW,WAAW,MAAM;gBAC5B,UAAU,WAAW,MAAM,uBAAuB;gBAClD,UAAU,kBAAkB;gBAC5B,KAAK;gBACL,UAAU;gBACV,WAAW;gBACX;YACJ;YAEA,OAAO,QAA6D,UAAU;QAClF,EAAE,OAAM;YACJ,0CAA0C;YAC1C,OAAO,MAA6D,iBAAiB;QACzF,SAAU;YACN,aAAa,QAAuD,iBAAiB;QACzF;IACJ;AACJ;AAEA,qBAAqB,GAErB;;;CAGC,GACD,SAAS,WAAW,GAAY;IAC5B,IAAI,QAAQ,QAAQ,QAAQ,WAAW,OAAO,WAA8B,kBAAkB;IAC9F,MAAM,IAAI,OAAO,KAAK,IAAI,IAAkD,aAAa;IACzF,OAAO,EAAE,MAAM,GAAG,IAAI,WAAsD,UAAU;AAC1F;AAEA;;;CAGC,GACD,SAAS,WAAW,GAAY;IAC5B,IAAI,QAAQ,QAAQ,QAAQ,WAAW,OAAO,MAA8B,WAAW;IACvF,MAAM,IAAI,OAAO,MAA2D,SAAS;IACrF,OAAO,OAAO,QAAQ,CAAC,KAAK,IAAI,MAA4C,YAAY;AAC5F;AAEA;;;CAGC,GACD,SAAS,kBAAkB,IAAuB;IAC9C,MAAM,OAAO,WAAW,MAAM,2BAA2B,MAAmB,mBAAmB;IAC/F,MAAM,SAAS,WAAW,MAAM,6BAA6B,MAAe,iBAAiB;IAC7F,IAAI,SAAS,QAAQ,WAAW,MAAM,OAAO,MAA+B,eAAe;IAC3F,OAAO;QAAE;QAAM;IAAO,GAAsD,aAAa;AAC7F"}},
    {"offset": {"line": 686, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/lib/cache/memory-adapter.ts"],"sourcesContent":["/**\n * 記憶體快取適配器實作\n *\n * 基於 JavaScript Map 實作的記憶體快取系統，支援 TTL（生存時間）和標籤索引功能。\n * 適合開發環境或小型應用使用，資料存儲在應用程式記憶體中，重啟後會遺失。\n *\n * 主要特性：\n * - TTL 支援：可設定快取項目的過期時間\n * - 標籤索引：支援按標籤批量刪除快取項目\n * - 自動清理：讀取時自動清理過期項目\n * - 型別安全：支援泛型，確保型別安全\n *\n * 注意事項：\n * - 記憶體使用量會隨快取項目增加而增長\n * - 應用程式重啟後所有快取資料會遺失\n * - 適合單機部署，不支援分散式快取\n */\n\nimport type { CacheAdapter, CacheSetOptions } from './types';\n\n/**\n * 快取項目的內部資料結構\n */\ntype StoreItem = {\n    /** 快取的值，可以是任意型別 */\n    value: unknown;\n    /** 過期時間戳（毫秒），undefined 表示永不過期 */\n    expireAt?: number;\n    /** 關聯的標籤集合，用於批量操作 */\n    tags: Set<string>;\n};\n\n/**\n * 記憶體快取適配器\n *\n * 實作 CacheAdapter 介面，提供基於記憶體的快取功能。\n * 使用 Map 作為主要存儲結構，並維護標籤到鍵值的反向索引。\n */\nexport class MemoryCacheAdapter implements CacheAdapter {\n    /** 主要存儲結構：鍵值 -> 快取項目 */\n    private store = new Map<string, StoreItem>();\n    /** 標籤索引：標籤 -> 包含該標籤的鍵值集合 */\n    private tagIndex = new Map<string, Set<string>>();\n\n    /**\n     * 取得快取值\n     *\n     * @template T 快取值的型別\n     * @param key 快取鍵值\n     * @returns 快取的值，如果不存在或已過期則回傳 null\n     */\n    async get<T>(key: string): Promise<T | null> {\n        const item = this.store.get(key);\n        if (!item) return null;\n\n        // 檢查是否過期，過期則自動清理\n        if (item.expireAt && Date.now() > item.expireAt) {\n            this.evict(key, item);\n            return null;\n        }\n\n        return item.value as T;\n    }\n\n    /**\n     * 設定快取值\n     *\n     * @template T 快取值的型別\n     * @param key 快取鍵值\n     * @param value 要快取的值\n     * @param options 快取選項，包含 TTL 和標籤\n     */\n    async set<T>(key: string, value: T, options?: CacheSetOptions): Promise<void> {\n        const ttlSec = options?.ttl ?? 0;\n        const expireAt = ttlSec > 0 ? Date.now() + ttlSec * 1000 : undefined;\n        const tags = new Set(options?.tags ?? []);\n\n        // 如果鍵值已存在，先清理舊的標籤索引\n        const old = this.store.get(key);\n        if (old) this.unindexTags(key, old.tags);\n\n        // 設定新值並建立標籤索引\n        this.store.set(key, { value, expireAt, tags });\n        this.indexTags(key, tags);\n    }\n\n    /**\n     * 刪除指定鍵值的快取\n     *\n     * @param key 要刪除的快取鍵值\n     */\n    async del(key: string): Promise<void> {\n        const item = this.store.get(key);\n        if (!item) return;\n\n        // 清理標籤索引並刪除項目\n        this.unindexTags(key, item.tags);\n        this.store.delete(key);\n    }\n\n    /**\n     * 按標籤批量刪除快取\n     *\n     * 刪除所有包含指定標籤的快取項目，常用於相關資料的批量失效。\n     *\n     * @param tag 要刪除的標籤\n     */\n    async delByTag(tag: string): Promise<void> {\n        const keys = this.tagIndex.get(tag);\n        if (!keys) return;\n\n        // 遍歷所有包含該標籤的鍵值並刪除\n        for (const key of keys) {\n            const item = this.store.get(key);\n            if (!item) continue;\n            this.unindexTags(key, item.tags);\n            this.store.delete(key);\n        }\n\n        // 清理標籤索引\n        this.tagIndex.delete(tag);\n    }\n\n    /**\n     * 清空所有快取\n     *\n     * 刪除所有快取項目和標籤索引，重置快取狀態。\n     */\n    async clear(): Promise<void> {\n        this.store.clear();\n        this.tagIndex.clear();\n    }\n\n    /**\n     * 清理過期項目\n     *\n     * 內部方法，用於清理過期的快取項目和相關的標籤索引。\n     *\n     * @private\n     * @param key 要清理的鍵值\n     * @param item 要清理的快取項目\n     */\n    private evict(key: string, item: StoreItem) {\n        this.unindexTags(key, item.tags);\n        this.store.delete(key);\n    }\n\n    /**\n     * 建立標籤索引\n     *\n     * 為指定鍵值的標籤建立反向索引，用於支援按標籤查詢和刪除。\n     *\n     * @private\n     * @param key 鍵值\n     * @param tags 標籤集合\n     */\n    private indexTags(key: string, tags: Set<string>) {\n        for (const tag of tags) {\n            if (!this.tagIndex.has(tag)) this.tagIndex.set(tag, new Set());\n            this.tagIndex.get(tag)!.add(key);\n        }\n    }\n\n    /**\n     * 清理標籤索引\n     *\n     * 從標籤索引中移除指定鍵值的關聯，如果標籤下沒有其他鍵值則刪除該標籤。\n     *\n     * @private\n     * @param key 鍵值\n     * @param tags 標籤集合\n     */\n    private unindexTags(key: string, tags: Set<string>) {\n        for (const tag of tags) {\n            const set = this.tagIndex.get(tag);\n            if (!set) continue;\n            set.delete(key);\n            // 如果標籤下沒有其他鍵值，刪除該標籤索引\n            if (set.size === 0) this.tagIndex.delete(tag);\n        }\n    }\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 832, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/lib/cache/factory.ts"],"sourcesContent":["/**\n * 快取適配器工廠模組\n *\n * 此模組提供統一的快取適配器建立介面，根據環境變數配置動態選擇快取策略。\n * 支援記憶體快取、Redis 快取或無快取模式，並使用單例模式確保整個應用程式\n * 共用同一個快取實例，避免重複初始化和資源浪費。\n *\n * 支援的快取策略：\n * - memory: 使用記憶體快取，適合開發環境或小型應用\n * - redis: 使用 Redis 快取，適合生產環境或分散式部署（待實作）\n * - none: 無快取模式，所有操作都是 no-op，適合測試或特殊場景\n */\n\nimport type { CacheAdapter } from './types';\nimport { MemoryCacheAdapter } from './memory-adapter';\nimport { env } from '@/env.mjs';\n\n// 單例實例，確保整個應用程式共用同一個快取適配器\nlet singleton: CacheAdapter | null = null;\n\n/**\n * 取得快取適配器實例\n *\n * 根據環境變數 I18N_CACHE_STRATEGY 的設定，動態建立對應的快取適配器。\n * 使用單例模式，首次呼叫時建立實例，後續呼叫直接回傳已建立的實例。\n *\n * @returns {CacheAdapter} 快取適配器實例，實作統一的快取介面\n */\nexport function getCacheAdapter(): CacheAdapter {\n    // 如果已有實例，直接回傳，避免重複建立\n    if (singleton) return singleton;\n\n    // 直接讀 env，避免依賴另一層 config 常量\n    const strategy = env.I18N_CACHE_STRATEGY; // 'memory' | 'redis' | 'none'\n\n    if (strategy === 'memory') {\n        // 記憶體快取：適合開發環境，資料存在應用程式記憶體中\n        singleton = new MemoryCacheAdapter();\n    } else if (strategy === 'redis') {\n        // Redis 快取：適合生產環境，支援分散式快取\n        // TODO: 之後接 RedisAdapter\n        singleton = new MemoryCacheAdapter();\n    } else {\n        // 無快取模式：所有操作都是 no-op，適合測試或禁用快取的場景\n        singleton = {\n            async get() { return null; },\n            async set() { /* no-op */ },\n            async del() { /* no-op */ },\n            async delByTag() { /* no-op */ },\n            async clear() { /* no-op */ }\n        };\n    }\n    return singleton;\n}"],"names":[],"mappings":"AAAA;;;;;;;;;;;CAWC;;;AAGD;AACA;;;AAEA,0BAA0B;AAC1B,IAAI,YAAiC;AAU9B,SAAS;IACZ,qBAAqB;IACrB,IAAI,WAAW,OAAO;IAEtB,4BAA4B;IAC5B,MAAM,WAAW,mHAAA,CAAA,MAAG,CAAC,mBAAmB,EAAE,8BAA8B;IAExE,IAAI,aAAa,UAAU;QACvB,4BAA4B;QAC5B,YAAY,IAAI,gJAAA,CAAA,qBAAkB;IACtC,OAAO,IAAI,aAAa,SAAS;QAC7B,0BAA0B;QAC1B,yBAAyB;QACzB,YAAY,IAAI,gJAAA,CAAA,qBAAkB;IACtC,OAAO;QACH,kCAAkC;QAClC,YAAY;YACR,MAAM;gBAAQ,OAAO;YAAM;YAC3B,MAAM,QAAoB;YAC1B,MAAM,QAAoB;YAC1B,MAAM,aAAyB;YAC/B,MAAM,UAAsB;QAChC;IACJ;IACA,OAAO;AACX"}},
    {"offset": {"line": 882, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/features/geo/services/geo.service.ts"],"sourcesContent":["/**\n * GeoService（地理位置偵測服務）\n *\n * 作用與說明：\n * - 提供對外「單一入口」以取得使用者的地理資訊（國家代碼為主）。\n * - 封裝第三方供應商（目前 geoplugin）呼叫邏輯，並統一回傳標準化結果 GeoResult。\n * - 內建逾時控制（避免 SSR / Middleware 被外部 API 阻塞）、錯誤降級（失敗回傳 null）。\n * - 整合共用快取系統（CacheAdapter）：支援 memory/redis/none，並區分成功與失敗結果 TTL。\n * - 具粗粒度 IP 快取鍵（/24 for IPv4、前 4 段 for IPv6）以降低碎片與隱私風險。\n * - 提供便捷 API：detectGeo（完整資訊）、detectCountry（只取國碼）。\n * - 預留 tags（'geo', providerName），方便後續批次清除快取（delByTag）。\n *\n * 何時使用：\n * - Middleware 中進行「建議語系/站點」的前置偵測與 Cookie 寫入。\n * - SSR 流程中需要依國別做內容或語系的初步決策。\n *\n * 重要設計：\n * - 成功結果 TTL 較長（預設 15 分鐘）、失敗結果（null）負面快取 TTL 較短（預設 5 分鐘）。\n * - fromCache 與 elapsedMs 由服務層賦值，對上層提供可觀測性與除錯資訊。\n * - 可透過 forceRefresh 避開快取（除錯/緊急重查）。\n */\n\nimport {geoPluginProvider} from '../providers/geoplugin.provider';\nimport type {GeoLookupParams, GeoProvider, GeoResult} from '../types/geo.types';\nimport {getCacheAdapter} from '@/lib/cache/factory';\n\n// 預設逾時（毫秒）。避免 SSR / Middleware 因第三方 API 卡住。\nconst GEO_DEFAULT_TIMEOUT_MS = 800;\n\n// 成功結果快取時間（毫秒）。Geo IP 通常穩定，可設定較長（例如 15 分鐘）。\nconst GEO_SUCCESS_TTL_MS = 15 * 60 * 1000;\n\n// 失敗（null）結果的「負面快取」時間（毫秒）。短一些可降低雪崩與重試風暴（例如 5 分鐘）。\nconst GEO_NEGATIVE_TTL_MS = 5 * 60 * 1000;\n\n/**\n * 快取系統（CacheAdapter）使用秒為單位，因此需將毫秒轉為秒。\n * - 最小回傳 1 秒，避免 0 導致立即過期。\n */\nfunction msToSec(ms: number): number {\n    return Math.max(1, Math.ceil(ms / 1000));\n}\n\n/**\n * 將 IP 正規化為較粗粒度的 key，避免快取碎片過多與隱私風險。\n * - IPv4: a.b.c.d → a.b.c.0\n * - IPv6: 取前 4 段 → xxxx:xxxx:xxxx:xxxx::\n * - 未指定 IP：使用 'self'\n */\nfunction toCoarseIpKey(ip?: string): string {\n    if (!ip) return 'self';\n    if (/^\\d{1,3}(\\.\\d{1,3}){3}$/.test(ip)) {\n        const [a, b, c] = ip.split('.');\n        return `${a}.${b}.${c}.0`;\n        // IPv4 使用 /24 粒度，有效降低 key 數量，同時仍具區域代表性。\n    }\n    if (ip.includes(':')) {\n        return ip.split(':').slice(0, 4).join(':') + '::';\n        // IPv6 只取前 4 段作為粗粒度，精確性與隱私的折衷。\n    }\n    return ip;\n}\n\n// ...  code ...\n\nexport type DetectOptions = {\n    ip?: string;               // 指定查詢 IP；不填則由供應商以來源 IP 判斷\n    timeoutMs?: number;        // 自訂逾時（毫秒），不填採用預設\n    forceRefresh?: boolean;    // 強制忽略快取（除錯/緊急）\n    fetchImpl?: typeof fetch;  // 可注入 fetch（測試/代理）\n};\n\nexport class GeoService {\n    // 預設供應商：geoplugin。之後可依環境變數改為 ipapi、ipinfo...等。\n    private provider: GeoProvider = geoPluginProvider;\n\n    // 使用專案的快取抽象層（可切換 memory/redis/none）\n    private cache = getCacheAdapter();\n\n    /**\n     * 取得完整地理資訊（標準化結果）。\n     * - 具備：快取、逾時、降級（失敗回 null）\n     * - 快取 Key 設計：geo:{provider}:{coarseIpKey}\n     */\n    async detectGeo(opts: DetectOptions = {}): Promise<GeoResult | null> {\n        const { ip, forceRefresh, fetchImpl } = opts;\n        const timeoutMs = opts.timeoutMs ?? GEO_DEFAULT_TIMEOUT_MS;\n        const key = `geo:${this.provider.name}:${toCoarseIpKey(ip)}`;\n\n        // 1) 讀取快取（若非強制刷新）\n        //   - CacheAdapter.get 規格：回傳 T | null（沒有 undefined）\n        if (!forceRefresh) {\n            const cached = await this.cache.get<GeoResult | null>(key);\n            if (cached !== null) {\n                // 命中快取：補上 fromCache 標記；若為負面快取（null），直接回 null。\n                return cached ? { ...cached, fromCache: true } : null;\n            }\n        }\n\n        // 2) 未命中快取 → 呼叫供應商\n        const started = Date.now();\n        let result: GeoResult | null = null;\n\n        try {\n            const params: GeoLookupParams = { ip, timeoutMs, fetchImpl };\n            const providerResult = await this.provider.lookup(params);\n\n            // 標準化結果：確保 fromCache 與 elapsedMs 由服務層賦值\n            result = providerResult\n                ? { ...providerResult, fromCache: false, elapsedMs: Date.now() - started }\n                : null;\n\n            // 3) 寫入快取（使用秒作為單位；附帶 tags 便於日後群組清除）\n            await this.cache.set(\n                key,\n                result,\n                {\n                    ttl: msToSec(result ? GEO_SUCCESS_TTL_MS : GEO_NEGATIVE_TTL_MS), // 成功長、失敗短\n                    tags: ['geo', this.provider.name], // 例如可 delByTag('geo') 做批次清除\n                }\n            );\n        } catch {\n            // 4) 任何錯誤（含逾時）都降級為 null，並做短期負面快取以防雪崩\n            await this.cache.set(\n                key,\n                null,\n                {\n                    ttl: msToSec(GEO_NEGATIVE_TTL_MS),\n                    tags: ['geo', this.provider.name],\n                }\n            );\n            return null;\n        }\n\n        return result;\n    }\n\n    /**\n     * 便捷方法：僅返回國家代碼（TW/US/JP...），失敗回 null。\n     */\n    async detectCountry(opts: DetectOptions = {}): Promise<string | null> {\n        const geo = await this.detectGeo(opts);\n        return geo?.countryCode ?? null;\n    }\n\n    /**\n     * 失效特定 IP 的快取（管理/除錯用）。\n     */\n    async invalidate(ip?: string): Promise<void> {\n        const key = `geo:${this.provider.name}:${toCoarseIpKey(ip)}`;\n        await this.cache.del(key);\n    }\n\n    /**\n     * 清除所有快取（謹慎使用；可優先考慮 delByTag('geo')）。\n     */\n    async clearAll(): Promise<void> {\n        await this.cache.clear();\n    }\n}\n\n// 導出單例，便於直接使用。\nexport const geoService = new GeoService();\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1025, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/features/geo/strategy/geo-strategy.ts"],"sourcesContent":["/**\n * 地理位置偵測策略管理模組\n *\n * 此模組提供統一的地理位置偵測策略介面，抽象化不同的偵測方法，\n * 讓上層應用程式可以透過策略模式選擇最適合的地理偵測方式。\n *\n * 支援的偵測策略：\n * 1. api-only: 純第三方 API 偵測（目前實作 geoplugin）\n * 2. cdn-only: 僅使用 CDN 標頭偵測（預留擴充）\n * 3. cdn-fallback: CDN 優先，失敗時降級至 API（預留擴充）\n *\n * 設計原則：\n * - 策略模式：封裝不同偵測方法，便於切換和擴充\n * - 統一介面：提供一致的 API，隱藏底層實作細節\n * - 漸進增強：優先使用快速方法，失敗時自動降級\n * - 容錯設計：偵測失敗不阻塞主流程，回傳 null 讓上層處理\n *\n * 使用場景：\n * - middleware: 在請求初期快速偵測使用者地理位置\n * - SSR: 根據地理位置決定預設語系和內容\n * - 個人化: 提供地區相關的內容和服務\n *\n * 效能考量：\n * - API 偵測：準確但較慢，適合首次訪問或精確需求\n * - CDN 偵測：快速但精度較低，適合即時決策\n * - 混合策略：平衡速度與準確性，提供最佳使用者體驗\n *\n * 擴充性：\n * - 新增策略只需實作對應的 case 分支\n * - 參數結構支援各種偵測需求（IP、超時、快取等）\n * - 可注入自訂 fetch 實作，便於測試和代理\n */\n\n// 作用：\n// - 地理偵測策略的統一入口（目前先支援 api-only）\n// - 抽象未來策略：cdn-only / cdn-fallback，讓上層呼叫端不需改動\n// - 封裝 geoService，提供 detectCountry / detectGeo 便捷方法\n\nimport { geoService } from '@/features/geo/services/geo.service';\nimport type { GeoResult } from '@/features/geo/types/geo.types';\n\n/**\n * 地理偵測策略\n * - api-only：只呼叫第三方 Geo API（目前使用 geoplugin）\n * - cdn-only：僅讀取 CDN 標頭（預留）\n * - cdn-fallback：優先 CDN，失敗改走 API（預留）\n */\nexport type GeoDetectionStrategy = 'api-only' | 'cdn-only' | 'cdn-fallback';\n\n/**\n * 偵測參數\n * - ip：可選指定查詢 IP；不填則由供應商依來源 IP 判定\n * - timeoutMs：第三方 API 逾時（毫秒）\n * - forceRefresh：是否忽略快取強制重查\n * - fetchImpl：可注入自定 fetch（測試/代理）\n */\nexport type GeoDetectParams = {\n    ip?: string;\n    timeoutMs?: number;\n    forceRefresh?: boolean;\n    fetchImpl?: typeof fetch;\n};\n\n/**\n * 依策略偵測完整地理資訊（目前先支援 api-only）\n * - 回傳標準化結果 GeoResult 或 null\n */\nexport async function detectGeoByStrategy(\n    params: GeoDetectParams = {},\n    strategy: GeoDetectionStrategy = 'api-only'\n): Promise<GeoResult | null> {\n    switch (strategy) {\n        case 'api-only':\n            return geoService.detectGeo(params);\n\n        // 預留：之後擴充 CDN 標頭偵測\n        // case 'cdn-only':\n        //   return detectViaCdnHeaders(...);\n\n        // 預留：之後擴充 CDN 優先、API 備援\n        // case 'cdn-fallback':\n        //   return (await detectViaCdnHeaders(...)) ?? geoService.detectGeo(params);\n\n        default:\n            // 未知策略時，保守降級：不阻塞流程\n            return null;\n    }\n}\n\n/**\n * 依策略偵測國家代碼（TW/US/JP...）（目前先支援 api-only）\n * - 回傳 ISO-3166-1 alpha-2 的雙字母代碼或 null\n */\nexport async function detectCountryByStrategy(\n    params: GeoDetectParams = {},\n    strategy: GeoDetectionStrategy = 'api-only'\n): Promise<string | null> {\n    switch (strategy) {\n        case 'api-only':\n            return geoService.detectCountry(params);\n\n        // 預留：之後擴充 CDN 標頭偵測\n        // case 'cdn-only':\n        //   return detectCountryViaCdnHeaders(...);\n\n        // 預留：之後擴充 CDN 優先、API 備援\n        // case 'cdn-fallback':\n        //   // 先嘗試 CDN，取不到再走 API\n        //   return (await detectCountryViaCdnHeaders(...)) ?? geoService.detectCountry(params);\n\n        default:\n            return null;\n    }\n}"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA+BC,GAED,MAAM;AACN,gCAAgC;AAChC,8CAA8C;AAC9C,oDAAoD;;;;;AAEpD;;AA6BO,eAAe,oBAClB,SAA0B,CAAC,CAAC,EAC5B,WAAiC,UAAU;IAE3C,OAAQ;QACJ,KAAK;YACD,OAAO,4JAAA,CAAA,aAAU,CAAC,SAAS,CAAC;QAEhC,mBAAmB;QACnB,mBAAmB;QACnB,qCAAqC;QAErC,wBAAwB;QACxB,uBAAuB;QACvB,6EAA6E;QAE7E;YACI,mBAAmB;YACnB,OAAO;IACf;AACJ;AAMO,eAAe,wBAClB,SAA0B,CAAC,CAAC,EAC5B,WAAiC,UAAU;IAE3C,OAAQ;QACJ,KAAK;YACD,OAAO,4JAAA,CAAA,aAAU,CAAC,aAAa,CAAC;QAEpC,mBAAmB;QACnB,mBAAmB;QACnB,4CAA4C;QAE5C,wBAAwB;QACxB,uBAAuB;QACvB,yBAAyB;QACzB,wFAAwF;QAExF;YACI,OAAO;IACf;AACJ"}},
    {"offset": {"line": 1100, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/features/geo/utils/ip.ts"],"sourcesContent":["// TypeScript\n// 作用：提供跨層可重用的 IP 解析工具，避免直接耦合 Next 的型別\n\n/**\n * 從 Headers 物件萃取客戶端 IP\n * 檢查順序：\n * 1) X-Forwarded-For 的第一個 IP（代理/負載均衡器常見）\n * 2) X-Real-IP（某些代理伺服器使用）\n */\nexport function extractClientIpFromHeaders(\n    headers: Headers | Record<string, string | string[] | undefined>\n): string | undefined {\n    // 讀取 header（相容 Headers 與一般物件）\n    const getHeader = (name: string): string | undefined => {\n        if (typeof (headers as any)?.get === 'function') {\n            const v = (headers as Headers).get(name);\n            return v ?? undefined;\n        }\n        const raw = (headers as Record<string, any>)[name.toLowerCase()] ?? (headers as Record<string, any>)[name];\n        if (Array.isArray(raw)) return raw[0];\n        return raw;\n    };\n\n    // 1) x-forwarded-for: 可能是 \"client, proxy1, proxy2\"，取第一個\n    const xff = getHeader('x-forwarded-for');\n    if (xff) {\n        const first = xff.split(',')[0]?.trim();\n        const ip = normalizeIp(first);\n        if (ip) return ip;\n    }\n\n    // 2) x-real-ip\n    const xri = getHeader('x-real-ip');\n    if (xri) {\n        const ip = normalizeIp(xri.trim());\n        if (ip) return ip;\n    }\n\n    return undefined;\n}\n\n/**\n * 從 NextRequest 推導客戶端 IP（不直接依賴 Next 型別）\n * - 先用 headers 萃取\n * - 失敗再嘗試 req.ip（若存在）\n */\nexport function getClientIpFromRequest(req: { headers: any; ip?: string }): string | undefined {\n    const fromHeaders = extractClientIpFromHeaders(req.headers);\n    if (fromHeaders) return fromHeaders;\n\n    const possible = req.ip;\n    return normalizeIp(possible);\n}\n\n/**\n * 檢查是否為內網/保留位址（可用於過濾）\n */\nexport function isPrivateOrReservedIp(ip?: string): boolean {\n    if (!ip) return true;\n    const v4 = ip.includes('.');\n    if (v4) {\n        if (ip.startsWith('10.')) return true;\n        const parts = ip.split('.');\n        const a = Number(parts[0]), b = Number(parts[1]);\n        if (a === 172 && b >= 16 && b <= 31) return true;\n        if (ip.startsWith('192.168.')) return true;\n        if (ip === '127.0.0.1') return true;\n    } else {\n        // IPv6 常見本機/保留\n        if (ip === '::1') return true;\n        if (ip.toLowerCase().startsWith('fc') || ip.toLowerCase().startsWith('fd')) return true; // Unique local\n    }\n    return false;\n}\n\n/**\n * 將輸入正規化為非空的 IP 字串（若不合法則回傳 undefined）\n */\nfunction normalizeIp(val: unknown): string | undefined {\n    if (typeof val !== 'string') return undefined;\n    const s = val.trim();\n    if (!s) return undefined;\n    // 基礎檢核（不做嚴格驗證，保留彈性）\n    if (!(s.includes('.') || s.includes(':'))) return undefined;\n    return s;\n}"],"names":[],"mappings":"AAAA,aAAa;AACb,sCAAsC;AAEtC;;;;;CAKC;;;;;AACM,SAAS,2BACZ,OAAgE;IAEhE,8BAA8B;IAC9B,MAAM,YAAY,CAAC;QACf,IAAI,OAAQ,SAAiB,QAAQ,YAAY;YAC7C,MAAM,IAAI,AAAC,QAAoB,GAAG,CAAC;YACnC,OAAO,KAAK;QAChB;QACA,MAAM,MAAM,AAAC,OAA+B,CAAC,KAAK,WAAW,GAAG,IAAI,AAAC,OAA+B,CAAC,KAAK;QAC1G,IAAI,MAAM,OAAO,CAAC,MAAM,OAAO,GAAG,CAAC,EAAE;QACrC,OAAO;IACX;IAEA,wDAAwD;IACxD,MAAM,MAAM,UAAU;IACtB,IAAI,KAAK;QACL,MAAM,QAAQ,IAAI,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE;QACjC,MAAM,KAAK,YAAY;QACvB,IAAI,IAAI,OAAO;IACnB;IAEA,eAAe;IACf,MAAM,MAAM,UAAU;IACtB,IAAI,KAAK;QACL,MAAM,KAAK,YAAY,IAAI,IAAI;QAC/B,IAAI,IAAI,OAAO;IACnB;IAEA,OAAO;AACX;AAOO,SAAS,uBAAuB,GAAkC;IACrE,MAAM,cAAc,2BAA2B,IAAI,OAAO;IAC1D,IAAI,aAAa,OAAO;IAExB,MAAM,WAAW,IAAI,EAAE;IACvB,OAAO,YAAY;AACvB;AAKO,SAAS,sBAAsB,EAAW;IAC7C,IAAI,CAAC,IAAI,OAAO;IAChB,MAAM,KAAK,GAAG,QAAQ,CAAC;IACvB,IAAI,IAAI;QACJ,IAAI,GAAG,UAAU,CAAC,QAAQ,OAAO;QACjC,MAAM,QAAQ,GAAG,KAAK,CAAC;QACvB,MAAM,IAAI,OAAO,KAAK,CAAC,EAAE,GAAG,IAAI,OAAO,KAAK,CAAC,EAAE;QAC/C,IAAI,MAAM,OAAO,KAAK,MAAM,KAAK,IAAI,OAAO;QAC5C,IAAI,GAAG,UAAU,CAAC,aAAa,OAAO;QACtC,IAAI,OAAO,aAAa,OAAO;IACnC,OAAO;QACH,eAAe;QACf,IAAI,OAAO,OAAO,OAAO;QACzB,IAAI,GAAG,WAAW,GAAG,UAAU,CAAC,SAAS,GAAG,WAAW,GAAG,UAAU,CAAC,OAAO,OAAO,MAAM,eAAe;IAC5G;IACA,OAAO;AACX;AAEA;;CAEC,GACD,SAAS,YAAY,GAAY;IAC7B,IAAI,OAAO,QAAQ,UAAU,OAAO;IACpC,MAAM,IAAI,IAAI,IAAI;IAClB,IAAI,CAAC,GAAG,OAAO;IACf,oBAAoB;IACpB,IAAI,CAAC,CAAC,EAAE,QAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAC,IAAI,GAAG,OAAO;IAClD,OAAO;AACX"}},
    {"offset": {"line": 1175, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["/**\n * Next.js Middleware - 國際化與地理位置偵測\n *\n * 此 middleware 整合了 next-intl 的國際化功能與自訂的地理位置偵測，\n * 在每個請求的早期階段執行以下處理：\n *\n * 1. 國際化處理：透過 next-intl 處理語系路由、重導向等\n * 2. 地理偵測：根據環境變數決定是否執行，避免不必要的處理\n * 3. 容錯設計：地理偵測失敗不影響主要的國際化流程\n *\n * 執行順序：\n * - 先執行 next-intl middleware 取得基礎回應\n * - 檢查地理偵測開關，決定是否執行偵測邏輯\n * - 在同一回應上追加地理偵測結果的 Cookie\n * - 確保原有的重導向、重寫等行為不受影響\n *\n * 地理偵測特性：\n * - 受 GEO_DETECTION_ENABLED 環境變數控制\n * - 使用 api-only 策略（透過第三方 API）\n * - 800ms 超時限制，避免阻塞請求\n * - 偵測結果存入 detected_country Cookie（1天有效期）\n * - 偵測失敗時清除舊的 Cookie 避免過期資料\n */\n\nimport type {NextRequest} from 'next/server';\nimport {NextResponse} from 'next/server';\nimport createMiddleware from 'next-intl/middleware';\nimport {routing} from '@/i18n/routing';\nimport {detectCountryByStrategy} from '@/features/geo/strategy/geo-strategy'; // 地理位置的策略函數\nimport {getClientIpFromRequest} from '@/features/geo/utils/ip'; // 取得 IP 位置的函數\nimport {env} from '@/env.mjs';\n\n\n// 先建立 next-intl 的既有 middleware\nconst intlMiddleware = createMiddleware(routing);\n\n// 在模組層定義：將 NODE_ENV 正規化成一般字串再比較，避免字面量型別引發 TS2367\nconst isDevEnv = (() => {\n    const v = String(process.env.NODE_ENV || '').toLowerCase();\n    return v === 'development';\n})();\n\n\nexport default async function middleware(req: NextRequest) {\n    // 1) 先執行 next-intl 的 middleware，保留其 redirect/rewrite 等行為\n    const res = intlMiddleware(req) as NextResponse;\n\n\n    // 2) 依環境開關決定是否執行地理偵測\n    if (!env.INTERNATIONALIZATION_ENABLED || !env.GEO_DETECTION_ENABLED) {\n        return res;\n    }\n\n    // 3) 在同一個回應上追加 geo 偵測（api-only）與 Cookie 寫入\n    try {\n        const ip = getClientIpFromRequest(req);\n        const timeoutMs = env.GEO_API_TIMEOUT; // 來自環境的逾時（毫秒）\n        const country = await detectCountryByStrategy({ip, timeoutMs}, 'api-only');\n        // 僅在開發模式寫入 debug 用的 detected_ip Cookie\n        if (process.env.NODE_ENV === 'development') {\n            const detectedIp = ip ?? '';\n            res.cookies.set('detected_ip', detectedIp, {\n                maxAge: 60 * 60 * 24, // 1 天（秒）\n                path: '/',\n                sameSite: 'lax',\n                secure: !isDevEnv,\n                httpOnly: false\n            });\n        }\n\n        if (country) {\n            res.cookies.set('detected_country', country, {\n                maxAge: 60 * 60 * 24, // 1 天（秒）\n                path: '/',\n                sameSite: 'lax',\n                secure: process.env.NODE_ENV === 'production',\n                httpOnly: false\n            });\n        } else {\n            res.cookies.set('detected_country', '', {\n                maxAge: 0,\n                path: '/',\n                sameSite: 'lax'\n            });\n        }\n    } catch {\n        // 靜默失敗，不影響 i18n 的流程\n    }\n\n    return res;\n}\n\n\n\n\n/**\n * Middleware 配置\n *\n * 匹配所有路徑，除了以下情況：\n * - 以 `/api`、`/trpc`、`/_next` 或 `/_vercel` 開頭的路徑\n * - 包含點號的路徑（例如 `favicon.ico`、靜態檔案）\n *\n * 這樣的配置確保：\n * - API 路由不受國際化影響\n * - Next.js 內部路徑不被處理\n * - 靜態資源直接提供，不經過 middleware\n */\nexport const config = {\n    matcher: '/((?!api|trpc|_next|_vercel|.*\\\\..*).*)'\n};"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;CAsBC;;;;AAID;AACA;AACA,mRAA8E,YAAY;AAC1F,sPAAgE,cAAc;AAC9E;;;;;;AAGA,+BAA+B;AAC/B,MAAM,iBAAiB,CAAA,GAAA,8LAAA,CAAA,UAAgB,AAAD,EAAE,8HAAA,CAAA,UAAO;AAE/C,iDAAiD;AACjD,MAAM,WAAW,CAAC;IACd,MAAM,IAAI,OAAO,mDAAwB,IAAI,WAAW;IACxD,OAAO,MAAM;AACjB,CAAC;AAGc,eAAe,WAAW,GAAgB;IACrD,yDAAyD;IACzD,MAAM,MAAM,eAAe;IAG3B,qBAAqB;IACrB,IAAI,CAAC,mHAAA,CAAA,MAAG,CAAC,4BAA4B,IAAI,CAAC,mHAAA,CAAA,MAAG,CAAC,qBAAqB,EAAE;QACjE,OAAO;IACX;IAEA,2CAA2C;IAC3C,IAAI;QACA,MAAM,KAAK,CAAA,GAAA,6IAAA,CAAA,yBAAsB,AAAD,EAAE;QAClC,MAAM,YAAY,mHAAA,CAAA,MAAG,CAAC,eAAe,EAAE,cAAc;QACrD,MAAM,UAAU,MAAM,CAAA,GAAA,6JAAA,CAAA,0BAAuB,AAAD,EAAE;YAAC;YAAI;QAAS,GAAG;QAC/D,uCAAuC;QACvC,wCAA4C;YACxC,MAAM,aAAa,MAAM;YACzB,IAAI,OAAO,CAAC,GAAG,CAAC,eAAe,YAAY;gBACvC,QAAQ,KAAK,KAAK;gBAClB,MAAM;gBACN,UAAU;gBACV,QAAQ,CAAC;gBACT,UAAU;YACd;QACJ;QAEA,IAAI,SAAS;YACT,IAAI,OAAO,CAAC,GAAG,CAAC,oBAAoB,SAAS;gBACzC,QAAQ,KAAK,KAAK;gBAClB,MAAM;gBACN,UAAU;gBACV,QAAQ,oDAAyB;gBACjC,UAAU;YACd;QACJ,OAAO;YACH,IAAI,OAAO,CAAC,GAAG,CAAC,oBAAoB,IAAI;gBACpC,QAAQ;gBACR,MAAM;gBACN,UAAU;YACd;QACJ;IACJ,EAAE,OAAM;IACJ,oBAAoB;IACxB;IAEA,OAAO;AACX;AAiBO,MAAM,SAAS;IAClB,SAAS;AACb"}}]
}