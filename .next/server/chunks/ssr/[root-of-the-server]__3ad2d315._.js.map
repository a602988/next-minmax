{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/i18n/routing.ts"],"sourcesContent":["import { defineRouting } from 'next-intl/routing';\n\nexport const routing = defineRouting({\n  // 支援的語系 - 這個會被 API 動態覆蓋\n  locales: ['zh-TW', 'zh-CN', 'en', 'ja'],\n  \n  // 預設語系 - 這個也會被 API 動態覆蓋\n  defaultLocale: 'zh-TW',\n  \n  // 預設語系不加前綴\n  localePrefix: 'as-needed',\n  \n  // 啟用語系檢測\n  localeDetection: true\n});\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,UAAU,CAAA,GAAA,kOAAA,CAAA,gBAAa,AAAD,EAAE;IACnC,wBAAwB;IACxB,SAAS;QAAC;QAAS;QAAS;QAAM;KAAK;IAEvC,wBAAwB;IACxB,eAAe;IAEf,WAAW;IACX,cAAc;IAEd,SAAS;IACT,iBAAiB;AACnB","debugId":null}},
    {"offset": {"line": 53, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/i18n/navigation.ts"],"sourcesContent":["import {createNavigation} from 'next-intl/navigation';\nimport {routing} from './routing';\n\n//這是在 Next.js 導航 API 基礎上，考量到路由設定的輕量級封裝。\nexport const {Link, redirect, usePathname, useRouter, getPathname} =\n    createNavigation(routing);\n"],"names":[],"mappings":";;;;;;;AAAA;AACA;;;AAGO,MAAM,EAAC,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,EAAC,GAC9D,CAAA,GAAA,8PAAA,CAAA,mBAAgB,AAAD,EAAE,sHAAA,CAAA,UAAO","debugId":null}},
    {"offset": {"line": 69, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/lib/locale-utils.ts"],"sourcesContent":["import { routing } from '@/i18n/routing';\n\n/**\n * 移除路徑中的語系前綴，取得基底路徑\n * @param pathname - 當前路徑 (例如: /en/about 或 /about)\n * @returns 不含語系前綴的基底路徑 (例如: /about)\n */\nexport function getBasePathWithoutLocale(pathname: string): string {\n    const parts = pathname.split('/').filter(Boolean);\n    const first = parts[0];\n\n    // 檢查第一段是否為支援的語系\n    const hasLocalePrefix = !!first && routing.locales.includes(first as any);\n\n    // 移除語系前綴\n    const withoutLocale = hasLocalePrefix ? parts.slice(1) : parts;\n    const path = `/${withoutLocale.join('/')}`;\n\n    return path === '' ? '/' : path;\n}\n\n/**\n * 檢查路徑是否包含語系前綴\n * @param pathname - 當前路徑\n * @returns 是否包含語系前綴\n */\nexport function hasLocalePrefix(pathname: string): boolean {\n    const parts = pathname.split('/').filter(Boolean);\n    const first = parts[0];\n    return !!first && routing.locales.includes(first as any);\n}\n\n/**\n * 將查詢參數附加到路徑上\n * @param path - 基底路徑\n * @param searchParams - URLSearchParams 物件\n * @returns 包含查詢參數的完整路徑\n */\nexport function appendSearchParams(path: string, searchParams?: URLSearchParams | null): string {\n    const qsString = searchParams?.toString();\n    return qsString ? `${path}?${qsString}` : path;\n}\n\n/**\n * 為語系切換器準備 href\n * 整合路徑處理和查詢參數邏輯\n * @param pathname - 當前路徑\n * @param searchParams - 查詢參數\n * @returns 處理後的 href\n */\nexport function prepareLanguageSwitcherHref(pathname: string, searchParams?: URLSearchParams | null): string {\n    const basePath = getBasePathWithoutLocale(pathname);\n    return appendSearchParams(basePath, searchParams);\n}"],"names":[],"mappings":";;;;;;AAAA;;AAOO,SAAS,yBAAyB,QAAgB;IACrD,MAAM,QAAQ,SAAS,KAAK,CAAC,KAAK,MAAM,CAAC;IACzC,MAAM,QAAQ,KAAK,CAAC,EAAE;IAEtB,gBAAgB;IAChB,MAAM,kBAAkB,CAAC,CAAC,SAAS,sHAAA,CAAA,UAAO,CAAC,OAAO,CAAC,QAAQ,CAAC;IAE5D,SAAS;IACT,MAAM,gBAAgB,kBAAkB,MAAM,KAAK,CAAC,KAAK;IACzD,MAAM,OAAO,CAAC,CAAC,EAAE,cAAc,IAAI,CAAC,MAAM;IAE1C,OAAO,SAAS,KAAK,MAAM;AAC/B;AAOO,SAAS,gBAAgB,QAAgB;IAC5C,MAAM,QAAQ,SAAS,KAAK,CAAC,KAAK,MAAM,CAAC;IACzC,MAAM,QAAQ,KAAK,CAAC,EAAE;IACtB,OAAO,CAAC,CAAC,SAAS,sHAAA,CAAA,UAAO,CAAC,OAAO,CAAC,QAAQ,CAAC;AAC/C;AAQO,SAAS,mBAAmB,IAAY,EAAE,YAAqC;IAClF,MAAM,WAAW,cAAc;IAC/B,OAAO,WAAW,GAAG,KAAK,CAAC,EAAE,UAAU,GAAG;AAC9C;AASO,SAAS,4BAA4B,QAAgB,EAAE,YAAqC;IAC/F,MAAM,WAAW,yBAAyB;IAC1C,OAAO,mBAAmB,UAAU;AACxC","debugId":null}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/components/LanguageSwitcher.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\nimport type { Language } from '@/types';\nimport { Link } from '@/i18n/navigation';\nimport { routing } from '@/i18n/routing';\nimport { prepareLanguageSwitcherHref } from '@/lib/locale-utils';\nimport type { ReadonlyURLSearchParams } from 'next/navigation';\n\n/**\n * 語言切換器組件的屬性類型定義\n */\ntype LanguageSwitcherProps = {\n    /** 自定義 CSS 類名 */\n    className?: string;\n    /** 可用語言列表 */\n    languages: Language[];\n    /** 當前語系 ID */\n    currentLocale: string;\n    /** 當前路徑 */\n    pathname: string;\n    /** URL 查詢參數 */\n    searchParams: ReadonlyURLSearchParams | null;\n    /** 是否顯示語言標籤文字，預設為 true */\n    showLabels?: boolean;\n    /** 顯示變體：下拉選單或內聯列表，預設為 'inline' */\n    variant?: 'dropdown' | 'inline';\n};\n\n/**\n * 語言切換器組件\n *\n * 提供多語言網站的語言切換功能，支援兩種顯示模式：\n * 1. inline: 內聯顯示所有語言選項\n * 2. dropdown: 下拉選單顯示（目前僅顯示按鈕，下拉功能待實作）\n *\n * 特色功能：\n * - 無障礙支援 (ARIA 標籤、鍵盤導航)\n * - SEO 友善 (hrefLang 屬性)\n * - 響應式設計\n * - 當前語言高亮顯示\n * - 預設語言標記\n *\n * @param props - 組件屬性\n * @returns 語言切換器 JSX 元素\n */\nexport default function LanguageSwitcher({\n                                             className,\n                                             languages,\n                                             currentLocale,\n                                             pathname,\n                                             searchParams,\n                                             showLabels = true,\n                                             variant = 'inline'\n                                         }: LanguageSwitcherProps) {\n    // 錯誤處理：若無語系列表，顯示錯誤訊息或不渲染\n    if (!languages || languages.length === 0) {\n        // 開發環境下顯示警告訊息\n        if (process.env.NODE_ENV === 'development') {\n            return (\n                <div className={className}>\n                    <span className=\"text-red-500 text-sm\">⚠️ 無語系資料</span>\n                </div>\n            );\n        }\n        // 生產環境下不渲染任何內容\n        return null;\n    }\n\n    // 找到當前語言的詳細資訊\n    const currentLanguage = languages.find(lang => lang.id === currentLocale);\n\n    return (\n        <nav\n            className={className}\n            aria-label=\"Language switcher\"\n            role=\"navigation\"\n        >\n            {variant === 'dropdown' ? (\n                // 下拉選單版本（目前僅顯示當前語言按鈕）\n                <div className=\"relative\">\n                    <button\n                        className=\"inline-flex items-center gap-2 rounded px-3 py-1 text-sm bg-gray-100 text-gray-800 hover:bg-gray-200\"\n                        aria-expanded=\"false\"\n                        aria-haspopup=\"true\"\n                        aria-label={`Current language: ${currentLanguage?.native || currentLanguage?.title}. Click to change language`}\n                    >\n                        {/* 語言圖示 */}\n                        {currentLanguage?.icon && (\n                            <span\n                                aria-hidden=\"true\"\n                                className={`${currentLanguage.icon} inline-block h-4 w-4`}\n                            />\n                        )}\n                        {/* 語言標籤 */}\n                        {showLabels && (\n                            <span>{currentLanguage?.native || currentLanguage?.title}</span>\n                        )}\n                        {/* 下拉箭頭圖示 */}\n                        <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                        </svg>\n                    </button>\n                    {/* TODO: 實作下拉選單內容 */}\n                </div>\n            ) : (\n                // 內聯版本：顯示所有語言選項\n                <ul\n                    className=\"flex flex-wrap items-center gap-2\"\n                    role=\"list\"\n                >\n                    {languages.map((lang) => {\n                        // 優先顯示原生語言名稱，否則顯示英文名稱\n                        const label = lang.native || lang.title;\n                        // 生成語言切換連結，保持當前路徑和查詢參數\n                        const href = prepareLanguageSwitcherHref(pathname, searchParams);\n                        // 判斷是否為當前語言\n                        const active = currentLocale === lang.id;\n\n                        return (\n                            <li key={lang.id} role=\"listitem\">\n                                <Link\n                                    href={href}\n                                    locale={lang.id as (typeof routing.locales)[number]}\n                                    className={\n                                        'inline-flex items-center gap-2 rounded px-3 py-1 text-sm transition-colors ' +\n                                        (active\n                                                ? 'bg-blue-600 text-white' // 當前語言樣式\n                                                : 'bg-gray-100 text-gray-800 hover:bg-gray-200 focus:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2' // 非當前語言樣式\n                                        )\n                                    }\n                                    // 無障礙屬性：標示當前頁面\n                                    aria-current={active ? 'page' : undefined}\n                                    // 無障礙屬性：螢幕閱讀器標籤\n                                    aria-label={`Switch to ${lang.title}${lang.native ? ` (${lang.native})` : ''}`}\n                                    // 滑鼠懸停提示\n                                    title={`${lang.title}${lang.native ? ` (${lang.native})` : ''}`}\n                                    // SEO 屬性：指定連結的語言\n                                    hrefLang={lang.id}\n                                    // HTML 語言屬性\n                                    lang={lang.id}\n                                >\n                                    {/* 語言圖示 */}\n                                    {lang.icon && (\n                                        <span\n                                            aria-hidden=\"true\"\n                                            className={`${lang.icon} inline-block h-4 w-4`}\n                                        />\n                                    )}\n\n                                    {/* 語言標籤文字 */}\n                                    {showLabels && <span>{label}</span>}\n\n                                    {/* 預設語言標記 */}\n                                    {lang.default && (\n                                        <span\n                                            className=\"ml-1 rounded bg-blue-500/20 px-1.5 py-0.5 text-[10px]\"\n                                            aria-label=\"Default language\"\n                                        >\n                                            default\n                                        </span>\n                                    )}\n\n                                    {/* 視覺上隱藏但對螢幕閱讀器可見的文字 */}\n                                    <span className=\"sr-only\">\n                                        {active ? '(current)' : `Switch to ${lang.title}`}\n                                    </span>\n                                </Link>\n                            </li>\n                        );\n                    })}\n                </ul>\n            )}\n        </nav>\n    );\n}"],"names":[],"mappings":";;;;AAIA;AAEA;AANA;;;;AA8Ce,SAAS,iBAAiB,EACI,SAAS,EACT,SAAS,EACT,aAAa,EACb,QAAQ,EACR,YAAY,EACZ,aAAa,IAAI,EACjB,UAAU,QAAQ,EACE;IAC7D,yBAAyB;IACzB,IAAI,CAAC,aAAa,UAAU,MAAM,KAAK,GAAG;QACtC,cAAc;QACd,wCAA4C;YACxC,qBACI,8OAAC;gBAAI,WAAW;0BACZ,cAAA,8OAAC;oBAAK,WAAU;8BAAuB;;;;;;;;;;;QAGnD;;;IAGJ;IAEA,cAAc;IACd,MAAM,kBAAkB,UAAU,IAAI,CAAC,CAAA,OAAQ,KAAK,EAAE,KAAK;IAE3D,qBACI,8OAAC;QACG,WAAW;QACX,cAAW;QACX,MAAK;kBAEJ,YAAY,aACT,sBAAsB;sBACtB,8OAAC;YAAI,WAAU;sBACX,cAAA,8OAAC;gBACG,WAAU;gBACV,iBAAc;gBACd,iBAAc;gBACd,cAAY,CAAC,kBAAkB,EAAE,iBAAiB,UAAU,iBAAiB,MAAM,0BAA0B,CAAC;;oBAG7G,iBAAiB,sBACd,8OAAC;wBACG,eAAY;wBACZ,WAAW,GAAG,gBAAgB,IAAI,CAAC,qBAAqB,CAAC;;;;;;oBAIhE,4BACG,8OAAC;kCAAM,iBAAiB,UAAU,iBAAiB;;;;;;kCAGvD,8OAAC;wBAAI,WAAU;wBAAU,MAAK;wBAAO,QAAO;wBAAe,SAAQ;kCAC/D,cAAA,8OAAC;4BAAK,eAAc;4BAAQ,gBAAe;4BAAQ,aAAa;4BAAG,GAAE;;;;;;;;;;;;;;;;;;;;;mBAMjF,gBAAgB;sBAChB,8OAAC;YACG,WAAU;YACV,MAAK;sBAEJ,UAAU,GAAG,CAAC,CAAC;gBACZ,sBAAsB;gBACtB,MAAM,QAAQ,KAAK,MAAM,IAAI,KAAK,KAAK;gBACvC,uBAAuB;gBACvB,MAAM,OAAO,CAAA,GAAA,6HAAA,CAAA,8BAA2B,AAAD,EAAE,UAAU;gBACnD,YAAY;gBACZ,MAAM,SAAS,kBAAkB,KAAK,EAAE;gBAExC,qBACI,8OAAC;oBAAiB,MAAK;8BACnB,cAAA,8OAAC,yHAAA,CAAA,OAAI;wBACD,MAAM;wBACN,QAAQ,KAAK,EAAE;wBACf,WACI,gFACA,CAAC,SACS,yBAAyB,SAAS;2BAClC,wIAAwI,UAAU;wBAC5J;wBAEJ,eAAe;wBACf,gBAAc,SAAS,SAAS;wBAChC,gBAAgB;wBAChB,cAAY,CAAC,UAAU,EAAE,KAAK,KAAK,GAAG,KAAK,MAAM,GAAG,CAAC,EAAE,EAAE,KAAK,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI;wBAC9E,SAAS;wBACT,OAAO,GAAG,KAAK,KAAK,GAAG,KAAK,MAAM,GAAG,CAAC,EAAE,EAAE,KAAK,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI;wBAC/D,iBAAiB;wBACjB,UAAU,KAAK,EAAE;wBACjB,YAAY;wBACZ,MAAM,KAAK,EAAE;;4BAGZ,KAAK,IAAI,kBACN,8OAAC;gCACG,eAAY;gCACZ,WAAW,GAAG,KAAK,IAAI,CAAC,qBAAqB,CAAC;;;;;;4BAKrD,4BAAc,8OAAC;0CAAM;;;;;;4BAGrB,KAAK,OAAO,kBACT,8OAAC;gCACG,WAAU;gCACV,cAAW;0CACd;;;;;;0CAML,8OAAC;gCAAK,WAAU;0CACX,SAAS,cAAc,CAAC,UAAU,EAAE,KAAK,KAAK,EAAE;;;;;;;;;;;;mBA7CpD,KAAK,EAAE;;;;;YAkDxB;;;;;;;;;;;AAKpB","debugId":null}},
    {"offset": {"line": 287, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/env.mjs"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\n/**\n * 環境變數配置 - 程式碼優先的配置管理\n *\n * 設計原則：\n * 1. env.mjs 包含所有預設值和業務邏輯配置\n * 2. .env 檔案只覆寫需要變更或敏感的設定\n * 3. 開發時依賴預設值，生產時用環境變數覆蓋\n */\n\n/**\n * 伺服器端環境變數配置\n * 這些變數只在伺服器端使用，確保安全性，不會暴露給客戶端\n */\nconst server = {\n    // ==========================================\n    // 國際化與語系配置\n    // 控制多語系、地理位置偵測及語系重導功能\n    // ==========================================\n\n    /** 國際化功能總開關 */\n    INTERNATIONALIZATION_ENABLED: z.string().transform((val) => val === \"true\").default(\"true\"),\n\n    /** 多語系功能開關 */\n    MULTI_LANGUAGE_ENABLED: z.string().transform((val) => val === \"true\").default(\"true\"),\n\n    /** ip 地理偵測功能開關 */\n    GEO_DETECTION_ENABLED: z.string().transform((val) => val === \"true\").default(\"false\"),\n\n    /** 強制重導開關 */\n    FORCE_REDIRECT: z.string().transform((val) => val === \"true\").default(\"false\"),\n\n    // ==========================================\n    // 專案核心配置\n    // 專案基本資訊與預設語系設定\n    // ==========================================\n\n    /** 專案代碼 */\n    PROJECT_CODE: z.string().default(\"minmax2025\"),\n\n    /** 預設語系 */\n    DEFAULT_LANGUAGE: z.string().default(\"zh-TW\"),\n\n    /** 國家子網域對應表 (JSON) {\"TW\": \"tw\", \"US\": \"us\", \"JP\": \"jp\"} */\n    COUNTRY_SUBDOMAIN_MAP: z.string().default('{}'),\n\n    // ==========================================\n    // 🔄 快取系統配置\n    // 控制整體快取策略和生存時間\n    // ==========================================\n\n    /** 快取系統總開關 */\n    CACHE_ENABLED: z.string().transform((val) => val === \"true\").default(\"true\"),\n\n    /** CDN 快取協作開關 */\n    CACHE_CDN_ENABLED: z.string().transform((val) => val === \"true\").default(\"false\"),\n\n    /** 國際化快取策略 */\n    I18N_CACHE_STRATEGY: z.enum([\"memory\", \"redis\", \"none\"]).default(\"memory\"),\n\n    /** 快取預設生存時間 (秒) */\n    CACHE_DEFAULT_TTL: z.string().transform((val) => parseInt(val)).default(\"3600\"),\n\n    // ==========================================\n    // API 與外部服務配置\n    // API 網址、超時設定及第三方服務配置\n    // ==========================================\n\n    /** 外部後端 API 基礎網址 */\n    EXTERNAL_API_BASE_URL: z.string().default(\"https://v5.jeffy.test\"),\n\n    /** 一般 API 請求超時 (毫秒) */\n    API_TIMEOUT: z.string().transform((val) => parseInt(val)).default(\"5000\"),\n\n    /** 內容 API 請求超時 (毫秒) */\n    CONTENT_API_TIMEOUT: z.string().transform((val) => parseInt(val)).default(\"10000\"),\n\n    /** 地理位置 API 超時 (毫秒) */\n    GEO_API_TIMEOUT: z.string().transform((val) => parseInt(val)).default(\"800\"),\n\n    /** 地理位置服務提供商 */\n    GEO_API_PROVIDER: z.enum([\"ipapi\", \"ipinfo\", \"geoplugin\"]).default(\"geoplugin\"),\n\n    // ==========================================\n    // 開發與測試配置\n    // Mock API、錯誤模擬及開發工具設定\n    // ==========================================\n\n    /** Mock API 開關 */\n    USE_MOCK_API: z.string().transform((val) => val === \"true\").default(\"true\"),\n\n    /** Mock API 延遲模擬 (毫秒) */\n    MOCK_API_DELAY: z.string().transform((val) => parseInt(val)).default(\"100\"),\n\n    /** 錯誤模擬開關 */\n    MOCK_ERROR_ENABLED: z.string().transform((val) => val === \"true\").default(\"false\"),\n\n    /** 錯誤模擬機率 (0.0-1.0) */\n    MOCK_ERROR_RATE: z.string().transform((val) => parseFloat(val)).default(\"0.0\"),\n\n    // ==========================================\n    // 監控與日誌配置\n    // API 日誌記錄及效能監控開關\n    // ==========================================\n\n    /** API 請求日誌記錄 */\n    API_LOGGING_ENABLED: z.string().transform((val) => val === \"true\").default(\"true\"),\n\n    /** 效能監控開關 */\n    PERFORMANCE_MONITORING_ENABLED: z.string().transform((val) => val === \"true\").default(\"false\"),\n\n    // ==========================================\n    // 功能開關\n    // 各項業務功能的開關控制\n    // ==========================================\n\n    /** 會員功能開關 */\n   MEMBERSHIP_ENABLED: z.string().transform((val) => val === \"true\").default(\"false\"),\n\n    // ==========================================\n    // 🔐 敏感資訊\n    // 資料庫、API 金鑰等敏感資料，僅在 .env 中設定\n    // ==========================================\n\n    /** 資料庫連線字串 */\n    //DATABASE_URL: z.string().optional(),\n\n    /** Redis 連線字串 */\n    //REDIS_URL: z.string().optional(),\n\n    /** API 密鑰 */\n    //API_SECRET_KEY: z.string().optional(),\n\n    /** JWT 簽名密鑰 */\n   // JWT_SECRET: z.string().optional(),\n\n    /** 管理員 API 金鑰 */\n    //ADMIN_API_KEY: z.string().optional(),\n\n    /** 地理位置服務 API 金鑰 */\n    //GEO_API_KEY: z.string().optional(),\n};\n\n/**\n * 客戶端環境變數配置\n * 這些變數會暴露給瀏覽器，請避免包含敏感資訊\n * 所有變數都必須以 NEXT_PUBLIC_ 前綴開始\n */\nconst client = {\n    // ==========================================\n    // 🏗️ 專案基本資訊\n    // 前端顯示用的專案資訊和基礎配置\n    // ==========================================\n\n    /** 專案顯示名稱 */\n    NEXT_PUBLIC_PROJECT_NAME: z.string().default(\"demo測試網站\"),\n\n    /** 前端預設語系 */\n    NEXT_PUBLIC_DEFAULT_LOCALE: z.string().default(\"zh-TW\"),\n\n    /** API 版本號 */\n    NEXT_PUBLIC_API_VERSION: z.string().default(\"1.0.0\"),\n\n    // ==========================================\n    // 🌐 API 與服務配置\n    // 客戶端 API 呼叫相關設定\n    // ==========================================\n\n    /** 前端 API 基礎網址 */\n    NEXT_PUBLIC_API_BASE_URL: z.string().default(\"http://localhost:3000\"),\n\n    // ==========================================\n    // 🌍 國際化功能開關\n    // 前端國際化相關的功能控制\n    // ==========================================\n\n    /** 前端多語系功能開關 */\n    NEXT_PUBLIC_MULTI_LANGUAGE_ENABLED: z.string().transform((val) => val === \"true\").default(\"true\"),\n\n    // ==========================================\n    // 🗺️ 地理位置偵測配置\n    // 使用者地理位置偵測與重導邏輯設定\n    // ==========================================\n\n    /** 地理位置偵測策略 */\n    NEXT_PUBLIC_GEO_DETECTION_STRATEGY: z.enum([\"cdn-only\", \"api-only\", \"cdn-fallback\"]).default(\"api-only\"),\n\n    /** 地理重導模式 */\n    NEXT_PUBLIC_GEO_REDIRECT_MODE: z.enum([\"off\", \"suggest\", \"force\"]).default(\"suggest\"),\n\n    /** CDN 國家標頭名稱 */\n    NEXT_PUBLIC_CDN_COUNTRY_HEADER: z.string().default(\"cf-ipcountry\"),\n\n    // ==========================================\n    // ⚙️ 前端功能配置\n    // 前端特有的功能開關和配置\n    // ==========================================\n\n    /** 前端快取功能開關 */\n    NEXT_PUBLIC_CACHE_ENABLED: z.string().transform((val) => val === \"true\").default(\"true\"),\n\n    /** 開發模式開關 */\n    NEXT_PUBLIC_DEV_MODE_ENABLED: z.string().transform((val) => val === \"true\").default(\"false\"),\n\n    // ==========================================\n    // 🔧 外部服務配置\n    // 第三方服務的公開配置項目\n    // ==========================================\n\n    /** 錯誤追蹤服務 DSN */\n    NEXT_PUBLIC_SENTRY_DSN: z.string().optional(),\n};\n\n// 取得所有 schema 的鍵名\nconst serverKeys = Object.keys(server);\nconst clientKeys = Object.keys(client);\n\nexport const env = createEnv({\n    server,\n    client,\n\n    /**\n     * 運行時環境變數映射\n     * 精確地從 process.env 映射我們定義的變數\n     */\n    runtimeEnv: {\n        ...Object.fromEntries(\n            serverKeys.map(key => [key, process.env[key]])\n        ),\n        ...Object.fromEntries(\n            clientKeys.map(key => [key, process.env[key]])\n        ),\n    },\n});"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 438, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/config/app.config.ts"],"sourcesContent":["\nimport { env } from '@/env.mjs';\n\n/**\n * 應用程式核心配置\n * 整合環境變數與預設值\n */\nexport const APP_CONFIG = {\n    // 專案基本資訊\n    PROJECT_NAME: env.PROJECT_CODE, // 專案代碼名稱\n\n    // API 配置\n    API: {\n        BASE_URL: env.NEXT_PUBLIC_API_BASE_URL, // 前端 API 基礎網址\n        EXTERNAL_URL: env.EXTERNAL_API_BASE_URL, // 外部後端 API 基礎網址\n        TIMEOUT: env.API_TIMEOUT, // 一般 API 請求超時 (毫秒)\n        CONTENT_TIMEOUT: env.CONTENT_API_TIMEOUT, // 內容 API 請求超時 (毫秒)\n        GEO_TIMEOUT: env.GEO_API_TIMEOUT, // 地理位置 API 超時 (毫秒)\n    },\n\n    // 功能開關\n    FEATURES: {\n        INTERNATIONALIZATION: env.INTERNATIONALIZATION_ENABLED, // 國際化功能總開關\n        GEO_DETECTION: env.GEO_DETECTION_ENABLED, // IP 地理偵測功能開關\n        FORCE_REDIRECT: env.FORCE_REDIRECT, // 強制重導開關\n        MULTI_LANGUAGE: env.MULTI_LANGUAGE_ENABLED, // 多語系功能開關\n        MEMBERSHIP: env.MEMBERSHIP_ENABLED, // 會員功能開關\n        CACHE: env.CACHE_ENABLED, // 快取系統總開關\n    },\n\n    // 快取配置\n    CACHE: {\n        ENABLED: env.CACHE_ENABLED, // 快取系統總開關\n        CDN_ENABLED: env.CACHE_CDN_ENABLED, // CDN 快取協作開關\n        STRATEGY: env.I18N_CACHE_STRATEGY, // 國際化快取策略\n        DEFAULT_TTL: env.CACHE_DEFAULT_TTL, // 快取預設生存時間 (秒)\n    },\n\n    // 地理位置配置\n    GEO: {\n        DETECTION_STRATEGY: env.NEXT_PUBLIC_GEO_DETECTION_STRATEGY, // 地理位置偵測策略\n        REDIRECT_MODE: env.NEXT_PUBLIC_GEO_REDIRECT_MODE, // 地理重導模式\n        CDN_COUNTRY_HEADER: env.NEXT_PUBLIC_CDN_COUNTRY_HEADER, // CDN 國家標頭名稱\n        API_PROVIDER: env.GEO_API_PROVIDER, // 地理位置服務提供商\n        API_TIMEOUT: env.GEO_API_TIMEOUT, // 地理位置 API 超時 (毫秒)\n    },\n\n    // Mock 與測試配置\n    MOCK: {\n        USE_MOCK_API: env.USE_MOCK_API, // Mock API 開關\n        API_DELAY: env.MOCK_API_DELAY, // Mock API 延遲模擬 (毫秒)\n        ERROR_ENABLED: env.MOCK_ERROR_ENABLED, // 錯誤模擬開關\n        ERROR_RATE: env.MOCK_ERROR_RATE, // 錯誤模擬機率 (0.0-1.0)\n    },\n\n    // 開發與監控\n    DEV: {\n        API_LOGGING: env.API_LOGGING_ENABLED, // API 請求日誌記錄開關\n        PERFORMANCE_MONITORING: env.PERFORMANCE_MONITORING_ENABLED, // 效能監控開關\n        DEV_MODE: env.NEXT_PUBLIC_DEV_MODE_ENABLED, // 開發模式開關\n    },\n\n    // 語系配置\n    LOCALE: {\n        DEFAULT: env.DEFAULT_LANGUAGE, // 預設語系\n        CLIENT_DEFAULT: env.NEXT_PUBLIC_DEFAULT_LOCALE, // 前端預設語系\n        MULTI_LANGUAGE_ENABLED: env.NEXT_PUBLIC_MULTI_LANGUAGE_ENABLED, // 前端多語系功能開關\n        COUNTRY_SUBDOMAIN_MAP: env.COUNTRY_SUBDOMAIN_MAP, // 國家子網域對應表 (JSON)\n    }\n} as const;"],"names":[],"mappings":";;;AACA;;AAMO,MAAM,aAAa;IACtB,SAAS;IACT,cAAc,2GAAA,CAAA,MAAG,CAAC,YAAY;IAE9B,SAAS;IACT,KAAK;QACD,UAAU,2GAAA,CAAA,MAAG,CAAC,wBAAwB;QACtC,cAAc,2GAAA,CAAA,MAAG,CAAC,qBAAqB;QACvC,SAAS,2GAAA,CAAA,MAAG,CAAC,WAAW;QACxB,iBAAiB,2GAAA,CAAA,MAAG,CAAC,mBAAmB;QACxC,aAAa,2GAAA,CAAA,MAAG,CAAC,eAAe;IACpC;IAEA,OAAO;IACP,UAAU;QACN,sBAAsB,2GAAA,CAAA,MAAG,CAAC,4BAA4B;QACtD,eAAe,2GAAA,CAAA,MAAG,CAAC,qBAAqB;QACxC,gBAAgB,2GAAA,CAAA,MAAG,CAAC,cAAc;QAClC,gBAAgB,2GAAA,CAAA,MAAG,CAAC,sBAAsB;QAC1C,YAAY,2GAAA,CAAA,MAAG,CAAC,kBAAkB;QAClC,OAAO,2GAAA,CAAA,MAAG,CAAC,aAAa;IAC5B;IAEA,OAAO;IACP,OAAO;QACH,SAAS,2GAAA,CAAA,MAAG,CAAC,aAAa;QAC1B,aAAa,2GAAA,CAAA,MAAG,CAAC,iBAAiB;QAClC,UAAU,2GAAA,CAAA,MAAG,CAAC,mBAAmB;QACjC,aAAa,2GAAA,CAAA,MAAG,CAAC,iBAAiB;IACtC;IAEA,SAAS;IACT,KAAK;QACD,oBAAoB,2GAAA,CAAA,MAAG,CAAC,kCAAkC;QAC1D,eAAe,2GAAA,CAAA,MAAG,CAAC,6BAA6B;QAChD,oBAAoB,2GAAA,CAAA,MAAG,CAAC,8BAA8B;QACtD,cAAc,2GAAA,CAAA,MAAG,CAAC,gBAAgB;QAClC,aAAa,2GAAA,CAAA,MAAG,CAAC,eAAe;IACpC;IAEA,aAAa;IACb,MAAM;QACF,cAAc,2GAAA,CAAA,MAAG,CAAC,YAAY;QAC9B,WAAW,2GAAA,CAAA,MAAG,CAAC,cAAc;QAC7B,eAAe,2GAAA,CAAA,MAAG,CAAC,kBAAkB;QACrC,YAAY,2GAAA,CAAA,MAAG,CAAC,eAAe;IACnC;IAEA,QAAQ;IACR,KAAK;QACD,aAAa,2GAAA,CAAA,MAAG,CAAC,mBAAmB;QACpC,wBAAwB,2GAAA,CAAA,MAAG,CAAC,8BAA8B;QAC1D,UAAU,2GAAA,CAAA,MAAG,CAAC,4BAA4B;IAC9C;IAEA,OAAO;IACP,QAAQ;QACJ,SAAS,2GAAA,CAAA,MAAG,CAAC,gBAAgB;QAC7B,gBAAgB,2GAAA,CAAA,MAAG,CAAC,0BAA0B;QAC9C,wBAAwB,2GAAA,CAAA,MAAG,CAAC,kCAAkC;QAC9D,uBAAuB,2GAAA,CAAA,MAAG,CAAC,qBAAqB;IACpD;AACJ","debugId":null}},
    {"offset": {"line": 503, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/config/locale.config.ts"],"sourcesContent":["import { routing } from '@/i18n/routing';\nimport { env } from '@/env.mjs';\n\n/**\n * 語系統一配置\n * 整合所有語系相關的設定\n */\nexport const LOCALE_CONFIG = {\n    // 基本語系設定\n    SUPPORTED_LOCALES: routing.locales, // 支援的語系清單 (來自 routing)\n    DEFAULT_LOCALE: routing.defaultLocale || env.DEFAULT_LANGUAGE, // 預設語系\n    FALLBACK_LOCALE: 'zh-TW' as const, // 備援語系\n\n    // 前端語系配置\n    CLIENT_DEFAULT_LOCALE: env.NEXT_PUBLIC_DEFAULT_LOCALE, // 前端預設語系\n    MULTI_LANGUAGE_ENABLED: env.NEXT_PUBLIC_MULTI_LANGUAGE_ENABLED, // 前端多語系功能開關\n\n    // 國家與子網域映射\n    COUNTRY_SUBDOMAIN_MAP: JSON.parse(env.COUNTRY_SUBDOMAIN_MAP), // 國家子網域對應表\n\n    // 語系偵測設定\n    DETECTION: {\n        ENABLED: env.MULTI_LANGUAGE_ENABLED, // 多語系偵測功能開關\n        GEO_ENABLED: env.GEO_DETECTION_ENABLED, // IP 地理偵測功能開關\n        STRATEGY: env.NEXT_PUBLIC_GEO_DETECTION_STRATEGY, // 地理位置偵測策略\n        REDIRECT_MODE: env.NEXT_PUBLIC_GEO_REDIRECT_MODE, // 地理重導模式\n        CDN_HEADER: env.NEXT_PUBLIC_CDN_COUNTRY_HEADER, // CDN 國家標頭名稱\n        CACHE_TTL: 3600, // 語系偵測快取時間 (秒) - 1小時\n    },\n\n    // 快取配置\n    CACHE: {\n        STRATEGY: env.I18N_CACHE_STRATEGY, // 國際化快取策略\n        TTL: 3600, // 語系資料快取時間 (秒) - 1小時\n    },\n\n    // 語系驗證函數：檢查語系是否為支援的語系\n    isValidLocale: (locale: string): locale is typeof routing.locales[number] => {\n        return routing.locales.includes(locale as typeof routing.locales[number]);\n    },\n\n    // 取得國家對應的子網域：根據國家代碼取得對應的子網域\n    getSubdomainByCountry: (country: string): string | null => {\n        const map = JSON.parse(env.COUNTRY_SUBDOMAIN_MAP);\n        return map[country] || null;\n    },\n\n} as const;\n\nexport type SupportedLocale = typeof LOCALE_CONFIG.SUPPORTED_LOCALES[number];"],"names":[],"mappings":";;;AAAA;AACA;;;AAMO,MAAM,gBAAgB;IACzB,SAAS;IACT,mBAAmB,sHAAA,CAAA,UAAO,CAAC,OAAO;IAClC,gBAAgB,sHAAA,CAAA,UAAO,CAAC,aAAa,IAAI,2GAAA,CAAA,MAAG,CAAC,gBAAgB;IAC7D,iBAAiB;IAEjB,SAAS;IACT,uBAAuB,2GAAA,CAAA,MAAG,CAAC,0BAA0B;IACrD,wBAAwB,2GAAA,CAAA,MAAG,CAAC,kCAAkC;IAE9D,WAAW;IACX,uBAAuB,KAAK,KAAK,CAAC,2GAAA,CAAA,MAAG,CAAC,qBAAqB;IAE3D,SAAS;IACT,WAAW;QACP,SAAS,2GAAA,CAAA,MAAG,CAAC,sBAAsB;QACnC,aAAa,2GAAA,CAAA,MAAG,CAAC,qBAAqB;QACtC,UAAU,2GAAA,CAAA,MAAG,CAAC,kCAAkC;QAChD,eAAe,2GAAA,CAAA,MAAG,CAAC,6BAA6B;QAChD,YAAY,2GAAA,CAAA,MAAG,CAAC,8BAA8B;QAC9C,WAAW;IACf;IAEA,OAAO;IACP,OAAO;QACH,UAAU,2GAAA,CAAA,MAAG,CAAC,mBAAmB;QACjC,KAAK;IACT;IAEA,sBAAsB;IACtB,eAAe,CAAC;QACZ,OAAO,sHAAA,CAAA,UAAO,CAAC,OAAO,CAAC,QAAQ,CAAC;IACpC;IAEA,4BAA4B;IAC5B,uBAAuB,CAAC;QACpB,MAAM,MAAM,KAAK,KAAK,CAAC,2GAAA,CAAA,MAAG,CAAC,qBAAqB;QAChD,OAAO,GAAG,CAAC,QAAQ,IAAI;IAC3B;AAEJ","debugId":null}},
    {"offset": {"line": 548, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/config/api.config.ts"],"sourcesContent":["import { env } from '@/env.mjs';\n\n/**\n * API 相關配置\n */\nexport const API_CONFIG = {\n    // 基礎配置\n    BASE_URL: env.NEXT_PUBLIC_API_BASE_URL, // 前端 API 基礎網址\n    EXTERNAL_BASE_URL: env.EXTERNAL_API_BASE_URL,  // 外部後端 API\n    PROJECT_NAME: env.PROJECT_CODE, // 專案代碼名稱\n\n    // 超時設定\n    TIMEOUT: {\n        DEFAULT: env.API_TIMEOUT, // 一般 API 請求超時 (毫秒)\n        CONTENT: env.CONTENT_API_TIMEOUT, // 內容 API 請求超時 (毫秒)\n        GEO: env.GEO_API_TIMEOUT, // 地理位置 API 超時 (毫秒)\n    },\n\n    // 重試設定\n    RETRY: {\n        ATTEMPTS: 3, // 重試次數\n        DELAY: 1000, // 重試延遲 (毫秒)\n        EXPONENTIAL_BACKOFF: true, // 指數退避策略\n    },\n\n    // 模式設定\n    USE_MOCK: env.USE_MOCK_API, // Mock API 開關\n    LOGGING: env.API_LOGGING_ENABLED, // API 請求日誌記錄開關\n\n    // API 端點 - Mock 與正式版本統一管理\n    ENDPOINTS: {\n        // Mock API 端點 (Next.js API Routes)\n        MOCK: {\n            LANGUAGE: '/api/ssr/languages', // 語言資料端點\n            LOCALES: '/api/ssr/locales', // 地區設定端點\n            SYSTEM_MENUS: '/api/ssr/system-menus', // 系統選單端點\n            WEB_DATA: '/api/ssr/web-data', // 網站資料端點\n            DETAIL: '/api/ssr/detail', // 詳細資料端點\n        },\n\n        // 正式 API 端點 (外部後端)\n        EXTERNAL: {\n            LANGUAGE: '/api/v1/languages', // 語言資料端點\n            LOCALES: '/api/v1/locales', // 地區設定端點\n            SYSTEM_MENUS: '/api/v1/system-menus', // 系統選單端點\n            WEB_DATA: '/api/v1/web-data', // 網站資料端點\n            DETAIL: '/api/v1/detail', // 詳細資料端點\n        }\n    }\n} as const;"],"names":[],"mappings":";;;AAAA;;AAKO,MAAM,aAAa;IACtB,OAAO;IACP,UAAU,2GAAA,CAAA,MAAG,CAAC,wBAAwB;IACtC,mBAAmB,2GAAA,CAAA,MAAG,CAAC,qBAAqB;IAC5C,cAAc,2GAAA,CAAA,MAAG,CAAC,YAAY;IAE9B,OAAO;IACP,SAAS;QACL,SAAS,2GAAA,CAAA,MAAG,CAAC,WAAW;QACxB,SAAS,2GAAA,CAAA,MAAG,CAAC,mBAAmB;QAChC,KAAK,2GAAA,CAAA,MAAG,CAAC,eAAe;IAC5B;IAEA,OAAO;IACP,OAAO;QACH,UAAU;QACV,OAAO;QACP,qBAAqB;IACzB;IAEA,OAAO;IACP,UAAU,2GAAA,CAAA,MAAG,CAAC,YAAY;IAC1B,SAAS,2GAAA,CAAA,MAAG,CAAC,mBAAmB;IAEhC,0BAA0B;IAC1B,WAAW;QACP,mCAAmC;QACnC,MAAM;YACF,UAAU;YACV,SAAS;YACT,cAAc;YACd,UAAU;YACV,QAAQ;QACZ;QAEA,mBAAmB;QACnB,UAAU;YACN,UAAU;YACV,SAAS;YACT,cAAc;YACd,UAAU;YACV,QAAQ;QACZ;IACJ;AACJ","debugId":null}},
    {"offset": {"line": 597, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/config/cache.config.ts"],"sourcesContent":["/**\n * 快取系統配置檔案\n *\n * **主要職責**：\n * - 統一管理所有快取相關的配置設定\n * - 定義各種資料類型的快取策略（TTL、標籤、描述）\n * - 提供快取鍵值生成和標籤管理的輔助函數\n *\n * **配置內容**：\n * - **基礎設定**：快取開關、CDN協作、預設TTL、快取策略\n * - **Redis設定**：連線配置、鍵值前綴、分隔符號\n * - **資料類型**：8種快取資料類型的完整配置（語言、選單、頁面等）\n *\n * **提供功能**：\n * - 取得特定資料類型的快取配置、TTL、標籤\n * - 根據標籤查找相關的資料類型\n * - 生成統一格式的快取鍵值\n * - 快取配置摘要（用於除錯和監控）\n *\n * **設計特點**：\n * - 單一數據源：所有快取設定集中在 CACHE_DATA_TYPES\n * - 自動同步：TTL 和 TAGS 從主配置自動生成，避免不一致\n * - 類型安全：完整的 TypeScript 類型定義和推斷\n * - 易於維護：新增快取類型只需在一個地方定義\n */\n\nimport { env } from '@/env.mjs';\n\n/**\n * 快取資料類型定義 - 統一管理所有快取相關設定\n */\nconst CACHE_DATA_TYPES = {\n    LANGUAGES: {\n        ttl: 7200,  // 2小時\n        tags: ['languages', 'static-data'] as string[],\n        description: '語言資料快取'\n    },\n    LOCALES: {\n        ttl: 7200,  // 2小時\n        tags: ['locales', 'static-data'] as string[],\n        description: '地區設定快取'\n    },\n    MENUS: {\n        ttl: 3600,  // 1小時\n        tags: ['menus', 'navigation'] as string[],\n        description: '選單資料快取'\n    },\n    WEB_DATA: {\n        ttl: 3600,  // 1小時\n        tags: ['web-data', 'static-data'] as string[],\n        description: '網站資料快取'\n    },\n    PAGES: {\n        ttl: 1800,  // 30分鐘\n        tags: ['pages', 'content'] as string[],\n        description: '頁面內容快取'\n    },\n    GEO_DATA: {\n        ttl: 1800,  // 30分鐘\n        tags: ['geo-data', 'location'] as string[],\n        description: '地理位置資料快取'\n    },\n    USER_DATA: {\n        ttl: 600,   // 10分鐘\n        tags: ['user-data', 'dynamic-data'] as string[],\n        description: '使用者資料快取'\n    },\n    API_RESPONSE: {\n        ttl: env.CACHE_DEFAULT_TTL,\n        tags: ['api-response'] as string[],\n        description: 'API 回應快取'\n    },\n};\n\n/**\n * 快取相關配置\n */\nexport const CACHE_CONFIG = {\n    // 基礎配置\n    ENABLED: env.CACHE_ENABLED,\n    CDN_ENABLED: env.CACHE_CDN_ENABLED,\n    DEFAULT_TTL: env.CACHE_DEFAULT_TTL,\n    STRATEGY: env.I18N_CACHE_STRATEGY,\n\n    // Redis 配置\n    REDIS: {\n        URL: undefined,\n        PREFIX: 'minmax:',\n        KEY_SEPARATOR: ':',\n    },\n\n    // 從 CACHE_DATA_TYPES 自動生成 TTL 和 TAGS\n    TTL: {\n        LANGUAGES: CACHE_DATA_TYPES.LANGUAGES.ttl,\n        LOCALES: CACHE_DATA_TYPES.LOCALES.ttl,\n        MENUS: CACHE_DATA_TYPES.MENUS.ttl,\n        WEB_DATA: CACHE_DATA_TYPES.WEB_DATA.ttl,\n        PAGES: CACHE_DATA_TYPES.PAGES.ttl,\n        GEO_DATA: CACHE_DATA_TYPES.GEO_DATA.ttl,\n        USER_DATA: CACHE_DATA_TYPES.USER_DATA.ttl,\n        API_RESPONSE: CACHE_DATA_TYPES.API_RESPONSE.ttl,\n    },\n\n    TAGS: {\n        LANGUAGES: CACHE_DATA_TYPES.LANGUAGES.tags,\n        LOCALES: CACHE_DATA_TYPES.LOCALES.tags,\n        MENUS: CACHE_DATA_TYPES.MENUS.tags,\n        WEB_DATA: CACHE_DATA_TYPES.WEB_DATA.tags,\n        PAGES: CACHE_DATA_TYPES.PAGES.tags,\n        GEO_DATA: CACHE_DATA_TYPES.GEO_DATA.tags,\n        USER_DATA: CACHE_DATA_TYPES.USER_DATA.tags,\n        API_RESPONSE: CACHE_DATA_TYPES.API_RESPONSE.tags,\n    },\n\n    // 快取鍵值生成函數\n    generateKey: (type: CacheDataType, identifier: string, locale?: string): string => {\n        const parts = [CACHE_CONFIG.REDIS.PREFIX, type, identifier];\n        if (locale) parts.push(locale);\n        return parts.join(CACHE_CONFIG.REDIS.KEY_SEPARATOR);\n    },\n} as const;\n\n// 輔助函數\nexport type CacheDataType = keyof typeof CACHE_DATA_TYPES;\n\n/**\n * 取得指定資料類型的完整配置\n */\nexport function getCacheConfig(type: CacheDataType) {\n    return CACHE_DATA_TYPES[type];\n}\n\n/**\n * 取得指定資料類型的 TTL (毫秒)\n */\nexport function getCacheTTL(type: CacheDataType): number {\n    return CACHE_DATA_TYPES[type].ttl * 1000;\n}\n\n/**\n * 取得指定資料類型的標籤\n */\nexport function getCacheTags(type: CacheDataType): string[] {\n    return CACHE_DATA_TYPES[type].tags;\n}\n\n/**\n * 根據標籤找到相關的資料類型\n */\nexport function getDataTypesByTag(tag: string): CacheDataType[] {\n    return Object.entries(CACHE_DATA_TYPES)\n        .filter(([_, config]) => config.tags.includes(tag))\n        .map(([key]) => key as CacheDataType);\n}\n\n/**\n * 取得所有可用的標籤\n */\nexport function getAllCacheTags(): string[] {\n    const allTags = Object.values(CACHE_DATA_TYPES).flatMap(config => config.tags);\n    return [...new Set(allTags)];\n}\n\n/**\n * 取得快取配置摘要 (用於除錯)\n */\nexport function getCacheConfigSummary() {\n    return Object.entries(CACHE_DATA_TYPES).map(([type, config]) => ({\n        type,\n        ttl: `${config.ttl}s (${config.ttl / 60}min)`,\n        tags: config.tags.join(', '),\n        description: config.description\n    }));\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 773, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/config/index.ts"],"sourcesContent":["/**\n * 統一配置導出\n * 整合所有配置相關的設定\n */\n\n// 導出環境變數配置\nexport { env } from '../env.mjs';\n\n// 導出應用程式配置\nexport * from './app.config';\n\n// 導出語系配置\nexport * from './locale.config';\n\n// 導出 API 配置\nexport * from './api.config';\n\n// 導出快取配置\nexport * from './cache.config';"],"names":[],"mappings":"AAAA;;;CAGC,GAED,WAAW;;AACX;AAEA,WAAW;AACX;AAEA,SAAS;AACT;AAEA,YAAY;AACZ;AAEA,SAAS;AACT","debugId":null}},
    {"offset": {"line": 807, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/services/base/api-service.base.ts"],"sourcesContent":["import { API_CONFIG } from '@/config';\n\n/**\n * API 服務基底類別\n * 提供通用的 API 請求處理邏輯\n */\nexport abstract class BaseApiService {\n    protected readonly serviceName: string;\n\n    constructor(serviceName: string) {\n        this.serviceName = serviceName;\n    }\n\n    /**\n     * 通用的 API 請求方法\n     * @param endpoint 端點配置 { mock: string, external: string }\n     * @param options 額外的 fetch 選項\n     * @returns Promise<T>\n     */\n    protected async apiRequest<T>(\n        endpoint: { mock: string; external: string },\n        options: RequestInit = {}\n    ): Promise<T> {\n        const url = this.buildApiUrl(endpoint);\n\n        try {\n            this.logApiCall(url);\n\n            const response = await fetch(url, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    ...options.headers,\n                },\n                // 只有正式 API 需要超時設定\n                ...(API_CONFIG.USE_MOCK ? {} : {\n                    signal: AbortSignal.timeout(API_CONFIG.TIMEOUT.DEFAULT)\n                }),\n                ...options,\n            });\n\n            if (!response.ok) {\n                throw new Error(`${this.serviceName} API 請求失敗: ${response.status} ${response.statusText}`);\n            }\n\n            const apiResponse = await response.json();\n\n            // 處理 API 回應格式 { code, message, data }\n            const data = apiResponse.data || apiResponse; // 兼容不同的回應格式\n\n            this.logSuccess(data);\n\n            return data;\n        } catch (error) {\n            this.logError(error);\n            throw error;\n        }\n    }\n\n    /**\n     * 根據環境變數建構 API 網址\n     */\n    private buildApiUrl(endpoint: { mock: string; external: string }): string {\n        if (API_CONFIG.USE_MOCK) {\n            // Mock API - 使用內部 Next.js API Routes\n            return `${API_CONFIG.BASE_URL}${endpoint.mock}`;\n        } else {\n            // 正式 API - 使用外部後端 API\n            return `${API_CONFIG.EXTERNAL_BASE_URL}${endpoint.external}`;\n        }\n    }\n\n    /**\n     * 記錄 API 呼叫日誌\n     */\n    protected logApiCall(url: string): void {\n        console.log(`🌐 ${this.serviceName} API 呼叫: ${url} (Mock: ${API_CONFIG.USE_MOCK})`);\n    }\n\n    /**\n     * 記錄成功日誌 - 子類別可以覆寫自定義格式\n     */\n    protected logSuccess(data: any): void {\n        if (API_CONFIG.LOGGING) {\n            console.log(`✅ ${this.serviceName}資料載入成功`);\n        }\n    }\n\n    /**\n     * 記錄錯誤日誌\n     */\n    protected logError(error: any): void {\n        console.error(`❌ ${this.serviceName} API 呼叫失敗:`, error);\n    }\n}"],"names":[],"mappings":";;;AAAA;AAAA;;AAMO,MAAe;IACC,YAAoB;IAEvC,YAAY,WAAmB,CAAE;QAC7B,IAAI,CAAC,WAAW,GAAG;IACvB;IAEA;;;;;KAKC,GACD,MAAgB,WACZ,QAA4C,EAC5C,UAAuB,CAAC,CAAC,EACf;QACV,MAAM,MAAM,IAAI,CAAC,WAAW,CAAC;QAE7B,IAAI;YACA,IAAI,CAAC,UAAU,CAAC;YAEhB,MAAM,WAAW,MAAM,MAAM,KAAK;gBAC9B,QAAQ;gBACR,SAAS;oBACL,gBAAgB;oBAChB,GAAG,QAAQ,OAAO;gBACtB;gBACA,kBAAkB;gBAClB,GAAI,8HAAA,CAAA,aAAU,CAAC,QAAQ,GAAG,CAAC,IAAI;oBAC3B,QAAQ,YAAY,OAAO,CAAC,8HAAA,CAAA,aAAU,CAAC,OAAO,CAAC,OAAO;gBAC1D,CAAC;gBACD,GAAG,OAAO;YACd;YAEA,IAAI,CAAC,SAAS,EAAE,EAAE;gBACd,MAAM,IAAI,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,SAAS,MAAM,CAAC,CAAC,EAAE,SAAS,UAAU,EAAE;YAC7F;YAEA,MAAM,cAAc,MAAM,SAAS,IAAI;YAEvC,sCAAsC;YACtC,MAAM,OAAO,YAAY,IAAI,IAAI,aAAa,YAAY;YAE1D,IAAI,CAAC,UAAU,CAAC;YAEhB,OAAO;QACX,EAAE,OAAO,OAAO;YACZ,IAAI,CAAC,QAAQ,CAAC;YACd,MAAM;QACV;IACJ;IAEA;;KAEC,GACD,AAAQ,YAAY,QAA4C,EAAU;QACtE,IAAI,8HAAA,CAAA,aAAU,CAAC,QAAQ,EAAE;YACrB,qCAAqC;YACrC,OAAO,GAAG,8HAAA,CAAA,aAAU,CAAC,QAAQ,GAAG,SAAS,IAAI,EAAE;QACnD,OAAO;YACH,sBAAsB;YACtB,OAAO,GAAG,8HAAA,CAAA,aAAU,CAAC,iBAAiB,GAAG,SAAS,QAAQ,EAAE;QAChE;IACJ;IAEA;;KAEC,GACD,AAAU,WAAW,GAAW,EAAQ;QACpC,QAAQ,GAAG,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,IAAI,QAAQ,EAAE,8HAAA,CAAA,aAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;IACtF;IAEA;;KAEC,GACD,AAAU,WAAW,IAAS,EAAQ;QAClC,IAAI,8HAAA,CAAA,aAAU,CAAC,OAAO,EAAE;YACpB,QAAQ,GAAG,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;QAC7C;IACJ;IAEA;;KAEC,GACD,AAAU,SAAS,KAAU,EAAQ;QACjC,QAAQ,KAAK,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,EAAE;IACrD;AACJ","debugId":null}},
    {"offset": {"line": 885, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/services/language.service.ts"],"sourcesContent":["import { API_CONFIG } from '@/config';\nimport type { Language } from '@/types';\nimport { BaseApiService } from './base/api-service.base';\n\n/**\n * 支援語系服務 - 抽象化 API 呼叫\n * 根據環境變數自動切換 Mock 或正式 API\n */\nclass LanguageService extends BaseApiService {\n    constructor() {\n        super('支援語系');\n    }\n\n    /**\n     * 取得支援的語系清單\n     * @returns Promise<Language[]>\n     */\n    async getLanguages(): Promise<Language[]> {\n        const endpoint = {\n            mock: API_CONFIG.ENDPOINTS.MOCK.LANGUAGE,\n            external: API_CONFIG.ENDPOINTS.EXTERNAL.LANGUAGE\n        };\n\n        return this.apiRequest<Language[]>(endpoint);\n    }\n\n    /**\n     * 覆寫成功日誌，顯示語系數量\n     */\n    protected logSuccess(data: Language[]): void {\n        if (API_CONFIG.LOGGING) {\n            console.log(`✅ ${this.serviceName}資料載入成功:`, data.length, '個語系');\n        }\n    }\n}\n\n// 匯出單例實例\nexport const languageService = new LanguageService();"],"names":[],"mappings":";;;AAAA;AAAA;AAEA;;;AAEA;;;CAGC,GACD,MAAM,wBAAwB,iJAAA,CAAA,iBAAc;IACxC,aAAc;QACV,KAAK,CAAC;IACV;IAEA;;;KAGC,GACD,MAAM,eAAoC;QACtC,MAAM,WAAW;YACb,MAAM,8HAAA,CAAA,aAAU,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ;YACxC,UAAU,8HAAA,CAAA,aAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ;QACpD;QAEA,OAAO,IAAI,CAAC,UAAU,CAAa;IACvC;IAEA;;KAEC,GACD,AAAU,WAAW,IAAgB,EAAQ;QACzC,IAAI,8HAAA,CAAA,aAAU,CAAC,OAAO,EAAE;YACpB,QAAQ,GAAG,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE,KAAK,MAAM,EAAE;QAC7D;IACJ;AACJ;AAGO,MAAM,kBAAkB,IAAI","debugId":null}},
    {"offset": {"line": 923, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/services/i18n-integration.service.ts"],"sourcesContent":["import { languageService } from './language.service';\nimport { Language } from '@/types';\nimport { routing } from '@/i18n/routing';\nimport { LOCALE_CONFIG } from '@/config';\n\nexport class I18nIntegrationService {\n    private static cachedLanguages: Language[] | null = null;\n    private static lastFetchTime: number = 0;\n\n    /**\n     * 取得動態語系清單並快取\n     */\n    static async getLanguages(): Promise<Language[]> {\n        const now = Date.now();\n        const cacheExpiry = LOCALE_CONFIG.CACHE.TTL * 1000; // 轉為毫秒\n\n        // 檢查快取是否有效\n        if (this.cachedLanguages && (now - this.lastFetchTime) < cacheExpiry) {\n            return this.cachedLanguages;\n        }\n\n        try {\n            const languages = await languageService.getLanguages();\n            this.cachedLanguages = languages;\n            this.lastFetchTime = now;\n            return languages;\n        } catch (error) {\n            console.warn('📦 無法載入動態語系，使用靜態配置', error);\n            // 降級處理：返回靜態配置的語系\n            return this.getStaticFallbackLanguages();\n        }\n    }\n\n    /**\n     * 將 Language[] 轉換為 next-intl 需要的 locales 陣列\n     */\n    static async getSupportedLocales(): Promise<string[]> {\n        const languages = await this.getLanguages();\n        return languages.map(lang => lang.id);\n    }\n\n    /**\n     * 取得預設語系\n     */\n    static async getDefaultLocale(): Promise<string> {\n        const languages = await I18nIntegrationService.getLanguages();\n        const defaultLang = languages.find(lang => lang.default);\n        return defaultLang?.id || LOCALE_CONFIG.DEFAULT_LOCALE;\n    }\n\n    /**\n     * 靜態備援語系資料\n     */\n    /**\n     * 靜態備援語系資料\n     */\n    private static getStaticFallbackLanguages(): Language[] {\n        return routing.locales.map((locale, index) => ({\n            id: locale,\n            title: locale.toUpperCase(),\n            native: locale.toUpperCase(),\n            icon: '🌐',\n            default: locale === routing.defaultLocale\n        }));\n    }\n}"],"names":[],"mappings":";;;AAAA;AAEA;AACA;AAAA;;;;AAEO,MAAM;IACT,OAAe,kBAAqC,KAAK;IACzD,OAAe,gBAAwB,EAAE;IAEzC;;KAEC,GACD,aAAa,eAAoC;QAC7C,MAAM,MAAM,KAAK,GAAG;QACpB,MAAM,cAAc,iIAAA,CAAA,gBAAa,CAAC,KAAK,CAAC,GAAG,GAAG,MAAM,OAAO;QAE3D,WAAW;QACX,IAAI,IAAI,CAAC,eAAe,IAAI,AAAC,MAAM,IAAI,CAAC,aAAa,GAAI,aAAa;YAClE,OAAO,IAAI,CAAC,eAAe;QAC/B;QAEA,IAAI;YACA,MAAM,YAAY,MAAM,sIAAA,CAAA,kBAAe,CAAC,YAAY;YACpD,IAAI,CAAC,eAAe,GAAG;YACvB,IAAI,CAAC,aAAa,GAAG;YACrB,OAAO;QACX,EAAE,OAAO,OAAO;YACZ,QAAQ,IAAI,CAAC,sBAAsB;YACnC,iBAAiB;YACjB,OAAO,IAAI,CAAC,0BAA0B;QAC1C;IACJ;IAEA;;KAEC,GACD,aAAa,sBAAyC;QAClD,MAAM,YAAY,MAAM,IAAI,CAAC,YAAY;QACzC,OAAO,UAAU,GAAG,CAAC,CAAA,OAAQ,KAAK,EAAE;IACxC;IAEA;;KAEC,GACD,aAAa,mBAAoC;QAC7C,MAAM,YAAY,MAAM,uBAAuB,YAAY;QAC3D,MAAM,cAAc,UAAU,IAAI,CAAC,CAAA,OAAQ,KAAK,OAAO;QACvD,OAAO,aAAa,MAAM,iIAAA,CAAA,gBAAa,CAAC,cAAc;IAC1D;IAEA;;KAEC,GACD;;KAEC,GACD,OAAe,6BAAyC;QACpD,OAAO,sHAAA,CAAA,UAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,QAAQ,QAAU,CAAC;gBAC3C,IAAI;gBACJ,OAAO,OAAO,WAAW;gBACzB,QAAQ,OAAO,WAAW;gBAC1B,MAAM;gBACN,SAAS,WAAW,sHAAA,CAAA,UAAO,CAAC,aAAa;YAC7C,CAAC;IACL;AACJ","debugId":null}},
    {"offset": {"line": 987, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/hooks/useLanguageSwitcher.ts"],"sourcesContent":["'use client';\n\nimport { usePathname, useSearchParams } from 'next/navigation';\nimport { useLocale } from 'next-intl';\nimport { useState, useEffect } from 'react';\nimport { I18nIntegrationService } from '@/services/i18n-integration.service';\nimport type { Language } from '@/types';\n\n/**\n * 語言切換器相關資料的自定義 Hook\n *\n * 提供語言切換器組件所需的所有資料：\n * - 當前路徑\n * - 當前語系\n * - URL 查詢參數\n * - 可用語言列表\n * - 載入狀態\n *\n * @returns 語言切換器所需的資料和狀態\n */\nexport function useLanguageSwitcher() {\n    // 取得當前路徑，用於生成語言切換連結\n    const pathname = usePathname() || '/';\n    // 取得當前語系\n    const currentLocale = useLocale();\n    // 取得 URL 查詢參數，用於保持切換語言時的參數\n    const searchParams = useSearchParams();\n\n    // 語言列表狀態\n    const [languages, setLanguages] = useState<Language[]>([]);\n    // 載入狀態\n    const [isLoading, setIsLoading] = useState(true);\n    // 錯誤狀態\n    const [error, setError] = useState<string | null>(null);\n\n    // 載入語言列表\n    useEffect(() => {\n        let isMounted = true;\n\n        const loadLanguages = async () => {\n            try {\n                setIsLoading(true);\n                setError(null);\n                const languageList = await I18nIntegrationService.getLanguages();\n\n                if (isMounted) {\n                    setLanguages(languageList);\n                }\n            } catch (err) {\n                if (isMounted) {\n                    setError(err instanceof Error ? err.message : '載入語言列表失敗');\n                    console.error('Failed to load languages:', err);\n                }\n            } finally {\n                if (isMounted) {\n                    setIsLoading(false);\n                }\n            }\n        };\n\n        loadLanguages();\n\n        // 清理函數，防止組件卸載後設置狀態\n        return () => {\n            isMounted = false;\n        };\n    }, []);\n\n    return {\n        /** 當前路徑 */\n        pathname,\n        /** 當前語系 ID */\n        currentLocale,\n        /** URL 查詢參數 */\n        searchParams,\n        /** 可用語言列表 */\n        languages,\n        /** 是否正在載入 */\n        isLoading,\n        /** 錯誤訊息 */\n        error,\n    };\n}"],"names":[],"mappings":";;;AAEA;AACA;AACA;AACA;AALA;;;;;AAoBO,SAAS;IACZ,oBAAoB;IACpB,MAAM,WAAW,CAAA,GAAA,kIAAA,CAAA,cAAW,AAAD,OAAO;IAClC,SAAS;IACT,MAAM,gBAAgB,CAAA,GAAA,kKAAA,CAAA,YAAS,AAAD;IAC9B,2BAA2B;IAC3B,MAAM,eAAe,CAAA,GAAA,kIAAA,CAAA,kBAAe,AAAD;IAEnC,SAAS;IACT,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAc,EAAE;IACzD,OAAO;IACP,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,OAAO;IACP,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAElD,SAAS;IACT,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACN,IAAI,YAAY;QAEhB,MAAM,gBAAgB;YAClB,IAAI;gBACA,aAAa;gBACb,SAAS;gBACT,MAAM,eAAe,MAAM,iJAAA,CAAA,yBAAsB,CAAC,YAAY;gBAE9D,IAAI,WAAW;oBACX,aAAa;gBACjB;YACJ,EAAE,OAAO,KAAK;gBACV,IAAI,WAAW;oBACX,SAAS,eAAe,QAAQ,IAAI,OAAO,GAAG;oBAC9C,QAAQ,KAAK,CAAC,6BAA6B;gBAC/C;YACJ,SAAU;gBACN,IAAI,WAAW;oBACX,aAAa;gBACjB;YACJ;QACJ;QAEA;QAEA,mBAAmB;QACnB,OAAO;YACH,YAAY;QAChB;IACJ,GAAG,EAAE;IAEL,OAAO;QACH,SAAS,GACT;QACA,YAAY,GACZ;QACA,aAAa,GACb;QACA,WAAW,GACX;QACA,WAAW,GACX;QACA,SAAS,GACT;IACJ;AACJ","debugId":null}},
    {"offset": {"line": 1053, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/hooks/index.ts"],"sourcesContent":["export { useLanguageSwitcher } from './useLanguageSwitcher';"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 1067, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/components/LanguageSwitcherContainer.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\nimport { useLanguageSwitcher } from '../hooks';\nimport LanguageSwitcher from './LanguageSwitcher';\nimport type { Language } from '@/types';\n\n/**\n * 語言切換器容器組件\n *\n * 自動處理資料載入和狀態管理的語言切換器包裝組件\n */\ntype LanguageSwitcherContainerProps = {\n    /** 自定義 CSS 類名 */\n    className?: string;\n    /** 是否顯示語言標籤文字，預設為 true */\n    showLabels?: boolean;\n    /** 顯示變體：下拉選單或內聯列表，預設為 'inline' */\n    variant?: 'dropdown' | 'inline';\n    /** 載入中的顯示內容 */\n    loadingComponent?: React.ReactNode;\n    /** 錯誤時的顯示內容 */\n    errorComponent?: React.ReactNode;\n    /** 可選的語言資料，如果提供則不會重新載入 */\n    languages?: Language[];\n};\n\nexport default function LanguageSwitcherContainer({\n                                                      className,\n                                                      showLabels = true,\n                                                      variant = 'inline',\n                                                      loadingComponent,\n                                                      errorComponent,\n                                                      languages: providedLanguages,\n                                                  }: LanguageSwitcherContainerProps) {\n    const {\n        pathname,\n        currentLocale,\n        searchParams,\n        languages: hookLanguages,\n        isLoading,\n        error,\n    } = useLanguageSwitcher();\n\n    // 如果有提供語言資料，就使用提供的，否則使用 hook 載入的\n    const languages = providedLanguages || hookLanguages;\n    const shouldShowLoading = !providedLanguages && isLoading;\n    const shouldShowError = !providedLanguages && error;\n\n    // 載入中狀態\n    if (shouldShowLoading) {\n        return loadingComponent || (\n            <div className={className}>\n                <span className=\"text-gray-500 text-sm\">載入語言選項...</span>\n            </div>\n        );\n    }\n\n    // 錯誤狀態\n    if (shouldShowError) {\n        return errorComponent || (\n            <div className={className}>\n                <span className=\"text-red-500 text-sm\">⚠️ {error}</span>\n            </div>\n        );\n    }\n\n    // 正常渲染\n    return (\n        <LanguageSwitcher\n            className={className}\n            languages={languages}\n            currentLocale={currentLocale}\n            pathname={pathname}\n            searchParams={searchParams}\n            showLabels={showLabels}\n            variant={variant}\n        />\n    );\n}"],"names":[],"mappings":";;;;AAGA;AAAA;AACA;AAJA;;;;AA2Be,SAAS,0BAA0B,EACI,SAAS,EACT,aAAa,IAAI,EACjB,UAAU,QAAQ,EAClB,gBAAgB,EAChB,cAAc,EACd,WAAW,iBAAiB,EACC;IAC/E,MAAM,EACF,QAAQ,EACR,aAAa,EACb,YAAY,EACZ,WAAW,aAAa,EACxB,SAAS,EACT,KAAK,EACR,GAAG,CAAA,GAAA,2JAAA,CAAA,sBAAmB,AAAD;IAEtB,iCAAiC;IACjC,MAAM,YAAY,qBAAqB;IACvC,MAAM,oBAAoB,CAAC,qBAAqB;IAChD,MAAM,kBAAkB,CAAC,qBAAqB;IAE9C,QAAQ;IACR,IAAI,mBAAmB;QACnB,OAAO,kCACH,8OAAC;YAAI,WAAW;sBACZ,cAAA,8OAAC;gBAAK,WAAU;0BAAwB;;;;;;;;;;;IAGpD;IAEA,OAAO;IACP,IAAI,iBAAiB;QACjB,OAAO,gCACH,8OAAC;YAAI,WAAW;sBACZ,cAAA,8OAAC;gBAAK,WAAU;;oBAAuB;oBAAI;;;;;;;;;;;;IAGvD;IAEA,OAAO;IACP,qBACI,8OAAC,8JAAA,CAAA,UAAgB;QACb,WAAW;QACX,WAAW;QACX,eAAe;QACf,UAAU;QACV,cAAc;QACd,YAAY;QACZ,SAAS;;;;;;AAGrB","debugId":null}}]
}