{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/i18n/routing.ts"],"sourcesContent":["import { defineRouting } from 'next-intl/routing';\n\nexport const routing = defineRouting({\n  // 支援的語系 - 這個會被 API 動態覆蓋\n  locales: ['zh-TW', 'zh-CN', 'en', 'ja'],\n  \n  // 預設語系 - 這個也會被 API 動態覆蓋\n  defaultLocale: 'zh-TW',\n  \n  // 預設語系不加前綴\n  localePrefix: 'as-needed',\n  \n  // 啟用語系檢測\n  localeDetection: true\n});\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,UAAU,CAAA,GAAA,kOAAA,CAAA,gBAAa,AAAD,EAAE;IACnC,wBAAwB;IACxB,SAAS;QAAC;QAAS;QAAS;QAAM;KAAK;IAEvC,wBAAwB;IACxB,eAAe;IAEf,WAAW;IACX,cAAc;IAEd,SAAS;IACT,iBAAiB;AACnB","debugId":null}},
    {"offset": {"line": 53, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/i18n/navigation.ts"],"sourcesContent":["import {createNavigation} from 'next-intl/navigation';\nimport {routing} from './routing';\n\n//這是在 Next.js 導航 API 基礎上，考量到路由設定的輕量級封裝。\nexport const {Link, redirect, usePathname, useRouter, getPathname} =\n    createNavigation(routing);\n"],"names":[],"mappings":";;;;;;;AAAA;AACA;;;AAGO,MAAM,EAAC,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,EAAC,GAC9D,CAAA,GAAA,8PAAA,CAAA,mBAAgB,AAAD,EAAE,sHAAA,CAAA,UAAO","debugId":null}},
    {"offset": {"line": 69, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/components/LanguageSwitcher.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\nimport { usePathname, useSearchParams } from 'next/navigation';\nimport { useLocale } from 'next-intl'; // 取得目前頁面的實際語系（SSR/CSR 同步）\nimport { notFound } from 'next/navigation'; // Import notFound function\nimport type { Language } from '@/types'; // 單一來源的型別，避免在元件內重複定義\nimport { Link } from '@/i18n/navigation'; // 建議使用 i18n 封裝過的 Link（支援 locale 屬性）\nimport { routing } from '@/i18n/routing';\n\n/**\n * 語系切換元件\n *\n * 設計原則：\n * - 不持有任何資料狀態，只做「呈現與導頁」，資料由父層以 props 傳入（SSR 預取）\n * - 使用 Link 的 locale 屬性來控制語系前綴，避免手動拼接 /zh-TW/... 導致重複\n * - 高亮判斷以「目前頁面語系」為準，而不是語言資料的 default 欄位\n */\ntype LanguageSwitcherProps = {\n    className?: string;\n    languages: Language[]; // 由父層傳入的語系列表（SSR 預取）\n};\n\nexport default function LanguageSwitcher({ className, languages }: LanguageSwitcherProps) {\n    // 目前所在的 pathname（含或不含語系前綴）\n    const pathname = usePathname() || '/';\n\n    // 目前頁面的實際語系（由 next-intl 提供）\n    const currentLocale = useLocale();\n\n    // 查詢字串：保留目前的查詢參數，切換語系時一併帶上\n    const searchParams = useSearchParams();\n\n    // 系統支援的語系集合（用於判斷當前 pathname 是否已含語系前綴）\n    const supported = React.useMemo(() => new Set(routing.locales), []);\n\n    // 判斷路徑是否已包含語系前綴（例如 /en/about 的 en）\n    const hasLocalePrefix = React.useMemo(() => {\n        const parts = pathname.split('/').filter(Boolean);\n        const first = parts[0];\n        return !!first && supported.has(first as (typeof routing.locales)[number]);\n    }, [pathname, supported]);\n\n    // 取得「不含語系前綴」的基底路徑：\n    // - 若目前路由為 /en/about → 基底應為 /about\n    // - 若目前路由為 /about（沒有語系前綴）→ 基底維持 /about\n    const basePath = React.useMemo(() => {\n        const parts = pathname.split('/').filter(Boolean);\n        const withoutLocale = hasLocalePrefix ? parts.slice(1) : parts;\n        const path = `/${withoutLocale.join('/')}`;\n        return path === '' ? '/' : path;\n    }, [pathname, hasLocalePrefix]);\n\n    // 把現有查詢參數保留到新連結上\n    const qsString = searchParams?.toString();\n    const hrefWithQuery = React.useCallback(\n        (path: string) => (qsString ? `${path}?${qsString}` : path),\n        [qsString]\n    );\n\n    // 若無語系列表，回傳 404\n    if (!languages || languages.length === 0) {\n        notFound();\n    }\n\n    return (\n        <nav className={className} aria-label=\"Language switcher\">\n            <ul className=\"flex flex-wrap items-center gap-2\">\n                {languages.map((lang) => {\n                    // 顯示用標籤（native 優先，否則用 title）\n                    const label = lang.native || lang.title;\n\n                    // 切換語系後的目標路徑：由 Link 的 locale 屬性加入語系前綴\n                    const href = hrefWithQuery(basePath);\n\n                    // 以「目前頁面語系」判斷是否高亮（而非依據資料的 default 欄位）\n                    const active = currentLocale === lang.id;\n\n                    return (\n                        <li key={lang.id}>\n                            <Link\n                                href={href}\n                                // 讓 Link 根據指定的 locale 自動處理語系前綴\n                                locale={lang.id as (typeof routing.locales)[number]}\n                                // 視覺樣式：目前語系高亮；預設語系僅顯示 default 標籤，不參與高亮\n                                className={\n                                    'inline-flex items-center gap-2 rounded px-3 py-1 text-sm ' +\n                                    (active ? 'bg-blue-600 text-white' : 'bg-gray-100 text-gray-800 hover:bg-gray-200')\n                                }\n                                aria-current={active ? 'true' : undefined}\n                                title={lang.title}\n                            >\n                                {/* 可選：顯示旗幟/圖示的樣式類名 */}\n                                {lang.icon ? (\n                                    <span aria-hidden=\"true\" className={`${lang.icon} inline-block h-4 w-4`} />\n                                ) : null}\n\n                                <span>{label}</span>\n\n                                {/* 僅作為資料上的預設註記，非高亮依據 */}\n                                {lang.default ? (\n                                    <span className=\"ml-1 rounded bg-blue-500/20 px-1.5 py-0.5 text-[10px]\">default</span>\n                                ) : null}\n                            </Link>\n                        </li>\n                    );\n                })}\n            </ul>\n        </nav>\n    );\n}"],"names":[],"mappings":";;;;AAEA;AACA;AACA,0RAAuC,0BAA0B;AAGjE,oNAA0C,oCAAoC;AAC9E;AARA;;;;;;;;AAuBe,SAAS,iBAAiB,EAAE,SAAS,EAAE,SAAS,EAAyB;IACpF,2BAA2B;IAC3B,MAAM,WAAW,CAAA,GAAA,kIAAA,CAAA,cAAW,AAAD,OAAO;IAElC,4BAA4B;IAC5B,MAAM,gBAAgB,CAAA,GAAA,kKAAA,CAAA,YAAS,AAAD;IAE9B,2BAA2B;IAC3B,MAAM,eAAe,CAAA,GAAA,kIAAA,CAAA,kBAAe,AAAD;IAEnC,sCAAsC;IACtC,MAAM,YAAY,qMAAA,CAAA,UAAK,CAAC,OAAO,CAAC,IAAM,IAAI,IAAI,sHAAA,CAAA,UAAO,CAAC,OAAO,GAAG,EAAE;IAElE,mCAAmC;IACnC,MAAM,kBAAkB,qMAAA,CAAA,UAAK,CAAC,OAAO,CAAC;QAClC,MAAM,QAAQ,SAAS,KAAK,CAAC,KAAK,MAAM,CAAC;QACzC,MAAM,QAAQ,KAAK,CAAC,EAAE;QACtB,OAAO,CAAC,CAAC,SAAS,UAAU,GAAG,CAAC;IACpC,GAAG;QAAC;QAAU;KAAU;IAExB,mBAAmB;IACnB,mCAAmC;IACnC,uCAAuC;IACvC,MAAM,WAAW,qMAAA,CAAA,UAAK,CAAC,OAAO,CAAC;QAC3B,MAAM,QAAQ,SAAS,KAAK,CAAC,KAAK,MAAM,CAAC;QACzC,MAAM,gBAAgB,kBAAkB,MAAM,KAAK,CAAC,KAAK;QACzD,MAAM,OAAO,CAAC,CAAC,EAAE,cAAc,IAAI,CAAC,MAAM;QAC1C,OAAO,SAAS,KAAK,MAAM;IAC/B,GAAG;QAAC;QAAU;KAAgB;IAE9B,iBAAiB;IACjB,MAAM,WAAW,cAAc;IAC/B,MAAM,gBAAgB,qMAAA,CAAA,UAAK,CAAC,WAAW,CACnC,CAAC,OAAkB,WAAW,GAAG,KAAK,CAAC,EAAE,UAAU,GAAG,MACtD;QAAC;KAAS;IAGd,gBAAgB;IAChB,IAAI,CAAC,aAAa,UAAU,MAAM,KAAK,GAAG;QACtC,CAAA,GAAA,kIAAA,CAAA,WAAQ,AAAD;IACX;IAEA,qBACI,8OAAC;QAAI,WAAW;QAAW,cAAW;kBAClC,cAAA,8OAAC;YAAG,WAAU;sBACT,UAAU,GAAG,CAAC,CAAC;gBACZ,6BAA6B;gBAC7B,MAAM,QAAQ,KAAK,MAAM,IAAI,KAAK,KAAK;gBAEvC,sCAAsC;gBACtC,MAAM,OAAO,cAAc;gBAE3B,sCAAsC;gBACtC,MAAM,SAAS,kBAAkB,KAAK,EAAE;gBAExC,qBACI,8OAAC;8BACG,cAAA,8OAAC,yHAAA,CAAA,OAAI;wBACD,MAAM;wBACN,+BAA+B;wBAC/B,QAAQ,KAAK,EAAE;wBACf,uCAAuC;wBACvC,WACI,8DACA,CAAC,SAAS,2BAA2B,6CAA6C;wBAEtF,gBAAc,SAAS,SAAS;wBAChC,OAAO,KAAK,KAAK;;4BAGhB,KAAK,IAAI,iBACN,8OAAC;gCAAK,eAAY;gCAAO,WAAW,GAAG,KAAK,IAAI,CAAC,qBAAqB,CAAC;;;;;uCACvE;0CAEJ,8OAAC;0CAAM;;;;;;4BAGN,KAAK,OAAO,iBACT,8OAAC;gCAAK,WAAU;0CAAwD;;;;;uCACxE;;;;;;;mBAvBH,KAAK,EAAE;;;;;YA2BxB;;;;;;;;;;;AAIhB","debugId":null}}]
}