{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 22, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/i18n/request.ts"],"sourcesContent":["import {getRequestConfig} from 'next-intl/server';\nimport {cookies} from 'next/headers';\nimport {routing} from './routing';\nimport {I18nIntegrationService} from '@/services/i18n-integration.service';\nimport {LOCALE_CONFIG} from '@/config';\n\nexport default getRequestConfig(async ({requestLocale}) => {\n    const requested = await requestLocale;\n\n    // 1) 取得動態有效語系與動態預設語系（內含快取）\n    let supportedLocales: string[] = [];\n    let dynamicDefaultLocale: string = routing.defaultLocale;\n\n    try {\n        supportedLocales = await I18nIntegrationService.getSupportedLocales();\n        dynamicDefaultLocale = await I18nIntegrationService.getDefaultLocale();\n    } catch (e) {\n        // 動態載入失敗時，使用 routing 的靜態預設作為兜底\n        console.warn('⚠️ 載入動態 locales 失敗，使用靜態 routing 作為兜底', e);\n        supportedLocales = [...routing.locales]; // Create a mutable copy\n        dynamicDefaultLocale = routing.defaultLocale;\n    }\n\n    // 2) 依優先序決定候選語系：URL → Cookie → 動態預設 → 靜態預設\n    const cookieStore = await cookies();\n    const cookieLocale = cookieStore.get('NEXT_LOCALE')?.value;\n    const candidate =\n        requested ||\n        (LOCALE_CONFIG.DETECTION.ENABLED ? cookieLocale : undefined) ||\n        dynamicDefaultLocale ||\n        routing.defaultLocale;\n\n    // 3) 嚴格以 supportedLocales 驗證，非法則回退至 dynamicDefault → routing.defaultLocale\n    const isValid = supportedLocales.includes(candidate);\n    const locale = isValid\n        ? candidate\n        : (supportedLocales.includes(dynamicDefaultLocale)\n            ? dynamicDefaultLocale\n            : routing.defaultLocale);\n\n    // 4) 載入對應 messages，失敗時回退到 default messages\n    let messages: Record<string, unknown>;\n    try {\n        messages = (await import(`../../messages/${locale}.json`)).default;\n    } catch (e) {\n        console.warn(`⚠️ 找不到 ${locale}.json，回退至 ${routing.defaultLocale}.json`, e);\n        messages = (await import(`../../messages/${routing.defaultLocale}.json`)).default;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n        console.log(`🌍 語系決策: requested=${requested} cookie=${cookieLocale} final=${locale}`);\n    }\n\n    return {\n        locale,\n        messages\n    };\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AAAA;;;;;;uCAEe,CAAA,GAAA,0PAAA,CAAA,mBAAgB,AAAD,EAAE,OAAO,EAAC,aAAa,EAAC;IAClD,MAAM,YAAY,MAAM;IAExB,2BAA2B;IAC3B,IAAI,mBAA6B,EAAE;IACnC,IAAI,uBAA+B,sHAAA,CAAA,UAAO,CAAC,aAAa;IAExD,IAAI;QACA,mBAAmB,MAAM,iJAAA,CAAA,yBAAsB,CAAC,mBAAmB;QACnE,uBAAuB,MAAM,iJAAA,CAAA,yBAAsB,CAAC,gBAAgB;IACxE,EAAE,OAAO,GAAG;QACR,+BAA+B;QAC/B,QAAQ,IAAI,CAAC,wCAAwC;QACrD,mBAAmB;eAAI,sHAAA,CAAA,UAAO,CAAC,OAAO;SAAC,EAAE,wBAAwB;QACjE,uBAAuB,sHAAA,CAAA,UAAO,CAAC,aAAa;IAChD;IAEA,2CAA2C;IAC3C,MAAM,cAAc,MAAM,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD;IAChC,MAAM,eAAe,YAAY,GAAG,CAAC,gBAAgB;IACrD,MAAM,YACF,aACA,CAAC,iIAAA,CAAA,gBAAa,CAAC,SAAS,CAAC,OAAO,GAAG,eAAe,SAAS,KAC3D,wBACA,sHAAA,CAAA,UAAO,CAAC,aAAa;IAEzB,2EAA2E;IAC3E,MAAM,UAAU,iBAAiB,QAAQ,CAAC;IAC1C,MAAM,SAAS,UACT,YACC,iBAAiB,QAAQ,CAAC,wBACvB,uBACA,sHAAA,CAAA,UAAO,CAAC,aAAa;IAE/B,2CAA2C;IAC3C,IAAI;IACJ,IAAI;QACA,WAAW,CAAC;;;;;;;;;;;;;;;;;kBAAa,CAAC,eAAe,EAAE,OAAO,KAAK,CAAC,CAAC,EAAE,OAAO;IACtE,EAAE,OAAO,GAAG;QACR,QAAQ,IAAI,CAAC,CAAC,OAAO,EAAE,OAAO,UAAU,EAAE,sHAAA,CAAA,UAAO,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE;QACxE,WAAW,CAAC;;;;;;;;;;;;;;;;;kBAAa,CAAC,eAAe,EAAE,sHAAA,CAAA,UAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,OAAO;IACrF;IAEA,wCAA2C;QACvC,QAAQ,GAAG,CAAC,CAAC,mBAAmB,EAAE,UAAU,QAAQ,EAAE,aAAa,OAAO,EAAE,QAAQ;IACxF;IAEA,OAAO;QACH;QACA;IACJ;AACJ","debugId":null}},
    {"offset": {"line": 113, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/i18n/navigation.ts"],"sourcesContent":["import {createNavigation} from 'next-intl/navigation';\nimport {routing} from './routing';\n\n//這是在 Next.js 導航 API 基礎上，考量到路由設定的輕量級封裝。\nexport const {Link, redirect, usePathname, useRouter, getPathname} =\n    createNavigation(routing);\n"],"names":[],"mappings":";;;;;;;AAAA;AACA;;;AAGO,MAAM,EAAC,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,EAAC,GAC9D,CAAA,GAAA,8PAAA,CAAA,mBAAgB,AAAD,EAAE,sHAAA,CAAA,UAAO","debugId":null}},
    {"offset": {"line": 129, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/services/locales.service.ts"],"sourcesContent":["import { API_CONFIG } from '@/config';\nimport { BaseApiService } from './base/api-service.base';\n\n// 定義 Locales 型別 (國家語系對照表)\ninterface CountryLocaleMapping {\n    [countryCode: string]: string; // 例如: { \"TW\": \"zh-TW\", \"US\": \"en-US\" }\n}\n\n/**\n * 國家語系對應服務 - 抽象化 API 呼叫\n * 根據環境變數自動切換 Mock 或正式 API\n */\nclass LocalesService extends BaseApiService {\n    constructor() {\n        super('國家語系對應');\n    }\n\n    /**\n     * 取得國家語系對照表\n     * @returns Promise<CountryLocaleMapping>\n     */\n    async getLocales(): Promise<CountryLocaleMapping> {\n        const endpoint = {\n            mock: API_CONFIG.ENDPOINTS.MOCK.LOCALES,\n            external: API_CONFIG.ENDPOINTS.EXTERNAL.LOCALES\n        };\n\n        return this.apiRequest<CountryLocaleMapping>(endpoint);\n    }\n\n    /**\n     * 根據國家代碼取得對應語系\n     * @param countryCode 國家代碼 (如 \"TW\", \"US\")\n     * @returns Promise<string | null>\n     */\n    async getLocaleByCountry(countryCode: string): Promise<string | null> {\n        try {\n            const locales = await this.getLocales();\n            return locales[countryCode] || null;\n        } catch (error) {\n            console.error(`❌ 無法取得國家 ${countryCode} 對應的語系:`, error);\n            return null;\n        }\n    }\n\n    /**\n     * 覆寫成功日誌，顯示國家數量\n     */\n    protected logSuccess(data: CountryLocaleMapping): void {\n        if (API_CONFIG.LOGGING) {\n            const countryCount = Object.keys(data).length;\n            console.log(`✅ ${this.serviceName}資料載入成功:`, countryCount, '個國家對照');\n        }\n    }\n}\n\n// 匯出單例實例\nexport const localesService = new LocalesService();"],"names":[],"mappings":";;;AAAA;AAAA;AACA;;;AAOA;;;CAGC,GACD,MAAM,uBAAuB,iJAAA,CAAA,iBAAc;IACvC,aAAc;QACV,KAAK,CAAC;IACV;IAEA;;;KAGC,GACD,MAAM,aAA4C;QAC9C,MAAM,WAAW;YACb,MAAM,8HAAA,CAAA,aAAU,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO;YACvC,UAAU,8HAAA,CAAA,aAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO;QACnD;QAEA,OAAO,IAAI,CAAC,UAAU,CAAuB;IACjD;IAEA;;;;KAIC,GACD,MAAM,mBAAmB,WAAmB,EAA0B;QAClE,IAAI;YACA,MAAM,UAAU,MAAM,IAAI,CAAC,UAAU;YACrC,OAAO,OAAO,CAAC,YAAY,IAAI;QACnC,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,CAAC,SAAS,EAAE,YAAY,OAAO,CAAC,EAAE;YAChD,OAAO;QACX;IACJ;IAEA;;KAEC,GACD,AAAU,WAAW,IAA0B,EAAQ;QACnD,IAAI,8HAAA,CAAA,aAAU,CAAC,OAAO,EAAE;YACpB,MAAM,eAAe,OAAO,IAAI,CAAC,MAAM,MAAM;YAC7C,QAAQ,GAAG,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE,cAAc;QAC9D;IACJ;AACJ;AAGO,MAAM,iBAAiB,IAAI","debugId":null}},
    {"offset": {"line": 181, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/services/system-menu.service.ts"],"sourcesContent":["import { API_CONFIG } from '@/config';\nimport { BaseApiService } from './base/api-service.base';\n\n// 定義系統選單項目型別\ninterface SystemMenuItem {\n    id: string;\n    title: string;\n    url?: string;\n    type: 'link' | 'dropdown' | 'button';\n    children?: SystemMenuItem[];\n    icon?: string;\n    order: number;\n    isActive: boolean;\n    level?: number; // 選單層級 (第一層、第二層)\n    parentId?: string; // 上層選單 ID\n}\n\n/**\n * 系統選單服務 - 抽象化 API 呼叫\n * 根據環境變數自動切換 Mock 或正式 API\n */\nclass SystemMenuService extends BaseApiService {\n    constructor() {\n        super('系統選單');\n    }\n\n    /**\n     * 取得系統選單資料\n     * @returns Promise<SystemMenuItem[]>\n     */\n    async getSystemMenu(): Promise<SystemMenuItem[]> {\n        const endpoint = {\n            mock: API_CONFIG.ENDPOINTS.MOCK.SYSTEM_MENUS,\n            external: API_CONFIG.ENDPOINTS.EXTERNAL.SYSTEM_MENUS\n        };\n\n        return this.apiRequest<SystemMenuItem[]>(endpoint);\n    }\n\n    /**\n     * 根據層級取得選單項目\n     * @param level 選單層級 (1 或 2)\n     * @returns Promise<SystemMenuItem[]>\n     */\n    async getMenuByLevel(level: number): Promise<SystemMenuItem[]> {\n        try {\n            const allMenus = await this.getSystemMenu();\n            return allMenus.filter(menu => menu.level === level);\n        } catch (error) {\n            console.error(`❌ 無法取得第 ${level} 層選單:`, error);\n            return [];\n        }\n    }\n\n    /**\n     * 根據上層選單 ID 取得子選單\n     * @param parentId 上層選單 ID\n     * @returns Promise<SystemMenuItem[]>\n     */\n    async ㄓㄜ(parentId: string): Promise<SystemMenuItem[]> {\n        try {\n            const allMenus = await this.getSystemMenu();\n            return allMenus.filter(menu => menu.parentId === parentId);\n        } catch (error) {\n            console.error(`❌ 無法取得上層選單 ${parentId} 的子選單:`, error);\n            return [];\n        }\n    }\n\n    /**\n     * 根據選單 ID 取得特定選單項目\n     * @param menuId 選單項目 ID\n     * @returns Promise<SystemMenuItem | null>\n     */\n    async getMenuItemById(menuId: string): Promise<SystemMenuItem | null> {\n        try {\n            const allMenus = await this.getSystemMenu();\n            return allMenus.find(menu => menu.id === menuId) || null;\n        } catch (error) {\n            console.error(`❌ 無法找到選單項目 ${menuId}:`, error);\n            return null;\n        }\n    }\n\n    /**\n     * 覆寫成功日誌，顯示選單項目統計\n     */\n    protected logSuccess(data: SystemMenuItem[]): void {\n        if (API_CONFIG.LOGGING) {\n            const level1Count = data.filter(menu => menu.level === 1).length;\n            const level2Count = data.filter(menu => menu.level === 2).length;\n\n            console.log(`✅ ${this.serviceName}資料載入成功:`,\n                `總計 ${data.length} 個選單項目 (第一層:${level1Count}, 第二層:${level2Count})`\n            );\n        }\n    }\n}\n\n// 匯出單例實例\nexport const systemMenuService = new SystemMenuService();"],"names":[],"mappings":";;;AAAA;AAAA;AACA;;;AAgBA;;;CAGC,GACD,MAAM,0BAA0B,iJAAA,CAAA,iBAAc;IAC1C,aAAc;QACV,KAAK,CAAC;IACV;IAEA;;;KAGC,GACD,MAAM,gBAA2C;QAC7C,MAAM,WAAW;YACb,MAAM,8HAAA,CAAA,aAAU,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY;YAC5C,UAAU,8HAAA,CAAA,aAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,YAAY;QACxD;QAEA,OAAO,IAAI,CAAC,UAAU,CAAmB;IAC7C;IAEA;;;;KAIC,GACD,MAAM,eAAe,KAAa,EAA6B;QAC3D,IAAI;YACA,MAAM,WAAW,MAAM,IAAI,CAAC,aAAa;YACzC,OAAO,SAAS,MAAM,CAAC,CAAA,OAAQ,KAAK,KAAK,KAAK;QAClD,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,CAAC,QAAQ,EAAE,MAAM,KAAK,CAAC,EAAE;YACvC,OAAO,EAAE;QACb;IACJ;IAEA;;;;KAIC,GACD,MAAM,GAAG,QAAgB,EAA6B;QAClD,IAAI;YACA,MAAM,WAAW,MAAM,IAAI,CAAC,aAAa;YACzC,OAAO,SAAS,MAAM,CAAC,CAAA,OAAQ,KAAK,QAAQ,KAAK;QACrD,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,CAAC,WAAW,EAAE,SAAS,MAAM,CAAC,EAAE;YAC9C,OAAO,EAAE;QACb;IACJ;IAEA;;;;KAIC,GACD,MAAM,gBAAgB,MAAc,EAAkC;QAClE,IAAI;YACA,MAAM,WAAW,MAAM,IAAI,CAAC,aAAa;YACzC,OAAO,SAAS,IAAI,CAAC,CAAA,OAAQ,KAAK,EAAE,KAAK,WAAW;QACxD,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC,EAAE;YACvC,OAAO;QACX;IACJ;IAEA;;KAEC,GACD,AAAU,WAAW,IAAsB,EAAQ;QAC/C,IAAI,8HAAA,CAAA,aAAU,CAAC,OAAO,EAAE;YACpB,MAAM,cAAc,KAAK,MAAM,CAAC,CAAA,OAAQ,KAAK,KAAK,KAAK,GAAG,MAAM;YAChE,MAAM,cAAc,KAAK,MAAM,CAAC,CAAA,OAAQ,KAAK,KAAK,KAAK,GAAG,MAAM;YAEhE,QAAQ,GAAG,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,EACtC,CAAC,GAAG,EAAE,KAAK,MAAM,CAAC,YAAY,EAAE,YAAY,MAAM,EAAE,YAAY,CAAC,CAAC;QAE1E;IACJ;AACJ;AAGO,MAAM,oBAAoB,IAAI","debugId":null}},
    {"offset": {"line": 260, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/services/index.ts"],"sourcesContent":["// 統一導出所有服務\nexport * from './language.service';\nexport * from './locales.service';\nexport * from './system-menu.service';\n"],"names":[],"mappings":"AAAA,WAAW;;AACX;AACA;AACA","debugId":null}},
    {"offset": {"line": 281, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/components/LanguageSwitcher.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/features/language/components/LanguageSwitcher.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/features/language/components/LanguageSwitcher.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAyT,GACtV,uFACA","debugId":null}},
    {"offset": {"line": 293, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/components/LanguageSwitcher.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/features/language/components/LanguageSwitcher.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/features/language/components/LanguageSwitcher.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAqS,GAClU,mEACA","debugId":null}},
    {"offset": {"line": 305, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 313, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/app/%5Blocale%5D/page.tsx"],"sourcesContent":["import { getTranslations } from 'next-intl/server';\nimport { Link } from '@/i18n/navigation';\nimport { languageService,localesService } from '@/services'; // ✅ 使用統一導出\nimport LanguageSwitcher from '@/features/language/components/LanguageSwitcher';\n\nexport default async function HomePage() {\n    // 靜態渲染的翻譯資料\n    const t = await getTranslations('navigation');\n    const languages = await languageService.getLanguages();\n    const locales = await localesService.getLocales();\n\n\n    return (\n        <div className=\"flex flex-col gap-3\">\n            <div>\n                <h2>頁面</h2>\n                <nav className=\"flex gap-3\">\n                    <Link href=\"/\">{t('home')}</Link>\n                    <Link href=\"/about\">{t('about')}</Link>\n                    <Link href=\"/contact\">{t('contact')}</Link>\n                </nav>\n            </div>\n            <div>\n                <h2>支援的語系清單</h2>\n                <nav className=\"flex gap-3\">\n                    {languages.map(lang => (\n                        <Link href={`/${lang.id}`} key={lang.id} title={lang.id}>\n                        {lang.title}\n                        </Link>\n                    ))}\n                </nav>\n                <LanguageSwitcher className=\"mb-6\" languages={languages} variant=\"dropdown\"/>\n\n            </div>\n            <div>\n                <h2>國家預設語系</h2>\n                <ul className=\"flex gap-3\">\n                    {Object.entries(locales).map(([countryCode, locale]) => (\n                        <li key={countryCode}>\n                            {countryCode} :  {locale}\n                        </li>\n                    ))}\n                </ul>\n            </div>\n        </div>\n    );\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA,kQAA6D,WAAW;AAAxE;AAAA;AACA;;;;;;AAEe,eAAe;IAC1B,YAAY;IACZ,MAAM,IAAI,MAAM,CAAA,GAAA,wPAAA,CAAA,kBAAe,AAAD,EAAE;IAChC,MAAM,YAAY,MAAM,sIAAA,CAAA,kBAAe,CAAC,YAAY;IACpD,MAAM,UAAU,MAAM,qIAAA,CAAA,iBAAc,CAAC,UAAU;IAG/C,qBACI,8OAAC;QAAI,WAAU;;0BACX,8OAAC;;kCACG,8OAAC;kCAAG;;;;;;kCACJ,8OAAC;wBAAI,WAAU;;0CACX,8OAAC,yHAAA,CAAA,OAAI;gCAAC,MAAK;0CAAK,EAAE;;;;;;0CAClB,8OAAC,yHAAA,CAAA,OAAI;gCAAC,MAAK;0CAAU,EAAE;;;;;;0CACvB,8OAAC,yHAAA,CAAA,OAAI;gCAAC,MAAK;0CAAY,EAAE;;;;;;;;;;;;;;;;;;0BAGjC,8OAAC;;kCACG,8OAAC;kCAAG;;;;;;kCACJ,8OAAC;wBAAI,WAAU;kCACV,UAAU,GAAG,CAAC,CAAA,qBACX,8OAAC,yHAAA,CAAA,OAAI;gCAAC,MAAM,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE;gCAAgB,OAAO,KAAK,EAAE;0CACtD,KAAK,KAAK;+BADqB,KAAK,EAAE;;;;;;;;;;kCAK/C,8OAAC,8JAAA,CAAA,UAAgB;wBAAC,WAAU;wBAAO,WAAW;wBAAW,SAAQ;;;;;;;;;;;;0BAGrE,8OAAC;;kCACG,8OAAC;kCAAG;;;;;;kCACJ,8OAAC;wBAAG,WAAU;kCACT,OAAO,OAAO,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,aAAa,OAAO,iBAC/C,8OAAC;;oCACI;oCAAY;oCAAK;;+BADb;;;;;;;;;;;;;;;;;;;;;;AAQjC","debugId":null}}]
}