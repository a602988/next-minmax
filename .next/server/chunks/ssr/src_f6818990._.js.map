{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///Users/chianlin/Documents/GitHub/next-minmax/src/i18n/routing.ts"],"sourcesContent":["import { defineRouting } from 'next-intl/routing';\n\nexport const routing = defineRouting({\n  // 支援的語系 - 這個會被 API 動態覆蓋\n  locales: ['zh-TW', 'zh-CN', 'en', 'ja'],\n  \n  // 預設語系 - 這個也會被 API 動態覆蓋\n  defaultLocale: 'zh-TW',\n  \n  // 預設語系不加前綴\n  localePrefix: 'as-needed',\n  \n  // 啟用語系檢測\n  localeDetection: true\n});\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,UAAU,CAAA,GAAA,kOAAA,CAAA,gBAAa,AAAD,EAAE;IACnC,wBAAwB;IACxB,SAAS;QAAC;QAAS;QAAS;QAAM;KAAK;IAEvC,wBAAwB;IACxB,eAAe;IAEf,WAAW;IACX,cAAc;IAEd,SAAS;IACT,iBAAiB;AACnB","debugId":null}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":["file:///Users/chianlin/Documents/GitHub/next-minmax/src/i18n/request.ts"],"sourcesContent":["/**\n * Next.js 國際化請求配置\n * \n * 處理流程：\n * 1. 使用者訪問帶有語言參數的路由 (例如: /zh/about, /en/about)\n * 2. Next.js 從 URL 路由段中提取語言識別碼\n * 3. 驗證語言識別碼是否在支援的語言清單中\n * 4. 動態載入對應的語言資源檔案\n * 5. 將語言配置和翻譯資源提供給應用程式\n */\n\nimport {getRequestConfig} from 'next-intl/server'; // Next.js 國際化請求配置工廠函數\nimport {hasLocale} from 'next-intl'; // 語言識別碼驗證工具函數\nimport {routing} from './routing'; // 路由配置模組，包含支援語言清單和預設語言\n\nexport default getRequestConfig(async ({requestLocale}) => {\n    // 取得請求中的語言識別碼 (對應 [locale] 動態路由段)\n    // 使用 await 處理可能的異步語言識別碼解析\n    const requested = await requestLocale;\n    \n    // 語言識別碼驗證與回退策略\n    // 若請求的語言在支援清單中則使用該語言，否則回退至預設語言\n    const locale = hasLocale(routing.locales, requested)\n        ? requested\n        : routing.defaultLocale;\n\n    // 回傳國際化配置物件\n    return {\n        locale, // 最終確定的語言識別碼\n        messages: (await import(`../../messages/${locale}.json`)).default // 動態載入語言資源檔案\n    };\n});\n"],"names":[],"mappings":"AAAA;;;;;;;;;CASC;;;AAED,ubAAmD,sBAAsB;AACzE,iTAAqC,cAAc;AACnD,8MAAmC,uBAAuB;;;;uCAE3C,CAAA,GAAA,0PAAA,CAAA,mBAAgB,AAAD,EAAE,OAAO,EAAC,aAAa,EAAC;IAClD,kCAAkC;IAClC,0BAA0B;IAC1B,MAAM,YAAY,MAAM;IAExB,eAAe;IACf,+BAA+B;IAC/B,MAAM,SAAS,CAAA,GAAA,iLAAA,CAAA,YAAS,AAAD,EAAE,sHAAA,CAAA,UAAO,CAAC,OAAO,EAAE,aACpC,YACA,sHAAA,CAAA,UAAO,CAAC,aAAa;IAE3B,YAAY;IACZ,OAAO;QACH;QACA,UAAU,CAAC;;;;;;;;;;;;;;;;;kBAAa,CAAC,eAAe,EAAE,OAAO,KAAK,CAAC,CAAC,EAAE,OAAO,CAAC,aAAa;IACnF;AACJ","debugId":null}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":["file:///Users/chianlin/Documents/GitHub/next-minmax/src/app/layout.tsx"],"sourcesContent":["import { ReactNode } from 'react';\nimport { NextIntlClientProvider } from 'next-intl';\nimport { notFound } from 'next/navigation';\n\n// 支援的語系列表,後續會從API獲取\nconst locales = ['en', 'zh-TW'];\n\nexport default async function LocaleLayout({\n                                               children,\n                                               params: { locale }\n                                           }: {\n    children: ReactNode;\n    params: { locale: string };\n}) {\n    // 驗證URL中的語系是否支援\n    if (!locales.includes(locale)) {\n        notFound();\n    }\n\n    // 取得對應語系的翻譯檔案\n    let messages;\n    try {\n        messages = (await import(`../../messages/${locale}.json`)).default;\n    } catch (error) {\n        notFound();\n    }\n\n    return (\n        <NextIntlClientProvider\n            locale={locale}\n            messages={messages}\n        >\n            {children}\n        </NextIntlClientProvider>\n    );\n}"],"names":[],"mappings":";;;;AACA;AACA;AAAA;;;;AAEA,oBAAoB;AACpB,MAAM,UAAU;IAAC;IAAM;CAAQ;AAEhB,eAAe,aAAa,EACI,QAAQ,EACR,QAAQ,EAAE,MAAM,EAAE,EAIhE;IACG,gBAAgB;IAChB,IAAI,CAAC,QAAQ,QAAQ,CAAC,SAAS;QAC3B,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD;IACX;IAEA,cAAc;IACd,IAAI;IACJ,IAAI;QACA,WAAW,CAAC;;;;;;;;;;;;;;;;;kBAAa,CAAC,eAAe,EAAE,OAAO,KAAK,CAAC,CAAC,EAAE,OAAO;IACtE,EAAE,OAAO,OAAO;QACZ,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD;IACX;IAEA,qBACI,8OAAC,kQAAA,CAAA,yBAAsB;QACnB,QAAQ;QACR,UAAU;kBAET;;;;;;AAGb","debugId":null}}]
}