{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/i18n/routing.ts"],"sourcesContent":["import { defineRouting } from 'next-intl/routing';\n\nexport const routing = defineRouting({\n  // 支援的語系 - 這個會被 API 動態覆蓋\n  locales: ['zh-TW', 'zh-CN', 'en', 'ja'],\n  \n  // 預設語系 - 這個也會被 API 動態覆蓋\n  defaultLocale: 'zh-TW',\n  \n  // 預設語系不加前綴\n  localePrefix: 'as-needed',\n  \n  // 啟用語系檢測\n  localeDetection: true\n});\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,UAAU,CAAA,GAAA,kOAAA,CAAA,gBAAa,AAAD,EAAE;IACnC,wBAAwB;IACxB,SAAS;QAAC;QAAS;QAAS;QAAM;KAAK;IAEvC,wBAAwB;IACxB,eAAe;IAEf,WAAW;IACX,cAAc;IAEd,SAAS;IACT,iBAAiB;AACnB","debugId":null}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/env.mjs"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\n/**\n * 環境變數配置 - 程式碼優先的配置管理\n *\n * 設計原則：\n * 1. env.mjs 包含所有預設值和業務邏輯配置\n * 2. .env 檔案只覆寫需要變更或敏感的設定\n * 3. 開發時依賴預設值，生產時用環境變數覆蓋\n */\n\n/**\n * 伺服器端環境變數配置\n * 這些變數只在伺服器端使用，確保安全性，不會暴露給客戶端\n */\nconst server = {\n    // ==========================================\n    // 國際化與語系配置\n    // 控制多語系、地理位置偵測及語系重導功能\n    // ==========================================\n\n    /** 國際化功能總開關 */\n    INTERNATIONALIZATION_ENABLED: z.string().transform((val) => val === \"true\").default(\"true\"),\n\n    /** 多語系功能開關 */\n    MULTI_LANGUAGE_ENABLED: z.string().transform((val) => val === \"true\").default(\"true\"),\n\n    /** ip 地理偵測功能開關 */\n    GEO_DETECTION_ENABLED: z.string().transform((val) => val === \"true\").default(\"false\"),\n\n    /** 強制重導開關 */\n    FORCE_REDIRECT: z.string().transform((val) => val === \"true\").default(\"false\"),\n\n    // ==========================================\n    // 專案核心配置\n    // 專案基本資訊與預設語系設定\n    // ==========================================\n\n    /** 專案代碼 */\n    PROJECT_CODE: z.string().default(\"minmax2025\"),\n\n    /** 預設語系 */\n    DEFAULT_LANGUAGE: z.string().default(\"zh-TW\"),\n\n    /** 國家子網域對應表 (JSON) {\"TW\": \"tw\", \"US\": \"us\", \"JP\": \"jp\"} */\n    COUNTRY_SUBDOMAIN_MAP: z.string().default('{}'),\n\n    // ==========================================\n    // 🔄 快取系統配置\n    // 控制整體快取策略和生存時間\n    // ==========================================\n\n    /** 快取系統總開關 */\n    CACHE_ENABLED: z.string().transform((val) => val === \"true\").default(\"true\"),\n\n    /** CDN 快取協作開關 */\n    CACHE_CDN_ENABLED: z.string().transform((val) => val === \"true\").default(\"false\"),\n\n    /** 國際化快取策略 */\n    I18N_CACHE_STRATEGY: z.enum([\"memory\", \"redis\", \"none\"]).default(\"memory\"),\n\n    /** 快取預設生存時間 (秒) */\n    CACHE_DEFAULT_TTL: z.string().transform((val) => parseInt(val)).default(\"3600\"),\n\n    // ==========================================\n    // API 與外部服務配置\n    // API 網址、超時設定及第三方服務配置\n    // ==========================================\n\n    /** 外部後端 API 基礎網址 */\n    EXTERNAL_API_BASE_URL: z.string().default(\"https://v5.jeffy.test\"),\n\n    /** 一般 API 請求超時 (毫秒) */\n    API_TIMEOUT: z.string().transform((val) => parseInt(val)).default(\"5000\"),\n\n    /** 內容 API 請求超時 (毫秒) */\n    CONTENT_API_TIMEOUT: z.string().transform((val) => parseInt(val)).default(\"10000\"),\n\n    /** 地理位置 API 超時 (毫秒) */\n    GEO_API_TIMEOUT: z.string().transform((val) => parseInt(val)).default(\"800\"),\n\n    /** 地理位置服務提供商 */\n    GEO_API_PROVIDER: z.enum([\"ipapi\", \"ipinfo\", \"geoplugin\"]).default(\"geoplugin\"),\n\n    // ==========================================\n    // 開發與測試配置\n    // Mock API、錯誤模擬及開發工具設定\n    // ==========================================\n\n    /** Mock API 開關 */\n    USE_MOCK_API: z.string().transform((val) => val === \"true\").default(\"true\"),\n\n    /** Mock API 延遲模擬 (毫秒) */\n    MOCK_API_DELAY: z.string().transform((val) => parseInt(val)).default(\"100\"),\n\n    /** 錯誤模擬開關 */\n    MOCK_ERROR_ENABLED: z.string().transform((val) => val === \"true\").default(\"false\"),\n\n    /** 錯誤模擬機率 (0.0-1.0) */\n    MOCK_ERROR_RATE: z.string().transform((val) => parseFloat(val)).default(\"0.0\"),\n\n    // ==========================================\n    // 監控與日誌配置\n    // API 日誌記錄及效能監控開關\n    // ==========================================\n\n    /** API 請求日誌記錄 */\n    API_LOGGING_ENABLED: z.string().transform((val) => val === \"true\").default(\"true\"),\n\n    /** 效能監控開關 */\n    PERFORMANCE_MONITORING_ENABLED: z.string().transform((val) => val === \"true\").default(\"false\"),\n\n    // ==========================================\n    // 功能開關\n    // 各項業務功能的開關控制\n    // ==========================================\n\n    /** 會員功能開關 */\n   MEMBERSHIP_ENABLED: z.string().transform((val) => val === \"true\").default(\"false\"),\n\n    // ==========================================\n    // 🔐 敏感資訊\n    // 資料庫、API 金鑰等敏感資料，僅在 .env 中設定\n    // ==========================================\n\n    /** 資料庫連線字串 */\n    //DATABASE_URL: z.string().optional(),\n\n    /** Redis 連線字串 */\n    //REDIS_URL: z.string().optional(),\n\n    /** API 密鑰 */\n    //API_SECRET_KEY: z.string().optional(),\n\n    /** JWT 簽名密鑰 */\n   // JWT_SECRET: z.string().optional(),\n\n    /** 管理員 API 金鑰 */\n    //ADMIN_API_KEY: z.string().optional(),\n\n    /** 地理位置服務 API 金鑰 */\n    //GEO_API_KEY: z.string().optional(),\n};\n\n/**\n * 客戶端環境變數配置\n * 這些變數會暴露給瀏覽器，請避免包含敏感資訊\n * 所有變數都必須以 NEXT_PUBLIC_ 前綴開始\n */\nconst client = {\n    // ==========================================\n    // 🏗️ 專案基本資訊\n    // 前端顯示用的專案資訊和基礎配置\n    // ==========================================\n\n    /** 專案顯示名稱 */\n    NEXT_PUBLIC_PROJECT_NAME: z.string().default(\"demo測試網站\"),\n\n    /** 前端預設語系 */\n    NEXT_PUBLIC_DEFAULT_LOCALE: z.string().default(\"zh-TW\"),\n\n    /** API 版本號 */\n    NEXT_PUBLIC_API_VERSION: z.string().default(\"1.0.0\"),\n\n    // ==========================================\n    // 🌐 API 與服務配置\n    // 客戶端 API 呼叫相關設定\n    // ==========================================\n\n    /** 前端 API 基礎網址 */\n    NEXT_PUBLIC_API_BASE_URL: z.string().default(\"http://localhost:3000\"),\n\n    // ==========================================\n    // 🌍 國際化功能開關\n    // 前端國際化相關的功能控制\n    // ==========================================\n\n    /** 前端多語系功能開關 */\n    NEXT_PUBLIC_MULTI_LANGUAGE_ENABLED: z.string().transform((val) => val === \"true\").default(\"true\"),\n\n    // ==========================================\n    // 🗺️ 地理位置偵測配置\n    // 使用者地理位置偵測與重導邏輯設定\n    // ==========================================\n\n    /** 地理位置偵測策略 */\n    NEXT_PUBLIC_GEO_DETECTION_STRATEGY: z.enum([\"cdn-only\", \"api-only\", \"cdn-fallback\"]).default(\"api-only\"),\n\n    /** 地理重導模式 */\n    NEXT_PUBLIC_GEO_REDIRECT_MODE: z.enum([\"off\", \"suggest\", \"force\"]).default(\"suggest\"),\n\n    /** CDN 國家標頭名稱 */\n    NEXT_PUBLIC_CDN_COUNTRY_HEADER: z.string().default(\"cf-ipcountry\"),\n\n    // ==========================================\n    // ⚙️ 前端功能配置\n    // 前端特有的功能開關和配置\n    // ==========================================\n\n    /** 前端快取功能開關 */\n    NEXT_PUBLIC_CACHE_ENABLED: z.string().transform((val) => val === \"true\").default(\"true\"),\n\n    /** 開發模式開關 */\n    NEXT_PUBLIC_DEV_MODE_ENABLED: z.string().transform((val) => val === \"true\").default(\"false\"),\n\n    // ==========================================\n    // 🔧 外部服務配置\n    // 第三方服務的公開配置項目\n    // ==========================================\n\n    /** 錯誤追蹤服務 DSN */\n    NEXT_PUBLIC_SENTRY_DSN: z.string().optional(),\n};\n\n// 取得所有 schema 的鍵名\nconst serverKeys = Object.keys(server);\nconst clientKeys = Object.keys(client);\n\nexport const env = createEnv({\n    server,\n    client,\n\n    /**\n     * 運行時環境變數映射\n     * 精確地從 process.env 映射我們定義的變數\n     */\n    runtimeEnv: {\n        ...Object.fromEntries(\n            serverKeys.map(key => [key, process.env[key]])\n        ),\n        ...Object.fromEntries(\n            clientKeys.map(key => [key, process.env[key]])\n        ),\n    },\n});"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/config/app.config.ts"],"sourcesContent":["\nimport { env } from '@/env.mjs';\n\n/**\n * 應用程式核心配置\n * 整合環境變數與預設值\n */\nexport const APP_CONFIG = {\n    // 專案基本資訊\n    PROJECT_NAME: env.PROJECT_CODE, // 專案代碼名稱\n\n    // API 配置\n    API: {\n        BASE_URL: env.NEXT_PUBLIC_API_BASE_URL, // 前端 API 基礎網址\n        EXTERNAL_URL: env.EXTERNAL_API_BASE_URL, // 外部後端 API 基礎網址\n        TIMEOUT: env.API_TIMEOUT, // 一般 API 請求超時 (毫秒)\n        CONTENT_TIMEOUT: env.CONTENT_API_TIMEOUT, // 內容 API 請求超時 (毫秒)\n        GEO_TIMEOUT: env.GEO_API_TIMEOUT, // 地理位置 API 超時 (毫秒)\n    },\n\n    // 功能開關\n    FEATURES: {\n        INTERNATIONALIZATION: env.INTERNATIONALIZATION_ENABLED, // 國際化功能總開關\n        GEO_DETECTION: env.GEO_DETECTION_ENABLED, // IP 地理偵測功能開關\n        FORCE_REDIRECT: env.FORCE_REDIRECT, // 強制重導開關\n        MULTI_LANGUAGE: env.MULTI_LANGUAGE_ENABLED, // 多語系功能開關\n        MEMBERSHIP: env.MEMBERSHIP_ENABLED, // 會員功能開關\n        CACHE: env.CACHE_ENABLED, // 快取系統總開關\n    },\n\n    // 快取配置\n    CACHE: {\n        ENABLED: env.CACHE_ENABLED, // 快取系統總開關\n        CDN_ENABLED: env.CACHE_CDN_ENABLED, // CDN 快取協作開關\n        STRATEGY: env.I18N_CACHE_STRATEGY, // 國際化快取策略\n        DEFAULT_TTL: env.CACHE_DEFAULT_TTL, // 快取預設生存時間 (秒)\n    },\n\n    // 地理位置配置\n    GEO: {\n        DETECTION_STRATEGY: env.NEXT_PUBLIC_GEO_DETECTION_STRATEGY, // 地理位置偵測策略\n        REDIRECT_MODE: env.NEXT_PUBLIC_GEO_REDIRECT_MODE, // 地理重導模式\n        CDN_COUNTRY_HEADER: env.NEXT_PUBLIC_CDN_COUNTRY_HEADER, // CDN 國家標頭名稱\n        API_PROVIDER: env.GEO_API_PROVIDER, // 地理位置服務提供商\n        API_TIMEOUT: env.GEO_API_TIMEOUT, // 地理位置 API 超時 (毫秒)\n    },\n\n    // Mock 與測試配置\n    MOCK: {\n        USE_MOCK_API: env.USE_MOCK_API, // Mock API 開關\n        API_DELAY: env.MOCK_API_DELAY, // Mock API 延遲模擬 (毫秒)\n        ERROR_ENABLED: env.MOCK_ERROR_ENABLED, // 錯誤模擬開關\n        ERROR_RATE: env.MOCK_ERROR_RATE, // 錯誤模擬機率 (0.0-1.0)\n    },\n\n    // 開發與監控\n    DEV: {\n        API_LOGGING: env.API_LOGGING_ENABLED, // API 請求日誌記錄開關\n        PERFORMANCE_MONITORING: env.PERFORMANCE_MONITORING_ENABLED, // 效能監控開關\n        DEV_MODE: env.NEXT_PUBLIC_DEV_MODE_ENABLED, // 開發模式開關\n    },\n\n    // 語系配置\n    LOCALE: {\n        DEFAULT: env.DEFAULT_LANGUAGE, // 預設語系\n        CLIENT_DEFAULT: env.NEXT_PUBLIC_DEFAULT_LOCALE, // 前端預設語系\n        MULTI_LANGUAGE_ENABLED: env.NEXT_PUBLIC_MULTI_LANGUAGE_ENABLED, // 前端多語系功能開關\n        COUNTRY_SUBDOMAIN_MAP: env.COUNTRY_SUBDOMAIN_MAP, // 國家子網域對應表 (JSON)\n    }\n} as const;"],"names":[],"mappings":";;;AACA;;AAMO,MAAM,aAAa;IACtB,SAAS;IACT,cAAc,2GAAA,CAAA,MAAG,CAAC,YAAY;IAE9B,SAAS;IACT,KAAK;QACD,UAAU,2GAAA,CAAA,MAAG,CAAC,wBAAwB;QACtC,cAAc,2GAAA,CAAA,MAAG,CAAC,qBAAqB;QACvC,SAAS,2GAAA,CAAA,MAAG,CAAC,WAAW;QACxB,iBAAiB,2GAAA,CAAA,MAAG,CAAC,mBAAmB;QACxC,aAAa,2GAAA,CAAA,MAAG,CAAC,eAAe;IACpC;IAEA,OAAO;IACP,UAAU;QACN,sBAAsB,2GAAA,CAAA,MAAG,CAAC,4BAA4B;QACtD,eAAe,2GAAA,CAAA,MAAG,CAAC,qBAAqB;QACxC,gBAAgB,2GAAA,CAAA,MAAG,CAAC,cAAc;QAClC,gBAAgB,2GAAA,CAAA,MAAG,CAAC,sBAAsB;QAC1C,YAAY,2GAAA,CAAA,MAAG,CAAC,kBAAkB;QAClC,OAAO,2GAAA,CAAA,MAAG,CAAC,aAAa;IAC5B;IAEA,OAAO;IACP,OAAO;QACH,SAAS,2GAAA,CAAA,MAAG,CAAC,aAAa;QAC1B,aAAa,2GAAA,CAAA,MAAG,CAAC,iBAAiB;QAClC,UAAU,2GAAA,CAAA,MAAG,CAAC,mBAAmB;QACjC,aAAa,2GAAA,CAAA,MAAG,CAAC,iBAAiB;IACtC;IAEA,SAAS;IACT,KAAK;QACD,oBAAoB,2GAAA,CAAA,MAAG,CAAC,kCAAkC;QAC1D,eAAe,2GAAA,CAAA,MAAG,CAAC,6BAA6B;QAChD,oBAAoB,2GAAA,CAAA,MAAG,CAAC,8BAA8B;QACtD,cAAc,2GAAA,CAAA,MAAG,CAAC,gBAAgB;QAClC,aAAa,2GAAA,CAAA,MAAG,CAAC,eAAe;IACpC;IAEA,aAAa;IACb,MAAM;QACF,cAAc,2GAAA,CAAA,MAAG,CAAC,YAAY;QAC9B,WAAW,2GAAA,CAAA,MAAG,CAAC,cAAc;QAC7B,eAAe,2GAAA,CAAA,MAAG,CAAC,kBAAkB;QACrC,YAAY,2GAAA,CAAA,MAAG,CAAC,eAAe;IACnC;IAEA,QAAQ;IACR,KAAK;QACD,aAAa,2GAAA,CAAA,MAAG,CAAC,mBAAmB;QACpC,wBAAwB,2GAAA,CAAA,MAAG,CAAC,8BAA8B;QAC1D,UAAU,2GAAA,CAAA,MAAG,CAAC,4BAA4B;IAC9C;IAEA,OAAO;IACP,QAAQ;QACJ,SAAS,2GAAA,CAAA,MAAG,CAAC,gBAAgB;QAC7B,gBAAgB,2GAAA,CAAA,MAAG,CAAC,0BAA0B;QAC9C,wBAAwB,2GAAA,CAAA,MAAG,CAAC,kCAAkC;QAC9D,uBAAuB,2GAAA,CAAA,MAAG,CAAC,qBAAqB;IACpD;AACJ","debugId":null}},
    {"offset": {"line": 245, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/config/locale.config.ts"],"sourcesContent":["import { routing } from '@/i18n/routing';\nimport { env } from '@/env.mjs';\n\n/**\n * 語系統一配置\n * 整合所有語系相關的設定\n */\nexport const LOCALE_CONFIG = {\n    // 基本語系設定\n    SUPPORTED_LOCALES: routing.locales, // 支援的語系清單 (來自 routing)\n    DEFAULT_LOCALE: routing.defaultLocale || env.DEFAULT_LANGUAGE, // 預設語系\n    FALLBACK_LOCALE: 'zh-TW' as const, // 備援語系\n\n    // 前端語系配置\n    CLIENT_DEFAULT_LOCALE: env.NEXT_PUBLIC_DEFAULT_LOCALE, // 前端預設語系\n    MULTI_LANGUAGE_ENABLED: env.NEXT_PUBLIC_MULTI_LANGUAGE_ENABLED, // 前端多語系功能開關\n\n    // 國家與子網域映射\n    COUNTRY_SUBDOMAIN_MAP: JSON.parse(env.COUNTRY_SUBDOMAIN_MAP), // 國家子網域對應表\n\n    // 語系偵測設定\n    DETECTION: {\n        ENABLED: env.MULTI_LANGUAGE_ENABLED, // 多語系偵測功能開關\n        GEO_ENABLED: env.GEO_DETECTION_ENABLED, // IP 地理偵測功能開關\n        STRATEGY: env.NEXT_PUBLIC_GEO_DETECTION_STRATEGY, // 地理位置偵測策略\n        REDIRECT_MODE: env.NEXT_PUBLIC_GEO_REDIRECT_MODE, // 地理重導模式\n        CDN_HEADER: env.NEXT_PUBLIC_CDN_COUNTRY_HEADER, // CDN 國家標頭名稱\n        CACHE_TTL: 3600, // 語系偵測快取時間 (秒) - 1小時\n    },\n\n    // 快取配置\n    CACHE: {\n        STRATEGY: env.I18N_CACHE_STRATEGY, // 國際化快取策略\n        TTL: 3600, // 語系資料快取時間 (秒) - 1小時\n    },\n\n    // 語系驗證函數：檢查語系是否為支援的語系\n    isValidLocale: (locale: string): locale is typeof routing.locales[number] => {\n        return routing.locales.includes(locale as typeof routing.locales[number]);\n    },\n\n    // 取得國家對應的子網域：根據國家代碼取得對應的子網域\n    getSubdomainByCountry: (country: string): string | null => {\n        const map = JSON.parse(env.COUNTRY_SUBDOMAIN_MAP);\n        return map[country] || null;\n    },\n\n} as const;\n\nexport type SupportedLocale = typeof LOCALE_CONFIG.SUPPORTED_LOCALES[number];"],"names":[],"mappings":";;;AAAA;AACA;;;AAMO,MAAM,gBAAgB;IACzB,SAAS;IACT,mBAAmB,sHAAA,CAAA,UAAO,CAAC,OAAO;IAClC,gBAAgB,sHAAA,CAAA,UAAO,CAAC,aAAa,IAAI,2GAAA,CAAA,MAAG,CAAC,gBAAgB;IAC7D,iBAAiB;IAEjB,SAAS;IACT,uBAAuB,2GAAA,CAAA,MAAG,CAAC,0BAA0B;IACrD,wBAAwB,2GAAA,CAAA,MAAG,CAAC,kCAAkC;IAE9D,WAAW;IACX,uBAAuB,KAAK,KAAK,CAAC,2GAAA,CAAA,MAAG,CAAC,qBAAqB;IAE3D,SAAS;IACT,WAAW;QACP,SAAS,2GAAA,CAAA,MAAG,CAAC,sBAAsB;QACnC,aAAa,2GAAA,CAAA,MAAG,CAAC,qBAAqB;QACtC,UAAU,2GAAA,CAAA,MAAG,CAAC,kCAAkC;QAChD,eAAe,2GAAA,CAAA,MAAG,CAAC,6BAA6B;QAChD,YAAY,2GAAA,CAAA,MAAG,CAAC,8BAA8B;QAC9C,WAAW;IACf;IAEA,OAAO;IACP,OAAO;QACH,UAAU,2GAAA,CAAA,MAAG,CAAC,mBAAmB;QACjC,KAAK;IACT;IAEA,sBAAsB;IACtB,eAAe,CAAC;QACZ,OAAO,sHAAA,CAAA,UAAO,CAAC,OAAO,CAAC,QAAQ,CAAC;IACpC;IAEA,4BAA4B;IAC5B,uBAAuB,CAAC;QACpB,MAAM,MAAM,KAAK,KAAK,CAAC,2GAAA,CAAA,MAAG,CAAC,qBAAqB;QAChD,OAAO,GAAG,CAAC,QAAQ,IAAI;IAC3B;AAEJ","debugId":null}},
    {"offset": {"line": 290, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/config/api.config.ts"],"sourcesContent":["import { env } from '@/env.mjs';\n\n/**\n * API 相關配置\n */\nexport const API_CONFIG = {\n    // 基礎配置\n    BASE_URL: env.NEXT_PUBLIC_API_BASE_URL, // 前端 API 基礎網址\n    EXTERNAL_BASE_URL: env.EXTERNAL_API_BASE_URL,  // 外部後端 API\n    PROJECT_NAME: env.PROJECT_CODE, // 專案代碼名稱\n\n    // 超時設定\n    TIMEOUT: {\n        DEFAULT: env.API_TIMEOUT, // 一般 API 請求超時 (毫秒)\n        CONTENT: env.CONTENT_API_TIMEOUT, // 內容 API 請求超時 (毫秒)\n        GEO: env.GEO_API_TIMEOUT, // 地理位置 API 超時 (毫秒)\n    },\n\n    // 重試設定\n    RETRY: {\n        ATTEMPTS: 3, // 重試次數\n        DELAY: 1000, // 重試延遲 (毫秒)\n        EXPONENTIAL_BACKOFF: true, // 指數退避策略\n    },\n\n    // 模式設定\n    USE_MOCK: env.USE_MOCK_API, // Mock API 開關\n    LOGGING: env.API_LOGGING_ENABLED, // API 請求日誌記錄開關\n\n    // API 端點 - Mock 與正式版本統一管理\n    ENDPOINTS: {\n        // Mock API 端點 (Next.js API Routes)\n        MOCK: {\n            LANGUAGE: '/api/ssr/languages', // 語言資料端點\n            LOCALES: '/api/ssr/locales', // 地區設定端點\n            SYSTEM_MENUS: '/api/ssr/system-menus', // 系統選單端點\n            WEB_DATA: '/api/ssr/web-data', // 網站資料端點\n            DETAIL: '/api/ssr/detail', // 詳細資料端點\n        },\n\n        // 正式 API 端點 (外部後端)\n        EXTERNAL: {\n            LANGUAGE: '/api/v1/languages', // 語言資料端點\n            LOCALES: '/api/v1/locales', // 地區設定端點\n            SYSTEM_MENUS: '/api/v1/system-menus', // 系統選單端點\n            WEB_DATA: '/api/v1/web-data', // 網站資料端點\n            DETAIL: '/api/v1/detail', // 詳細資料端點\n        }\n    }\n} as const;"],"names":[],"mappings":";;;AAAA;;AAKO,MAAM,aAAa;IACtB,OAAO;IACP,UAAU,2GAAA,CAAA,MAAG,CAAC,wBAAwB;IACtC,mBAAmB,2GAAA,CAAA,MAAG,CAAC,qBAAqB;IAC5C,cAAc,2GAAA,CAAA,MAAG,CAAC,YAAY;IAE9B,OAAO;IACP,SAAS;QACL,SAAS,2GAAA,CAAA,MAAG,CAAC,WAAW;QACxB,SAAS,2GAAA,CAAA,MAAG,CAAC,mBAAmB;QAChC,KAAK,2GAAA,CAAA,MAAG,CAAC,eAAe;IAC5B;IAEA,OAAO;IACP,OAAO;QACH,UAAU;QACV,OAAO;QACP,qBAAqB;IACzB;IAEA,OAAO;IACP,UAAU,2GAAA,CAAA,MAAG,CAAC,YAAY;IAC1B,SAAS,2GAAA,CAAA,MAAG,CAAC,mBAAmB;IAEhC,0BAA0B;IAC1B,WAAW;QACP,mCAAmC;QACnC,MAAM;YACF,UAAU;YACV,SAAS;YACT,cAAc;YACd,UAAU;YACV,QAAQ;QACZ;QAEA,mBAAmB;QACnB,UAAU;YACN,UAAU;YACV,SAAS;YACT,cAAc;YACd,UAAU;YACV,QAAQ;QACZ;IACJ;AACJ","debugId":null}},
    {"offset": {"line": 339, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/config/cache.config.ts"],"sourcesContent":["/**\n * 快取系統配置檔案\n *\n * **主要職責**：\n * - 統一管理所有快取相關的配置設定\n * - 定義各種資料類型的快取策略（TTL、標籤、描述）\n * - 提供快取鍵值生成和標籤管理的輔助函數\n *\n * **配置內容**：\n * - **基礎設定**：快取開關、CDN協作、預設TTL、快取策略\n * - **Redis設定**：連線配置、鍵值前綴、分隔符號\n * - **資料類型**：8種快取資料類型的完整配置（語言、選單、頁面等）\n *\n * **提供功能**：\n * - 取得特定資料類型的快取配置、TTL、標籤\n * - 根據標籤查找相關的資料類型\n * - 生成統一格式的快取鍵值\n * - 快取配置摘要（用於除錯和監控）\n *\n * **設計特點**：\n * - 單一數據源：所有快取設定集中在 CACHE_DATA_TYPES\n * - 自動同步：TTL 和 TAGS 從主配置自動生成，避免不一致\n * - 類型安全：完整的 TypeScript 類型定義和推斷\n * - 易於維護：新增快取類型只需在一個地方定義\n */\n\nimport { env } from '@/env.mjs';\n\n/**\n * 快取資料類型定義 - 統一管理所有快取相關設定\n */\nconst CACHE_DATA_TYPES = {\n    LANGUAGES: {\n        ttl: 7200,  // 2小時\n        tags: ['languages', 'static-data'] as string[],\n        description: '語言資料快取'\n    },\n    LOCALES: {\n        ttl: 7200,  // 2小時\n        tags: ['locales', 'static-data'] as string[],\n        description: '地區設定快取'\n    },\n    MENUS: {\n        ttl: 3600,  // 1小時\n        tags: ['menus', 'navigation'] as string[],\n        description: '選單資料快取'\n    },\n    WEB_DATA: {\n        ttl: 3600,  // 1小時\n        tags: ['web-data', 'static-data'] as string[],\n        description: '網站資料快取'\n    },\n    PAGES: {\n        ttl: 1800,  // 30分鐘\n        tags: ['pages', 'content'] as string[],\n        description: '頁面內容快取'\n    },\n    GEO_DATA: {\n        ttl: 1800,  // 30分鐘\n        tags: ['geo-data', 'location'] as string[],\n        description: '地理位置資料快取'\n    },\n    USER_DATA: {\n        ttl: 600,   // 10分鐘\n        tags: ['user-data', 'dynamic-data'] as string[],\n        description: '使用者資料快取'\n    },\n    API_RESPONSE: {\n        ttl: env.CACHE_DEFAULT_TTL,\n        tags: ['api-response'] as string[],\n        description: 'API 回應快取'\n    },\n};\n\n/**\n * 快取相關配置\n */\nexport const CACHE_CONFIG = {\n    // 基礎配置\n    ENABLED: env.CACHE_ENABLED,\n    CDN_ENABLED: env.CACHE_CDN_ENABLED,\n    DEFAULT_TTL: env.CACHE_DEFAULT_TTL,\n    STRATEGY: env.I18N_CACHE_STRATEGY,\n\n    // Redis 配置\n    REDIS: {\n        URL: undefined,\n        PREFIX: 'minmax:',\n        KEY_SEPARATOR: ':',\n    },\n\n    // 從 CACHE_DATA_TYPES 自動生成 TTL 和 TAGS\n    TTL: {\n        LANGUAGES: CACHE_DATA_TYPES.LANGUAGES.ttl,\n        LOCALES: CACHE_DATA_TYPES.LOCALES.ttl,\n        MENUS: CACHE_DATA_TYPES.MENUS.ttl,\n        WEB_DATA: CACHE_DATA_TYPES.WEB_DATA.ttl,\n        PAGES: CACHE_DATA_TYPES.PAGES.ttl,\n        GEO_DATA: CACHE_DATA_TYPES.GEO_DATA.ttl,\n        USER_DATA: CACHE_DATA_TYPES.USER_DATA.ttl,\n        API_RESPONSE: CACHE_DATA_TYPES.API_RESPONSE.ttl,\n    },\n\n    TAGS: {\n        LANGUAGES: CACHE_DATA_TYPES.LANGUAGES.tags,\n        LOCALES: CACHE_DATA_TYPES.LOCALES.tags,\n        MENUS: CACHE_DATA_TYPES.MENUS.tags,\n        WEB_DATA: CACHE_DATA_TYPES.WEB_DATA.tags,\n        PAGES: CACHE_DATA_TYPES.PAGES.tags,\n        GEO_DATA: CACHE_DATA_TYPES.GEO_DATA.tags,\n        USER_DATA: CACHE_DATA_TYPES.USER_DATA.tags,\n        API_RESPONSE: CACHE_DATA_TYPES.API_RESPONSE.tags,\n    },\n\n    // 快取鍵值生成函數\n    generateKey: (type: CacheDataType, identifier: string, locale?: string): string => {\n        const parts = [CACHE_CONFIG.REDIS.PREFIX, type, identifier];\n        if (locale) parts.push(locale);\n        return parts.join(CACHE_CONFIG.REDIS.KEY_SEPARATOR);\n    },\n} as const;\n\n// 輔助函數\nexport type CacheDataType = keyof typeof CACHE_DATA_TYPES;\n\n/**\n * 取得指定資料類型的完整配置\n */\nexport function getCacheConfig(type: CacheDataType) {\n    return CACHE_DATA_TYPES[type];\n}\n\n/**\n * 取得指定資料類型的 TTL (毫秒)\n */\nexport function getCacheTTL(type: CacheDataType): number {\n    return CACHE_DATA_TYPES[type].ttl * 1000;\n}\n\n/**\n * 取得指定資料類型的標籤\n */\nexport function getCacheTags(type: CacheDataType): string[] {\n    return CACHE_DATA_TYPES[type].tags;\n}\n\n/**\n * 根據標籤找到相關的資料類型\n */\nexport function getDataTypesByTag(tag: string): CacheDataType[] {\n    return Object.entries(CACHE_DATA_TYPES)\n        .filter(([_, config]) => config.tags.includes(tag))\n        .map(([key]) => key as CacheDataType);\n}\n\n/**\n * 取得所有可用的標籤\n */\nexport function getAllCacheTags(): string[] {\n    const allTags = Object.values(CACHE_DATA_TYPES).flatMap(config => config.tags);\n    return [...new Set(allTags)];\n}\n\n/**\n * 取得快取配置摘要 (用於除錯)\n */\nexport function getCacheConfigSummary() {\n    return Object.entries(CACHE_DATA_TYPES).map(([type, config]) => ({\n        type,\n        ttl: `${config.ttl}s (${config.ttl / 60}min)`,\n        tags: config.tags.join(', '),\n        description: config.description\n    }));\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 515, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/config/index.ts"],"sourcesContent":["/**\n * 統一配置導出\n * 整合所有配置相關的設定\n */\n\n// 導出環境變數配置\nexport { env } from '../env.mjs';\n\n// 導出應用程式配置\nexport * from './app.config';\n\n// 導出語系配置\nexport * from './locale.config';\n\n// 導出 API 配置\nexport * from './api.config';\n\n// 導出快取配置\nexport * from './cache.config';"],"names":[],"mappings":"AAAA;;;CAGC,GAED,WAAW;;AACX;AAEA,WAAW;AACX;AAEA,SAAS;AACT;AAEA,YAAY;AACZ;AAEA,SAAS;AACT","debugId":null}},
    {"offset": {"line": 549, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/services/base/api-service.base.ts"],"sourcesContent":["import { API_CONFIG } from '@/config';\n\n/**\n * API 服務基底類別\n * 提供通用的 API 請求處理邏輯\n */\nexport abstract class BaseApiService {\n    protected readonly serviceName: string;\n\n    constructor(serviceName: string) {\n        this.serviceName = serviceName;\n    }\n\n    /**\n     * 通用的 API 請求方法\n     * @param endpoint 端點配置 { mock: string, external: string }\n     * @param options 額外的 fetch 選項\n     * @returns Promise<T>\n     */\n    protected async apiRequest<T>(\n        endpoint: { mock: string; external: string },\n        options: RequestInit = {}\n    ): Promise<T> {\n        const url = this.buildApiUrl(endpoint);\n\n        try {\n            this.logApiCall(url);\n\n            const response = await fetch(url, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    ...options.headers,\n                },\n                // 只有正式 API 需要超時設定\n                ...(API_CONFIG.USE_MOCK ? {} : {\n                    signal: AbortSignal.timeout(API_CONFIG.TIMEOUT.DEFAULT)\n                }),\n                ...options,\n            });\n\n            if (!response.ok) {\n                throw new Error(`${this.serviceName} API 請求失敗: ${response.status} ${response.statusText}`);\n            }\n\n            const apiResponse = await response.json();\n\n            // 處理 API 回應格式 { code, message, data }\n            const data = apiResponse.data || apiResponse; // 兼容不同的回應格式\n\n            this.logSuccess(data);\n\n            return data;\n        } catch (error) {\n            this.logError(error);\n            throw error;\n        }\n    }\n\n    /**\n     * 根據環境變數建構 API 網址\n     */\n    private buildApiUrl(endpoint: { mock: string; external: string }): string {\n        if (API_CONFIG.USE_MOCK) {\n            // Mock API - 使用內部 Next.js API Routes\n            return `${API_CONFIG.BASE_URL}${endpoint.mock}`;\n        } else {\n            // 正式 API - 使用外部後端 API\n            return `${API_CONFIG.EXTERNAL_BASE_URL}${endpoint.external}`;\n        }\n    }\n\n    /**\n     * 記錄 API 呼叫日誌\n     */\n    protected logApiCall(url: string): void {\n        console.log(`🌐 ${this.serviceName} API 呼叫: ${url} (Mock: ${API_CONFIG.USE_MOCK})`);\n    }\n\n    /**\n     * 記錄成功日誌 - 子類別可以覆寫自定義格式\n     */\n    protected logSuccess(data: any): void {\n        if (API_CONFIG.LOGGING) {\n            console.log(`✅ ${this.serviceName}資料載入成功`);\n        }\n    }\n\n    /**\n     * 記錄錯誤日誌\n     */\n    protected logError(error: any): void {\n        console.error(`❌ ${this.serviceName} API 呼叫失敗:`, error);\n    }\n}"],"names":[],"mappings":";;;AAAA;AAAA;;AAMO,MAAe;IACC,YAAoB;IAEvC,YAAY,WAAmB,CAAE;QAC7B,IAAI,CAAC,WAAW,GAAG;IACvB;IAEA;;;;;KAKC,GACD,MAAgB,WACZ,QAA4C,EAC5C,UAAuB,CAAC,CAAC,EACf;QACV,MAAM,MAAM,IAAI,CAAC,WAAW,CAAC;QAE7B,IAAI;YACA,IAAI,CAAC,UAAU,CAAC;YAEhB,MAAM,WAAW,MAAM,MAAM,KAAK;gBAC9B,QAAQ;gBACR,SAAS;oBACL,gBAAgB;oBAChB,GAAG,QAAQ,OAAO;gBACtB;gBACA,kBAAkB;gBAClB,GAAI,8HAAA,CAAA,aAAU,CAAC,QAAQ,GAAG,CAAC,IAAI;oBAC3B,QAAQ,YAAY,OAAO,CAAC,8HAAA,CAAA,aAAU,CAAC,OAAO,CAAC,OAAO;gBAC1D,CAAC;gBACD,GAAG,OAAO;YACd;YAEA,IAAI,CAAC,SAAS,EAAE,EAAE;gBACd,MAAM,IAAI,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,SAAS,MAAM,CAAC,CAAC,EAAE,SAAS,UAAU,EAAE;YAC7F;YAEA,MAAM,cAAc,MAAM,SAAS,IAAI;YAEvC,sCAAsC;YACtC,MAAM,OAAO,YAAY,IAAI,IAAI,aAAa,YAAY;YAE1D,IAAI,CAAC,UAAU,CAAC;YAEhB,OAAO;QACX,EAAE,OAAO,OAAO;YACZ,IAAI,CAAC,QAAQ,CAAC;YACd,MAAM;QACV;IACJ;IAEA;;KAEC,GACD,AAAQ,YAAY,QAA4C,EAAU;QACtE,IAAI,8HAAA,CAAA,aAAU,CAAC,QAAQ,EAAE;YACrB,qCAAqC;YACrC,OAAO,GAAG,8HAAA,CAAA,aAAU,CAAC,QAAQ,GAAG,SAAS,IAAI,EAAE;QACnD,OAAO;YACH,sBAAsB;YACtB,OAAO,GAAG,8HAAA,CAAA,aAAU,CAAC,iBAAiB,GAAG,SAAS,QAAQ,EAAE;QAChE;IACJ;IAEA;;KAEC,GACD,AAAU,WAAW,GAAW,EAAQ;QACpC,QAAQ,GAAG,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,IAAI,QAAQ,EAAE,8HAAA,CAAA,aAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;IACtF;IAEA;;KAEC,GACD,AAAU,WAAW,IAAS,EAAQ;QAClC,IAAI,8HAAA,CAAA,aAAU,CAAC,OAAO,EAAE;YACpB,QAAQ,GAAG,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;QAC7C;IACJ;IAEA;;KAEC,GACD,AAAU,SAAS,KAAU,EAAQ;QACjC,QAAQ,KAAK,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,EAAE;IACrD;AACJ","debugId":null}},
    {"offset": {"line": 627, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/services/language.service.ts"],"sourcesContent":["import { API_CONFIG } from '@/config';\nimport type { Language } from '@/types';\nimport { BaseApiService } from './base/api-service.base';\n\n/**\n * 支援語系服務 - 抽象化 API 呼叫\n * 根據環境變數自動切換 Mock 或正式 API\n */\nclass LanguageService extends BaseApiService {\n    constructor() {\n        super('支援語系');\n    }\n\n    /**\n     * 取得支援的語系清單\n     * @returns Promise<Language[]>\n     */\n    async getLanguages(): Promise<Language[]> {\n        const endpoint = {\n            mock: API_CONFIG.ENDPOINTS.MOCK.LANGUAGE,\n            external: API_CONFIG.ENDPOINTS.EXTERNAL.LANGUAGE\n        };\n\n        return this.apiRequest<Language[]>(endpoint);\n    }\n\n    /**\n     * 覆寫成功日誌，顯示語系數量\n     */\n    protected logSuccess(data: Language[]): void {\n        if (API_CONFIG.LOGGING) {\n            console.log(`✅ ${this.serviceName}資料載入成功:`, data.length, '個語系');\n        }\n    }\n}\n\n// 匯出單例實例\nexport const languageService = new LanguageService();"],"names":[],"mappings":";;;AAAA;AAAA;AAEA;;;AAEA;;;CAGC,GACD,MAAM,wBAAwB,iJAAA,CAAA,iBAAc;IACxC,aAAc;QACV,KAAK,CAAC;IACV;IAEA;;;KAGC,GACD,MAAM,eAAoC;QACtC,MAAM,WAAW;YACb,MAAM,8HAAA,CAAA,aAAU,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ;YACxC,UAAU,8HAAA,CAAA,aAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ;QACpD;QAEA,OAAO,IAAI,CAAC,UAAU,CAAa;IACvC;IAEA;;KAEC,GACD,AAAU,WAAW,IAAgB,EAAQ;QACzC,IAAI,8HAAA,CAAA,aAAU,CAAC,OAAO,EAAE;YACpB,QAAQ,GAAG,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE,KAAK,MAAM,EAAE;QAC7D;IACJ;AACJ;AAGO,MAAM,kBAAkB,IAAI","debugId":null}},
    {"offset": {"line": 665, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/services/locales.service.ts"],"sourcesContent":["import { API_CONFIG } from '@/config';\nimport { BaseApiService } from './base/api-service.base';\n\n// 定義 Locales 型別 (國家語系對照表)\ninterface CountryLocaleMapping {\n    [countryCode: string]: string; // 例如: { \"TW\": \"zh-TW\", \"US\": \"en-US\" }\n}\n\n/**\n * 國家語系對應服務 - 抽象化 API 呼叫\n * 根據環境變數自動切換 Mock 或正式 API\n */\nclass LocalesService extends BaseApiService {\n    constructor() {\n        super('國家語系對應');\n    }\n\n    /**\n     * 取得國家語系對照表\n     * @returns Promise<CountryLocaleMapping>\n     */\n    async getLocales(): Promise<CountryLocaleMapping> {\n        const endpoint = {\n            mock: API_CONFIG.ENDPOINTS.MOCK.LOCALES,\n            external: API_CONFIG.ENDPOINTS.EXTERNAL.LOCALES\n        };\n\n        return this.apiRequest<CountryLocaleMapping>(endpoint);\n    }\n\n    /**\n     * 根據國家代碼取得對應語系\n     * @param countryCode 國家代碼 (如 \"TW\", \"US\")\n     * @returns Promise<string | null>\n     */\n    async getLocaleByCountry(countryCode: string): Promise<string | null> {\n        try {\n            const locales = await this.getLocales();\n            return locales[countryCode] || null;\n        } catch (error) {\n            console.error(`❌ 無法取得國家 ${countryCode} 對應的語系:`, error);\n            return null;\n        }\n    }\n\n    /**\n     * 覆寫成功日誌，顯示國家數量\n     */\n    protected logSuccess(data: CountryLocaleMapping): void {\n        if (API_CONFIG.LOGGING) {\n            const countryCount = Object.keys(data).length;\n            console.log(`✅ ${this.serviceName}資料載入成功:`, countryCount, '個國家對照');\n        }\n    }\n}\n\n// 匯出單例實例\nexport const localesService = new LocalesService();"],"names":[],"mappings":";;;AAAA;AAAA;AACA;;;AAOA;;;CAGC,GACD,MAAM,uBAAuB,iJAAA,CAAA,iBAAc;IACvC,aAAc;QACV,KAAK,CAAC;IACV;IAEA;;;KAGC,GACD,MAAM,aAA4C;QAC9C,MAAM,WAAW;YACb,MAAM,8HAAA,CAAA,aAAU,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO;YACvC,UAAU,8HAAA,CAAA,aAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO;QACnD;QAEA,OAAO,IAAI,CAAC,UAAU,CAAuB;IACjD;IAEA;;;;KAIC,GACD,MAAM,mBAAmB,WAAmB,EAA0B;QAClE,IAAI;YACA,MAAM,UAAU,MAAM,IAAI,CAAC,UAAU;YACrC,OAAO,OAAO,CAAC,YAAY,IAAI;QACnC,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,CAAC,SAAS,EAAE,YAAY,OAAO,CAAC,EAAE;YAChD,OAAO;QACX;IACJ;IAEA;;KAEC,GACD,AAAU,WAAW,IAA0B,EAAQ;QACnD,IAAI,8HAAA,CAAA,aAAU,CAAC,OAAO,EAAE;YACpB,MAAM,eAAe,OAAO,IAAI,CAAC,MAAM,MAAM;YAC7C,QAAQ,GAAG,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE,cAAc;QAC9D;IACJ;AACJ;AAGO,MAAM,iBAAiB,IAAI","debugId":null}},
    {"offset": {"line": 717, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/services/i18n-integration.service.ts"],"sourcesContent":["import { languageService } from './language.service';\nimport { localesService } from './locales.service';\n\nimport { Language } from '@/types';\nimport { Locale} from '@/types';\nimport { routing } from '@/i18n/routing';\nimport { LOCALE_CONFIG } from '@/config';\n\nexport class I18nIntegrationService {\n    private static cachedLanguages: Language[] | null = null;\n    private static lastFetchTime: number = 0;\n\n    // 新增：國家→語系快取\n    private static cachedCountryLocaleMap: Locale | null = null;\n    private static lastLocalesFetchTime: number = 0;\n\n\n    /**\n     * 取得動態語系清單並快取\n     */\n    static async getLanguages(): Promise<Language[]> {\n        const now = Date.now();\n        const cacheExpiry = LOCALE_CONFIG.CACHE.TTL * 1000; // 轉為毫秒\n\n        // 檢查快取是否有效\n        if (this.cachedLanguages && (now - this.lastFetchTime) < cacheExpiry) {\n            return this.cachedLanguages;\n        }\n\n        try {\n            const languages = await languageService.getLanguages();\n            this.cachedLanguages = languages;\n            this.lastFetchTime = now;\n            return languages;\n        } catch (error) {\n            console.warn('📦 無法載入動態語系，使用靜態配置', error);\n            // 降級處理：返回靜態配置的語系\n            return this.getStaticFallbackLanguages();\n        }\n    }\n\n    /**\n     * 將 Language[] 轉換為 next-intl 需要的 locales 陣列\n     */\n    static async getSupportedLocales(): Promise<string[]> {\n        const languages = await this.getLanguages();\n        return languages.map(lang => lang.id);\n    }\n\n    /**\n     * 取得預設語系\n     */\n    static async getDefaultLocale(): Promise<string> {\n        const languages = await I18nIntegrationService.getLanguages();\n        const defaultLang = languages.find(lang => lang.default);\n        return defaultLang?.id || LOCALE_CONFIG.DEFAULT_LOCALE;\n    }\n    /**\n     * 國家→語系（SSR 可直接呼叫，帶記憶體快取）\n     */\n    static async getCountryLocaleMap(): Promise<Locale> {\n        const now = Date.now();\n        const cacheExpiry = LOCALE_CONFIG.CACHE.TTL * 1000;\n        if (this.cachedCountryLocaleMap && now - this.lastLocalesFetchTime < cacheExpiry) {\n            return this.cachedCountryLocaleMap;\n        }\n        const map = await localesService.getLocales();\n        this.cachedCountryLocaleMap = map;\n        this.lastLocalesFetchTime = now;\n        return map;\n    }\n\n    /**\n     * 靜態備援語系資料\n     */\n    /**\n     * 靜態備援語系資料\n     */\n    private static getStaticFallbackLanguages(): Language[] {\n        return routing.locales.map((locale, index) => ({\n            id: locale,\n            title: locale.toUpperCase(),\n            native: locale.toUpperCase(),\n            icon: '🌐',\n            default: locale === routing.defaultLocale\n        }));\n    }\n}"],"names":[],"mappings":";;;AAAA;AACA;AAIA;AACA;AAAA;;;;;AAEO,MAAM;IACT,OAAe,kBAAqC,KAAK;IACzD,OAAe,gBAAwB,EAAE;IAEzC,aAAa;IACb,OAAe,yBAAwC,KAAK;IAC5D,OAAe,uBAA+B,EAAE;IAGhD;;KAEC,GACD,aAAa,eAAoC;QAC7C,MAAM,MAAM,KAAK,GAAG;QACpB,MAAM,cAAc,iIAAA,CAAA,gBAAa,CAAC,KAAK,CAAC,GAAG,GAAG,MAAM,OAAO;QAE3D,WAAW;QACX,IAAI,IAAI,CAAC,eAAe,IAAI,AAAC,MAAM,IAAI,CAAC,aAAa,GAAI,aAAa;YAClE,OAAO,IAAI,CAAC,eAAe;QAC/B;QAEA,IAAI;YACA,MAAM,YAAY,MAAM,sIAAA,CAAA,kBAAe,CAAC,YAAY;YACpD,IAAI,CAAC,eAAe,GAAG;YACvB,IAAI,CAAC,aAAa,GAAG;YACrB,OAAO;QACX,EAAE,OAAO,OAAO;YACZ,QAAQ,IAAI,CAAC,sBAAsB;YACnC,iBAAiB;YACjB,OAAO,IAAI,CAAC,0BAA0B;QAC1C;IACJ;IAEA;;KAEC,GACD,aAAa,sBAAyC;QAClD,MAAM,YAAY,MAAM,IAAI,CAAC,YAAY;QACzC,OAAO,UAAU,GAAG,CAAC,CAAA,OAAQ,KAAK,EAAE;IACxC;IAEA;;KAEC,GACD,aAAa,mBAAoC;QAC7C,MAAM,YAAY,MAAM,uBAAuB,YAAY;QAC3D,MAAM,cAAc,UAAU,IAAI,CAAC,CAAA,OAAQ,KAAK,OAAO;QACvD,OAAO,aAAa,MAAM,iIAAA,CAAA,gBAAa,CAAC,cAAc;IAC1D;IACA;;KAEC,GACD,aAAa,sBAAuC;QAChD,MAAM,MAAM,KAAK,GAAG;QACpB,MAAM,cAAc,iIAAA,CAAA,gBAAa,CAAC,KAAK,CAAC,GAAG,GAAG;QAC9C,IAAI,IAAI,CAAC,sBAAsB,IAAI,MAAM,IAAI,CAAC,oBAAoB,GAAG,aAAa;YAC9E,OAAO,IAAI,CAAC,sBAAsB;QACtC;QACA,MAAM,MAAM,MAAM,qIAAA,CAAA,iBAAc,CAAC,UAAU;QAC3C,IAAI,CAAC,sBAAsB,GAAG;QAC9B,IAAI,CAAC,oBAAoB,GAAG;QAC5B,OAAO;IACX;IAEA;;KAEC,GACD;;KAEC,GACD,OAAe,6BAAyC;QACpD,OAAO,sHAAA,CAAA,UAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,QAAQ,QAAU,CAAC;gBAC3C,IAAI;gBACJ,OAAO,OAAO,WAAW;gBACzB,QAAQ,OAAO,WAAW;gBAC1B,MAAM;gBACN,SAAS,WAAW,sHAAA,CAAA,UAAO,CAAC,aAAa;YAC7C,CAAC;IACL;AACJ","debugId":null}},
    {"offset": {"line": 799, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/i18n/request.ts"],"sourcesContent":["import {getRequestConfig} from 'next-intl/server';\nimport {cookies} from 'next/headers';\nimport {routing} from './routing';\nimport {I18nIntegrationService} from '@/services/i18n-integration.service';\nimport {LOCALE_CONFIG} from '@/config';\n\nexport default getRequestConfig(async ({requestLocale}) => {\n    const requested = await requestLocale;\n\n    // 1) 取得動態有效語系與動態預設語系（內含快取）\n    let supportedLocales: string[] = [];\n    let dynamicDefaultLocale: string = routing.defaultLocale;\n\n    try {\n        supportedLocales = await I18nIntegrationService.getSupportedLocales();\n        dynamicDefaultLocale = await I18nIntegrationService.getDefaultLocale();\n    } catch (e) {\n        // 動態載入失敗時，使用 routing 的靜態預設作為兜底\n        console.warn('⚠️ 載入動態 locales 失敗，使用靜態 routing 作為兜底', e);\n        supportedLocales = [...routing.locales]; // Create a mutable copy\n        dynamicDefaultLocale = routing.defaultLocale;\n    }\n\n    // 2) 依優先序決定候選語系：URL → Cookie → 動態預設 → 靜態預設\n    const cookieStore = await cookies();\n    const cookieLocale = cookieStore.get('NEXT_LOCALE')?.value;\n    const candidate =\n        requested ||\n        (LOCALE_CONFIG.DETECTION.ENABLED ? cookieLocale : undefined) ||\n        dynamicDefaultLocale ||\n        routing.defaultLocale;\n\n    // 3) 嚴格以 supportedLocales 驗證，非法則回退至 dynamicDefault → routing.defaultLocale\n    const isValid = supportedLocales.includes(candidate);\n    const locale = isValid\n        ? candidate\n        : (supportedLocales.includes(dynamicDefaultLocale)\n            ? dynamicDefaultLocale\n            : routing.defaultLocale);\n\n    // 4) 載入對應 messages，失敗時回退到 default messages\n    let messages: Record<string, unknown>;\n    try {\n        messages = (await import(`../../messages/${locale}.json`)).default;\n    } catch (e) {\n        console.warn(`⚠️ 找不到 ${locale}.json，回退至 ${routing.defaultLocale}.json`, e);\n        messages = (await import(`../../messages/${routing.defaultLocale}.json`)).default;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n        console.log(`🌍 語系決策: requested=${requested} cookie=${cookieLocale} final=${locale}`);\n    }\n\n    return {\n        locale,\n        messages\n    };\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AAAA;;;;;;uCAEe,CAAA,GAAA,0PAAA,CAAA,mBAAgB,AAAD,EAAE,OAAO,EAAC,aAAa,EAAC;IAClD,MAAM,YAAY,MAAM;IAExB,2BAA2B;IAC3B,IAAI,mBAA6B,EAAE;IACnC,IAAI,uBAA+B,sHAAA,CAAA,UAAO,CAAC,aAAa;IAExD,IAAI;QACA,mBAAmB,MAAM,iJAAA,CAAA,yBAAsB,CAAC,mBAAmB;QACnE,uBAAuB,MAAM,iJAAA,CAAA,yBAAsB,CAAC,gBAAgB;IACxE,EAAE,OAAO,GAAG;QACR,+BAA+B;QAC/B,QAAQ,IAAI,CAAC,wCAAwC;QACrD,mBAAmB;eAAI,sHAAA,CAAA,UAAO,CAAC,OAAO;SAAC,EAAE,wBAAwB;QACjE,uBAAuB,sHAAA,CAAA,UAAO,CAAC,aAAa;IAChD;IAEA,2CAA2C;IAC3C,MAAM,cAAc,MAAM,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD;IAChC,MAAM,eAAe,YAAY,GAAG,CAAC,gBAAgB;IACrD,MAAM,YACF,aACA,CAAC,iIAAA,CAAA,gBAAa,CAAC,SAAS,CAAC,OAAO,GAAG,eAAe,SAAS,KAC3D,wBACA,sHAAA,CAAA,UAAO,CAAC,aAAa;IAEzB,2EAA2E;IAC3E,MAAM,UAAU,iBAAiB,QAAQ,CAAC;IAC1C,MAAM,SAAS,UACT,YACC,iBAAiB,QAAQ,CAAC,wBACvB,uBACA,sHAAA,CAAA,UAAO,CAAC,aAAa;IAE/B,2CAA2C;IAC3C,IAAI;IACJ,IAAI;QACA,WAAW,CAAC;;;;;;;;;;;;;;;;;kBAAa,CAAC,eAAe,EAAE,OAAO,KAAK,CAAC,CAAC,EAAE,OAAO;IACtE,EAAE,OAAO,GAAG;QACR,QAAQ,IAAI,CAAC,CAAC,OAAO,EAAE,OAAO,UAAU,EAAE,sHAAA,CAAA,UAAO,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE;QACxE,WAAW,CAAC;;;;;;;;;;;;;;;;;kBAAa,CAAC,eAAe,EAAE,sHAAA,CAAA,UAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,OAAO;IACrF;IAEA,wCAA2C;QACvC,QAAQ,GAAG,CAAC,CAAC,mBAAmB,EAAE,UAAU,QAAQ,EAAE,aAAa,OAAO,EAAE,QAAQ;IACxF;IAEA,OAAO;QACH;QACA;IACJ;AACJ","debugId":null}},
    {"offset": {"line": 889, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/geist_e531dabc.module.css [app-rsc] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"className\": \"geist_e531dabc-module__QGiZLq__className\",\n  \"variable\": \"geist_e531dabc-module__QGiZLq__variable\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA","ignoreList":[0]}},
    {"offset": {"line": 897, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/geist_e531dabc.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22layout.tsx%22,%22import%22:%22Geist%22,%22arguments%22:[{%22variable%22:%22--font-geist-sans%22,%22subsets%22:[%22latin%22]}],%22variableName%22:%22geistSans%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Geist', 'Geist Fallback'\",\n        fontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,WAAW;IACb,WAAW,qJAAA,CAAA,UAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,WAAW;IAEf;AACJ;AAEA,IAAI,qJAAA,CAAA,UAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,qJAAA,CAAA,UAAS,CAAC,QAAQ;AAC1C;uCAEe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 916, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/geist_mono_68a01160.module.css [app-rsc] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"className\": \"geist_mono_68a01160-module__YLcDdW__className\",\n  \"variable\": \"geist_mono_68a01160-module__YLcDdW__variable\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA","ignoreList":[0]}},
    {"offset": {"line": 924, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/geist_mono_68a01160.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22layout.tsx%22,%22import%22:%22Geist_Mono%22,%22arguments%22:[{%22variable%22:%22--font-geist-mono%22,%22subsets%22:[%22latin%22]}],%22variableName%22:%22geistMono%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Geist Mono', 'Geist Mono Fallback'\",\n        fontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,WAAW;IACb,WAAW,0JAAA,CAAA,UAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,WAAW;IAEf;AACJ;AAEA,IAAI,0JAAA,CAAA,UAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,0JAAA,CAAA,UAAS,CAAC,QAAQ;AAC1C;uCAEe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 944, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/lib/seo-utils.ts"],"sourcesContent":["import { headers } from 'next/headers';\nimport type { Language } from '@/types';\n\n/**\n * 生成當前頁面的 hreflang 連結\n */\nexport async function generateHrefLangLinks(\n    languages: Language[],\n    currentLocale: string\n): Promise<Array<{ hrefLang: string; href: string }>> {\n    const headersList = await headers();\n    const pathname = headersList.get('x-pathname') || '/';\n    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'https://yourwebsite.com';\n\n    // 移除當前語系前綴，取得基底路徑\n    const basePath = pathname.replace(new RegExp(`^/${currentLocale}`), '') || '/';\n\n    // 為每個語系生成完整 URL\n    const hrefLangLinks = languages.map(lang => ({\n        hrefLang: lang.id,\n        href: `${baseUrl}/${lang.id}${basePath === '/' ? '' : basePath}`\n    }));\n\n    // 添加 x-default\n    const defaultLanguage = languages.find(lang => lang.default);\n    if (defaultLanguage) {\n        hrefLangLinks.push({\n            hrefLang: 'x-default',\n            href: `${baseUrl}${basePath === '/' ? '' : basePath}`\n        });\n    }\n\n    return hrefLangLinks;\n}\n\n/**\n * 生成多語言結構化資料\n */\nexport function generateMultilingualStructuredData(\n    languages: Language[],\n    currentLocale: string,\n    currentUrl: string\n) {\n    return {\n        \"@context\": \"https://schema.org\",\n        \"@type\": \"WebPage\",\n        \"inLanguage\": currentLocale,\n        \"url\": currentUrl,\n        \"availableLanguage\": languages.map(lang => ({\n            \"@type\": \"Language\",\n            \"name\": lang.title,\n            \"alternateName\": lang.native,\n            \"identifier\": lang.id\n        }))\n    };\n}\n\n\n"],"names":[],"mappings":";;;;AAAA;;AAMO,eAAe,sBAClB,SAAqB,EACrB,aAAqB;IAErB,MAAM,cAAc,MAAM,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD;IAChC,MAAM,WAAW,YAAY,GAAG,CAAC,iBAAiB;IAClD,MAAM,UAAU,QAAQ,GAAG,CAAC,oBAAoB,IAAI;IAEpD,kBAAkB;IAClB,MAAM,WAAW,SAAS,OAAO,CAAC,IAAI,OAAO,CAAC,EAAE,EAAE,eAAe,GAAG,OAAO;IAE3E,gBAAgB;IAChB,MAAM,gBAAgB,UAAU,GAAG,CAAC,CAAA,OAAQ,CAAC;YACzC,UAAU,KAAK,EAAE;YACjB,MAAM,GAAG,QAAQ,CAAC,EAAE,KAAK,EAAE,GAAG,aAAa,MAAM,KAAK,UAAU;QACpE,CAAC;IAED,eAAe;IACf,MAAM,kBAAkB,UAAU,IAAI,CAAC,CAAA,OAAQ,KAAK,OAAO;IAC3D,IAAI,iBAAiB;QACjB,cAAc,IAAI,CAAC;YACf,UAAU;YACV,MAAM,GAAG,UAAU,aAAa,MAAM,KAAK,UAAU;QACzD;IACJ;IAEA,OAAO;AACX;AAKO,SAAS,mCACZ,SAAqB,EACrB,aAAqB,EACrB,UAAkB;IAElB,OAAO;QACH,YAAY;QACZ,SAAS;QACT,cAAc;QACd,OAAO;QACP,qBAAqB,UAAU,GAAG,CAAC,CAAA,OAAQ,CAAC;gBACxC,SAAS;gBACT,QAAQ,KAAK,KAAK;gBAClB,iBAAiB,KAAK,MAAM;gBAC5B,cAAc,KAAK,EAAE;YACzB,CAAC;IACL;AACJ","debugId":null}},
    {"offset": {"line": 989, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/i18n/navigation.ts"],"sourcesContent":["import {createNavigation} from 'next-intl/navigation';\nimport {routing} from './routing';\n\n//這是在 Next.js 導航 API 基礎上，考量到路由設定的輕量級封裝。\nexport const {Link, redirect, usePathname, useRouter, getPathname} =\n    createNavigation(routing);\n"],"names":[],"mappings":";;;;;;;AAAA;AACA;;;AAGO,MAAM,EAAC,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,EAAC,GAC9D,CAAA,GAAA,8PAAA,CAAA,mBAAgB,AAAD,EAAE,sHAAA,CAAA,UAAO","debugId":null}},
    {"offset": {"line": 1005, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/lib/cache/types.ts"],"sourcesContent":["// src/lib/cache/types.ts\nexport type CacheSetOptions = {\n    ttl?: number;      // 秒\n    tags?: string[];   // 標籤，用於清除\n};\n\nexport interface CacheAdapter {\n    get<T>(key: string): Promise<T | null>;\n    set<T>(key: string, value: T, options?: CacheSetOptions): Promise<void>;\n    del(key: string): Promise<void>;\n    delByTag(tag: string): Promise<void>;\n    clear(): Promise<void>;\n}"],"names":[],"mappings":"AAAA,yBAAyB","debugId":null}},
    {"offset": {"line": 1012, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/lib/cache/memory-adapter.ts"],"sourcesContent":["// src/lib/cache/memory-adapter.ts 記憶體快取實作（Map + TTL + Tag 索引）\nimport type { CacheAdapter, CacheSetOptions } from './types';\n\ntype StoreItem = {\n    value: unknown;\n    expireAt?: number;      // ms\n    tags: Set<string>;\n};\n\nexport class MemoryCacheAdapter implements CacheAdapter {\n    private store = new Map<string, StoreItem>();\n    private tagIndex = new Map<string, Set<string>>();\n\n    async get<T>(key: string): Promise<T | null> {\n        const item = this.store.get(key);\n        if (!item) return null;\n        if (item.expireAt && Date.now() > item.expireAt) {\n            this.evict(key, item);\n            return null;\n        }\n        return item.value as T;\n    }\n\n    async set<T>(key: string, value: T, options?: CacheSetOptions): Promise<void> {\n        const ttlSec = options?.ttl ?? 0;\n        const expireAt = ttlSec > 0 ? Date.now() + ttlSec * 1000 : undefined;\n        const tags = new Set(options?.tags ?? []);\n        const old = this.store.get(key);\n        if (old) this.unindexTags(key, old.tags);\n        this.store.set(key, { value, expireAt, tags });\n        this.indexTags(key, tags);\n    }\n\n    async del(key: string): Promise<void> {\n        const item = this.store.get(key);\n        if (!item) return;\n        this.unindexTags(key, item.tags);\n        this.store.delete(key);\n    }\n\n    async delByTag(tag: string): Promise<void> {\n        const keys = this.tagIndex.get(tag);\n        if (!keys) return;\n        for (const key of keys) {\n            const item = this.store.get(key);\n            if (!item) continue;\n            this.unindexTags(key, item.tags);\n            this.store.delete(key);\n        }\n        this.tagIndex.delete(tag);\n    }\n\n    async clear(): Promise<void> {\n        this.store.clear();\n        this.tagIndex.clear();\n    }\n\n    private evict(key: string, item: StoreItem) {\n        this.unindexTags(key, item.tags);\n        this.store.delete(key);\n    }\n\n    private indexTags(key: string, tags: Set<string>) {\n        for (const tag of tags) {\n            if (!this.tagIndex.has(tag)) this.tagIndex.set(tag, new Set());\n            this.tagIndex.get(tag)!.add(key);\n        }\n    }\n\n    private unindexTags(key: string, tags: Set<string>) {\n        for (const tag of tags) {\n            const set = this.tagIndex.get(tag);\n            if (!set) continue;\n            set.delete(key);\n            if (set.size === 0) this.tagIndex.delete(tag);\n        }\n    }\n}"],"names":[],"mappings":"AAAA,8DAA8D;;;;AASvD,MAAM;IACD,QAAQ,IAAI,MAAyB;IACrC,WAAW,IAAI,MAA2B;IAElD,MAAM,IAAO,GAAW,EAAqB;QACzC,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;QAC5B,IAAI,CAAC,MAAM,OAAO;QAClB,IAAI,KAAK,QAAQ,IAAI,KAAK,GAAG,KAAK,KAAK,QAAQ,EAAE;YAC7C,IAAI,CAAC,KAAK,CAAC,KAAK;YAChB,OAAO;QACX;QACA,OAAO,KAAK,KAAK;IACrB;IAEA,MAAM,IAAO,GAAW,EAAE,KAAQ,EAAE,OAAyB,EAAiB;QAC1E,MAAM,SAAS,SAAS,OAAO;QAC/B,MAAM,WAAW,SAAS,IAAI,KAAK,GAAG,KAAK,SAAS,OAAO;QAC3D,MAAM,OAAO,IAAI,IAAI,SAAS,QAAQ,EAAE;QACxC,MAAM,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;QAC3B,IAAI,KAAK,IAAI,CAAC,WAAW,CAAC,KAAK,IAAI,IAAI;QACvC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK;YAAE;YAAO;YAAU;QAAK;QAC5C,IAAI,CAAC,SAAS,CAAC,KAAK;IACxB;IAEA,MAAM,IAAI,GAAW,EAAiB;QAClC,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;QAC5B,IAAI,CAAC,MAAM;QACX,IAAI,CAAC,WAAW,CAAC,KAAK,KAAK,IAAI;QAC/B,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;IACtB;IAEA,MAAM,SAAS,GAAW,EAAiB;QACvC,MAAM,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC;QAC/B,IAAI,CAAC,MAAM;QACX,KAAK,MAAM,OAAO,KAAM;YACpB,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;YAC5B,IAAI,CAAC,MAAM;YACX,IAAI,CAAC,WAAW,CAAC,KAAK,KAAK,IAAI;YAC/B,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QACtB;QACA,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;IACzB;IAEA,MAAM,QAAuB;QACzB,IAAI,CAAC,KAAK,CAAC,KAAK;QAChB,IAAI,CAAC,QAAQ,CAAC,KAAK;IACvB;IAEQ,MAAM,GAAW,EAAE,IAAe,EAAE;QACxC,IAAI,CAAC,WAAW,CAAC,KAAK,KAAK,IAAI;QAC/B,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;IACtB;IAEQ,UAAU,GAAW,EAAE,IAAiB,EAAE;QAC9C,KAAK,MAAM,OAAO,KAAM;YACpB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,IAAI;YACxD,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAM,GAAG,CAAC;QAChC;IACJ;IAEQ,YAAY,GAAW,EAAE,IAAiB,EAAE;QAChD,KAAK,MAAM,OAAO,KAAM;YACpB,MAAM,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC;YAC9B,IAAI,CAAC,KAAK;YACV,IAAI,MAAM,CAAC;YACX,IAAI,IAAI,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;QAC7C;IACJ;AACJ","debugId":null}},
    {"offset": {"line": 1085, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/lib/cache/factory.ts"],"sourcesContent":["// src/lib/cache/factory.ts\nimport { MemoryCacheAdapter } from './memory-adapter';\nimport type { CacheAdapter } from './types';\nimport { CACHE_CONFIG } from '@/config';\n\nlet singleton: CacheAdapter | null = null;\n\nexport function getCacheAdapter(): CacheAdapter {\n    if (singleton) return singleton;\n\n    const strategy = CACHE_CONFIG.STRATEGY; // 'memory' | 'redis' | 'none'\n    if (strategy === 'memory') {\n        singleton = new MemoryCacheAdapter();\n    } else if (strategy === 'redis') {\n        // TODO: 之後接 RedisAdapter\n        singleton = new MemoryCacheAdapter();\n        // 可先以記憶體代替，待接線時替換\n    } else {\n        // none：回傳最小 no-op adapter\n        singleton = {\n            async get() { return null; },\n            async set() { /* no-op */ },\n            async del() { /* no-op */ },\n            async delByTag() { /* no-op */ },\n            async clear() { /* no-op */ }\n        };\n    }\n    return singleton;\n}"],"names":[],"mappings":"AAAA,2BAA2B;;;;AAC3B;AAEA;AAAA;;;AAEA,IAAI,YAAiC;AAE9B,SAAS;IACZ,IAAI,WAAW,OAAO;IAEtB,MAAM,WAAW,gIAAA,CAAA,eAAY,CAAC,QAAQ,EAAE,8BAA8B;IACtE,IAAI,aAAa,UAAU;QACvB,YAAY,IAAI,wIAAA,CAAA,qBAAkB;IACtC,OAAO,IAAI,aAAa,SAAS;QAC7B,yBAAyB;QACzB,YAAY,IAAI,wIAAA,CAAA,qBAAkB;IAClC,kBAAkB;IACtB,OAAO;QACH,0BAA0B;QAC1B,YAAY;YACR,MAAM;gBAAQ,OAAO;YAAM;YAC3B,MAAM,QAAoB;YAC1B,MAAM,QAAoB;YAC1B,MAAM,aAAyB;YAC/B,MAAM,UAAsB;QAChC;IACJ;IACA,OAAO;AACX","debugId":null}},
    {"offset": {"line": 1122, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/lib/cache/index.ts"],"sourcesContent":["// src/lib/cache/index.ts\nexport * from './types';\nexport { getCacheAdapter } from './factory';"],"names":[],"mappings":"AAAA,yBAAyB;;AACzB;AACA","debugId":null}},
    {"offset": {"line": 1140, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/lib/language.cache.ts"],"sourcesContent":["// src/features/language/infrastructure/language.cache.ts\nimport { getCacheAdapter } from '@/lib/cache';\nimport { CACHE_CONFIG } from '@/config';\nimport type { Language } from '@/types';\n\nconst adapter = getCacheAdapter();\n\nconst KEY = CACHE_CONFIG.generateKey('LANGUAGES', 'list');\nconst TTL = CACHE_CONFIG.TTL.LANGUAGES;\nconst TAGS = CACHE_CONFIG.TAGS.LANGUAGES;\n\nexport async function getLanguagesCache(): Promise<Language[] | null> {\n    return adapter.get<Language[]>(KEY);\n}\n\nexport async function setLanguagesCache(data: Language[]): Promise<void> {\n    await adapter.set(KEY, data, { ttl: TTL, tags: TAGS });\n}\n\nexport async function clearLanguagesCache(): Promise<void> {\n    await adapter.del(KEY);\n}\n\n// 若之後要清除整個類別：adapter.delByTag('languages')"],"names":[],"mappings":"AAAA,yDAAyD;;;;;;AACzD;AAAA;AACA;AAAA;;;AAGA,MAAM,UAAU,CAAA,GAAA,8HAAA,CAAA,kBAAe,AAAD;AAE9B,MAAM,MAAM,gIAAA,CAAA,eAAY,CAAC,WAAW,CAAC,aAAa;AAClD,MAAM,MAAM,gIAAA,CAAA,eAAY,CAAC,GAAG,CAAC,SAAS;AACtC,MAAM,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,SAAS;AAEjC,eAAe;IAClB,OAAO,QAAQ,GAAG,CAAa;AACnC;AAEO,eAAe,kBAAkB,IAAgB;IACpD,MAAM,QAAQ,GAAG,CAAC,KAAK,MAAM;QAAE,KAAK;QAAK,MAAM;IAAK;AACxD;AAEO,eAAe;IAClB,MAAM,QAAQ,GAAG,CAAC;AACtB,EAEA,2CAA2C","debugId":null}},
    {"offset": {"line": 1172, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/services/language.repository.ts"],"sourcesContent":["// src/features/language/application/language.repository.ts\nimport { languageService } from '@/services/language.service';\nimport { getLanguagesCache, setLanguagesCache } from '@/features/language/lib/language.cache';\nimport type { Language } from '@/types';\n\nexport class LanguageRepository {\n    async getLanguages(): Promise<Language[]> {\n        const cached = await getLanguagesCache();\n        if (cached) return cached;\n\n        const data = await languageService.getLanguages();\n        await setLanguagesCache(data);\n        return data;\n    }\n\n    async refreshLanguages(): Promise<Language[]> {\n        const data = await languageService.getLanguages();\n        await setLanguagesCache(data);\n        return data;\n    }\n}\n\nexport const languageRepository = new LanguageRepository();"],"names":[],"mappings":"AAAA,2DAA2D;;;;;AAC3D;AACA;;;AAGO,MAAM;IACT,MAAM,eAAoC;QACtC,MAAM,SAAS,MAAM,CAAA,GAAA,uJAAA,CAAA,oBAAiB,AAAD;QACrC,IAAI,QAAQ,OAAO;QAEnB,MAAM,OAAO,MAAM,sIAAA,CAAA,kBAAe,CAAC,YAAY;QAC/C,MAAM,CAAA,GAAA,uJAAA,CAAA,oBAAiB,AAAD,EAAE;QACxB,OAAO;IACX;IAEA,MAAM,mBAAwC;QAC1C,MAAM,OAAO,MAAM,sIAAA,CAAA,kBAAe,CAAC,YAAY;QAC/C,MAAM,CAAA,GAAA,uJAAA,CAAA,oBAAiB,AAAD,EAAE;QACxB,OAAO;IACX;AACJ;AAEO,MAAM,qBAAqB,IAAI","debugId":null}},
    {"offset": {"line": 1200, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/services/index.ts"],"sourcesContent":["export * from './language.repository';"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 1214, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/components/LanguageSwitcher.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/features/language/components/LanguageSwitcher.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/features/language/components/LanguageSwitcher.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAyT,GACtV,uFACA","debugId":null}},
    {"offset": {"line": 1226, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/components/LanguageSwitcher.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/features/language/components/LanguageSwitcher.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/features/language/components/LanguageSwitcher.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAqS,GAClU,mEACA","debugId":null}},
    {"offset": {"line": 1238, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 1246, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/components/LanguageSwitcherContainer.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/features/language/components/LanguageSwitcherContainer.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/features/language/components/LanguageSwitcherContainer.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAkU,GAC/V,gGACA","debugId":null}},
    {"offset": {"line": 1258, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/components/LanguageSwitcherContainer.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/features/language/components/LanguageSwitcherContainer.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/features/language/components/LanguageSwitcherContainer.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA8S,GAC3U,4EACA","debugId":null}},
    {"offset": {"line": 1270, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 1278, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/hooks/useLanguageSwitcher.ts/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const useLanguageSwitcher = registerClientReference(\n    function() { throw new Error(\"Attempted to call useLanguageSwitcher() from the server but useLanguageSwitcher is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/features/language/hooks/useLanguageSwitcher.ts <module evaluation>\",\n    \"useLanguageSwitcher\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,sBAAsB,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACrD;IAAa,MAAM,IAAI,MAAM;AAAsP,GACnR,oFACA","debugId":null}},
    {"offset": {"line": 1290, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/hooks/useLanguageSwitcher.ts/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const useLanguageSwitcher = registerClientReference(\n    function() { throw new Error(\"Attempted to call useLanguageSwitcher() from the server but useLanguageSwitcher is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/features/language/hooks/useLanguageSwitcher.ts\",\n    \"useLanguageSwitcher\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,sBAAsB,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACrD;IAAa,MAAM,IAAI,MAAM;AAAsP,GACnR,gEACA","debugId":null}},
    {"offset": {"line": 1302, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 1310, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/hooks/index.ts"],"sourcesContent":["export { useLanguageSwitcher } from './useLanguageSwitcher';"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 1324, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/lib/getLanguagesForSSR.ts"],"sourcesContent":["import { languageRepository } from '../services';\nimport type { Language } from '@/types';\n\n\nexport async function getLanguagesForSSR(): Promise<Language[]> {\n    return languageRepository.getLanguages();\n}"],"names":[],"mappings":";;;AAAA;AAAA;;AAIO,eAAe;IAClB,OAAO,iKAAA,CAAA,qBAAkB,CAAC,YAAY;AAC1C","debugId":null}},
    {"offset": {"line": 1337, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/index.ts"],"sourcesContent":["//  對外匯出整合（barrel）\nexport * from './services';       // 子 barrel，會指向 ./services/index.ts\nexport { default as LanguageSwitcher } from './components/LanguageSwitcher';\nexport { default as LanguageSwitcherContainer } from './components/LanguageSwitcherContainer';\nexport { useLanguageSwitcher } from './hooks';\nexport { getLanguagesForSSR } from './lib/getLanguagesForSSR';"],"names":[],"mappings":"AAAA,kBAAkB;;AAClB,4SAAkC,mCAAmC;AACrE;AACA;AACA;AACA","debugId":null}},
    {"offset": {"line": 1372, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/components/layout/Header.tsx"],"sourcesContent":["import React from 'react';\nimport { getTranslations } from 'next-intl/server';\nimport { Link } from '@/i18n/navigation';\nimport { I18nIntegrationService } from '@/services/i18n-integration.service';\nimport { LanguageSwitcherContainer } from '@/features/language';\n\n\nexport default async function Header() {\n    // 靜態渲染的翻譯資料\n    const t = await getTranslations('navigation');\n    const languages = await I18nIntegrationService.getLanguages();\n    const locales = await I18nIntegrationService.getCountryLocaleMap();\n    return (\n        <header className=\"w-full border-b bg-white/70 backdrop-blur supports-[backdrop-filter]:bg-white/60\">\n            <div>\n                <h2>頁面</h2>\n                <nav className=\"flex gap-3\">\n                    <Link href=\"/\">{t('home')}</Link>\n                    <Link href=\"/about\">{t('about')}</Link>\n                    <Link href=\"/contact\">{t('contact')}</Link>\n                </nav>\n            </div>\n            <div>\n                <h2>支援的語系清單</h2>\n                <nav className=\"flex gap-3\">\n                    {languages.map(lang => (\n                        <Link href={`/${lang.id}`} key={lang.id} title={lang.id}>\n                            {lang.title}\n                        </Link>\n                    ))}\n                </nav>\n\n                {/* 傳遞語言資料給容器組件 */}\n                <LanguageSwitcherContainer\n                    className=\"mb-6\"\n                    variant=\"inline\"\n                    languages={languages}\n                />\n            </div>\n            <div>\n                <h2>國家預設語系</h2>\n                <ul className=\"flex gap-3\">\n                    {Object.entries(locales).map(([countryCode, locale]) => (\n                        <li key={countryCode}>\n                            {countryCode} : {locale}\n                        </li>\n                    ))}\n                </ul>\n            </div>\n        </header>\n    );\n}"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA;AAAA;;;;;;AAGe,eAAe;IAC1B,YAAY;IACZ,MAAM,IAAI,MAAM,CAAA,GAAA,wPAAA,CAAA,kBAAe,AAAD,EAAE;IAChC,MAAM,YAAY,MAAM,iJAAA,CAAA,yBAAsB,CAAC,YAAY;IAC3D,MAAM,UAAU,MAAM,iJAAA,CAAA,yBAAsB,CAAC,mBAAmB;IAChE,qBACI,8OAAC;QAAO,WAAU;;0BACd,8OAAC;;kCACG,8OAAC;kCAAG;;;;;;kCACJ,8OAAC;wBAAI,WAAU;;0CACX,8OAAC,yHAAA,CAAA,OAAI;gCAAC,MAAK;0CAAK,EAAE;;;;;;0CAClB,8OAAC,yHAAA,CAAA,OAAI;gCAAC,MAAK;0CAAU,EAAE;;;;;;0CACvB,8OAAC,yHAAA,CAAA,OAAI;gCAAC,MAAK;0CAAY,EAAE;;;;;;;;;;;;;;;;;;0BAGjC,8OAAC;;kCACG,8OAAC;kCAAG;;;;;;kCACJ,8OAAC;wBAAI,WAAU;kCACV,UAAU,GAAG,CAAC,CAAA,qBACX,8OAAC,yHAAA,CAAA,OAAI;gCAAC,MAAM,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE;gCAAgB,OAAO,KAAK,EAAE;0CAClD,KAAK,KAAK;+BADiB,KAAK,EAAE;;;;;;;;;;kCAO/C,8OAAC,+NAAA,CAAA,4BAAyB;wBACtB,WAAU;wBACV,SAAQ;wBACR,WAAW;;;;;;;;;;;;0BAGnB,8OAAC;;kCACG,8OAAC;kCAAG;;;;;;kCACJ,8OAAC;wBAAG,WAAU;kCACT,OAAO,OAAO,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,aAAa,OAAO,iBAC/C,8OAAC;;oCACI;oCAAY;oCAAI;;+BADZ;;;;;;;;;;;;;;;;;;;;;;AAQjC","debugId":null}},
    {"offset": {"line": 1526, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/app/%5Blocale%5D/layout.tsx"],"sourcesContent":["import { setRequestLocale } from 'next-intl/server';\nimport { NextIntlClientProvider, hasLocale } from 'next-intl';\nimport { notFound } from 'next/navigation';\nimport { routing } from '@/i18n/routing';\nimport { Geist, Geist_Mono } from 'next/font/google';\nimport type { Metadata, Viewport } from 'next';\nimport { generateHrefLangLinks, generateMultilingualStructuredData } from '@/lib/seo-utils';\nimport { I18nIntegrationService } from '@/services/i18n-integration.service';\nimport { APP_CONFIG } from '@/config'; // 使用統一的配置\nimport Header from '@/components/layout/Header';\n\n\n\nconst geistSans = Geist({ variable: '--font-geist-sans', subsets: ['latin'] });\nconst geistMono = Geist_Mono({ variable: '--font-geist-mono', subsets: ['latin'] });\n\n// 導出 viewport 配置\nexport const viewport: Viewport = {\n    width: 'device-width',\n    initialScale: 1,\n    maximumScale: 5,\n    userScalable: true,\n    themeColor: [\n        { media: '(prefers-color-scheme: light)', color: '#ffffff' },\n        { media: '(prefers-color-scheme: dark)', color: '#000000' }\n    ],\n};\n\n// 動態生成 metadata\nexport async function generateMetadata({\n                                           params,\n                                       }: {\n    params: Promise<{ locale: string }>;\n}): Promise<Metadata> {\n    const { locale } = await params;\n\n    // 取得語系資料\n    const languages = await I18nIntegrationService.getLanguages();\n    const baseUrl = APP_CONFIG.API.BASE_URL;\n\n    // 生成 hreflang 連結\n    const hrefLangLinks = await generateHrefLangLinks(languages, locale);\n\n    // 轉換為 Next.js metadata 格式\n    const alternates: Record<string, string> = {};\n    hrefLangLinks.forEach(({ hrefLang, href }) => {\n        alternates[hrefLang] = href;\n    });\n\n    // 生成結構化資料\n    const structuredData = generateMultilingualStructuredData(\n        languages,\n        locale,\n        `${baseUrl}/${locale}`\n    );\n\n    return {\n        title: {\n            default: '我的網站',\n            template: '%s | 我的網站',\n        },\n        description: '這是我網站的預設描述。',\n        keywords: ['Next.js', 'React', '開發'],\n\n        // 改進的 Open Graph 配置\n        openGraph: {\n            type: 'website',\n            locale: locale.replace('-', '_'),\n            url: `${baseUrl}/${locale}`,\n            siteName: '我的網站',\n            title: '我的網站',\n            description: '這是我網站的預設描述。',\n            images: [\n                {\n                    url: `${baseUrl}/og-image.jpg`,\n                    width: 1200,\n                    height: 630,\n                    alt: '我的網站',\n                },\n            ],\n            alternateLocale: languages\n                .filter(lang => lang.id !== locale)\n                .map(lang => lang.id.replace('-', '_')),\n        },\n\n        // 添加 Twitter Card\n        twitter: {\n            card: 'summary_large_image',\n            title: '我的網站',\n            description: '這是我網站的預設描述。',\n            images: [`${baseUrl}/og-image.jpg`],\n        },\n\n        // 改進的 alternates 配置\n        alternates: {\n            canonical: `${baseUrl}/${locale}`,\n            languages: {\n                ...alternates,\n                'x-default': `${baseUrl}/${languages[0]?.id || 'en'}`,\n            },\n        },\n\n        // 添加更多 SEO 相關的 metadata\n        robots: {\n            index: true,\n            follow: true,\n            googleBot: {\n                index: true,\n                follow: true,\n                'max-video-preview': -1,\n                'max-image-preview': 'large',\n                'max-snippet': -1,\n            },\n        },\n\n        // 添加 verification 標籤（如果需要）\n        verification: {\n            google: 'your-google-verification-code',\n        },\n\n        other: {\n            'language': locale,\n            // 將結構化資料添加到 other 中\n            'structured-data': JSON.stringify(structuredData),\n        },\n    };\n}\n\nexport default async function LocaleLayout({\n                                               children,\n                                               params,\n                                           }: {\n    children: React.ReactNode;\n    params: Promise<{ locale: string }>;\n}) {\n    const { locale } = await params;\n\n\n\n\n    if (!hasLocale(routing.locales, locale)) {\n        notFound();\n    }\n\n    setRequestLocale(locale);\n\n    return (\n        <html lang={locale}>\n        <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>\n        <Header />\n\n        <NextIntlClientProvider>{children}</NextIntlClientProvider>\n        </body>\n        </html>\n    );\n}"],"names":[],"mappings":"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","debugId":null}}]
}