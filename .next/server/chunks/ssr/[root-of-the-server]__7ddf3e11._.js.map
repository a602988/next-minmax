{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 22, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/i18n/navigation.ts"],"sourcesContent":["import {createNavigation} from 'next-intl/navigation';\nimport {routing} from './routing';\n\n//這是在 Next.js 導航 API 基礎上，考量到路由設定的輕量級封裝。\nexport const {Link, redirect, usePathname, useRouter, getPathname} =\n    createNavigation(routing);\n"],"names":[],"mappings":";;;;;;;AAAA;AACA;;;AAGO,MAAM,EAAC,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,EAAC,GAC9D,CAAA,GAAA,8PAAA,CAAA,mBAAgB,AAAD,EAAE,sHAAA,CAAA,UAAO","debugId":null}},
    {"offset": {"line": 38, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/lib/cache/types.ts"],"sourcesContent":["// src/lib/cache/types.ts\nexport type CacheSetOptions = {\n    ttl?: number;      // 秒\n    tags?: string[];   // 標籤，用於清除\n};\n\nexport interface CacheAdapter {\n    get<T>(key: string): Promise<T | null>;\n    set<T>(key: string, value: T, options?: CacheSetOptions): Promise<void>;\n    del(key: string): Promise<void>;\n    delByTag(tag: string): Promise<void>;\n    clear(): Promise<void>;\n}"],"names":[],"mappings":"AAAA,yBAAyB","debugId":null}},
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/lib/cache/memory-adapter.ts"],"sourcesContent":["/**\n * 記憶體快取適配器實作\n *\n * 基於 JavaScript Map 實作的記憶體快取系統，支援 TTL（生存時間）和標籤索引功能。\n * 適合開發環境或小型應用使用，資料存儲在應用程式記憶體中，重啟後會遺失。\n *\n * 主要特性：\n * - TTL 支援：可設定快取項目的過期時間\n * - 標籤索引：支援按標籤批量刪除快取項目\n * - 自動清理：讀取時自動清理過期項目\n * - 型別安全：支援泛型，確保型別安全\n *\n * 注意事項：\n * - 記憶體使用量會隨快取項目增加而增長\n * - 應用程式重啟後所有快取資料會遺失\n * - 適合單機部署，不支援分散式快取\n */\n\nimport type { CacheAdapter, CacheSetOptions } from './types';\n\n/**\n * 快取項目的內部資料結構\n */\ntype StoreItem = {\n    /** 快取的值，可以是任意型別 */\n    value: unknown;\n    /** 過期時間戳（毫秒），undefined 表示永不過期 */\n    expireAt?: number;\n    /** 關聯的標籤集合，用於批量操作 */\n    tags: Set<string>;\n};\n\n/**\n * 記憶體快取適配器\n *\n * 實作 CacheAdapter 介面，提供基於記憶體的快取功能。\n * 使用 Map 作為主要存儲結構，並維護標籤到鍵值的反向索引。\n */\nexport class MemoryCacheAdapter implements CacheAdapter {\n    /** 主要存儲結構：鍵值 -> 快取項目 */\n    private store = new Map<string, StoreItem>();\n    /** 標籤索引：標籤 -> 包含該標籤的鍵值集合 */\n    private tagIndex = new Map<string, Set<string>>();\n\n    /**\n     * 取得快取值\n     *\n     * @template T 快取值的型別\n     * @param key 快取鍵值\n     * @returns 快取的值，如果不存在或已過期則回傳 null\n     */\n    async get<T>(key: string): Promise<T | null> {\n        const item = this.store.get(key);\n        if (!item) return null;\n\n        // 檢查是否過期，過期則自動清理\n        if (item.expireAt && Date.now() > item.expireAt) {\n            this.evict(key, item);\n            return null;\n        }\n\n        return item.value as T;\n    }\n\n    /**\n     * 設定快取值\n     *\n     * @template T 快取值的型別\n     * @param key 快取鍵值\n     * @param value 要快取的值\n     * @param options 快取選項，包含 TTL 和標籤\n     */\n    async set<T>(key: string, value: T, options?: CacheSetOptions): Promise<void> {\n        const ttlSec = options?.ttl ?? 0;\n        const expireAt = ttlSec > 0 ? Date.now() + ttlSec * 1000 : undefined;\n        const tags = new Set(options?.tags ?? []);\n\n        // 如果鍵值已存在，先清理舊的標籤索引\n        const old = this.store.get(key);\n        if (old) this.unindexTags(key, old.tags);\n\n        // 設定新值並建立標籤索引\n        this.store.set(key, { value, expireAt, tags });\n        this.indexTags(key, tags);\n    }\n\n    /**\n     * 刪除指定鍵值的快取\n     *\n     * @param key 要刪除的快取鍵值\n     */\n    async del(key: string): Promise<void> {\n        const item = this.store.get(key);\n        if (!item) return;\n\n        // 清理標籤索引並刪除項目\n        this.unindexTags(key, item.tags);\n        this.store.delete(key);\n    }\n\n    /**\n     * 按標籤批量刪除快取\n     *\n     * 刪除所有包含指定標籤的快取項目，常用於相關資料的批量失效。\n     *\n     * @param tag 要刪除的標籤\n     */\n    async delByTag(tag: string): Promise<void> {\n        const keys = this.tagIndex.get(tag);\n        if (!keys) return;\n\n        // 遍歷所有包含該標籤的鍵值並刪除\n        for (const key of keys) {\n            const item = this.store.get(key);\n            if (!item) continue;\n            this.unindexTags(key, item.tags);\n            this.store.delete(key);\n        }\n\n        // 清理標籤索引\n        this.tagIndex.delete(tag);\n    }\n\n    /**\n     * 清空所有快取\n     *\n     * 刪除所有快取項目和標籤索引，重置快取狀態。\n     */\n    async clear(): Promise<void> {\n        this.store.clear();\n        this.tagIndex.clear();\n    }\n\n    /**\n     * 清理過期項目\n     *\n     * 內部方法，用於清理過期的快取項目和相關的標籤索引。\n     *\n     * @private\n     * @param key 要清理的鍵值\n     * @param item 要清理的快取項目\n     */\n    private evict(key: string, item: StoreItem) {\n        this.unindexTags(key, item.tags);\n        this.store.delete(key);\n    }\n\n    /**\n     * 建立標籤索引\n     *\n     * 為指定鍵值的標籤建立反向索引，用於支援按標籤查詢和刪除。\n     *\n     * @private\n     * @param key 鍵值\n     * @param tags 標籤集合\n     */\n    private indexTags(key: string, tags: Set<string>) {\n        for (const tag of tags) {\n            if (!this.tagIndex.has(tag)) this.tagIndex.set(tag, new Set());\n            this.tagIndex.get(tag)!.add(key);\n        }\n    }\n\n    /**\n     * 清理標籤索引\n     *\n     * 從標籤索引中移除指定鍵值的關聯，如果標籤下沒有其他鍵值則刪除該標籤。\n     *\n     * @private\n     * @param key 鍵值\n     * @param tags 標籤集合\n     */\n    private unindexTags(key: string, tags: Set<string>) {\n        for (const tag of tags) {\n            const set = this.tagIndex.get(tag);\n            if (!set) continue;\n            set.delete(key);\n            // 如果標籤下沒有其他鍵值，刪除該標籤索引\n            if (set.size === 0) this.tagIndex.delete(tag);\n        }\n    }\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 191, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/lib/cache/factory.ts"],"sourcesContent":["/**\n * 快取適配器工廠模組\n *\n * 此模組提供統一的快取適配器建立介面，根據環境變數配置動態選擇快取策略。\n * 支援記憶體快取、Redis 快取或無快取模式，並使用單例模式確保整個應用程式\n * 共用同一個快取實例，避免重複初始化和資源浪費。\n *\n * 支援的快取策略：\n * - memory: 使用記憶體快取，適合開發環境或小型應用\n * - redis: 使用 Redis 快取，適合生產環境或分散式部署（待實作）\n * - none: 無快取模式，所有操作都是 no-op，適合測試或特殊場景\n */\n\nimport type { CacheAdapter } from './types';\nimport { MemoryCacheAdapter } from './memory-adapter';\nimport { env } from '@/env.mjs';\n\n// 單例實例，確保整個應用程式共用同一個快取適配器\nlet singleton: CacheAdapter | null = null;\n\n/**\n * 取得快取適配器實例\n *\n * 根據環境變數 I18N_CACHE_STRATEGY 的設定，動態建立對應的快取適配器。\n * 使用單例模式，首次呼叫時建立實例，後續呼叫直接回傳已建立的實例。\n *\n * @returns {CacheAdapter} 快取適配器實例，實作統一的快取介面\n */\nexport function getCacheAdapter(): CacheAdapter {\n    // 如果已有實例，直接回傳，避免重複建立\n    if (singleton) return singleton;\n\n    // 直接讀 env，避免依賴另一層 config 常量\n    const strategy = env.I18N_CACHE_STRATEGY; // 'memory' | 'redis' | 'none'\n\n    if (strategy === 'memory') {\n        // 記憶體快取：適合開發環境，資料存在應用程式記憶體中\n        singleton = new MemoryCacheAdapter();\n    } else if (strategy === 'redis') {\n        // Redis 快取：適合生產環境，支援分散式快取\n        // TODO: 之後接 RedisAdapter\n        singleton = new MemoryCacheAdapter();\n    } else {\n        // 無快取模式：所有操作都是 no-op，適合測試或禁用快取的場景\n        singleton = {\n            async get() { return null; },\n            async set() { /* no-op */ },\n            async del() { /* no-op */ },\n            async delByTag() { /* no-op */ },\n            async clear() { /* no-op */ }\n        };\n    }\n    return singleton;\n}"],"names":[],"mappings":"AAAA;;;;;;;;;;;CAWC;;;AAGD;AACA;;;AAEA,0BAA0B;AAC1B,IAAI,YAAiC;AAU9B,SAAS;IACZ,qBAAqB;IACrB,IAAI,WAAW,OAAO;IAEtB,4BAA4B;IAC5B,MAAM,WAAW,2GAAA,CAAA,MAAG,CAAC,mBAAmB,EAAE,8BAA8B;IAExE,IAAI,aAAa,UAAU;QACvB,4BAA4B;QAC5B,YAAY,IAAI,wIAAA,CAAA,qBAAkB;IACtC,OAAO,IAAI,aAAa,SAAS;QAC7B,0BAA0B;QAC1B,yBAAyB;QACzB,YAAY,IAAI,wIAAA,CAAA,qBAAkB;IACtC,OAAO;QACH,kCAAkC;QAClC,YAAY;YACR,MAAM;gBAAQ,OAAO;YAAM;YAC3B,MAAM,QAAoB;YAC1B,MAAM,QAAoB;YAC1B,MAAM,aAAyB;YAC/B,MAAM,UAAsB;QAChC;IACJ;IACA,OAAO;AACX","debugId":null}},
    {"offset": {"line": 241, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/lib/cache/index.ts"],"sourcesContent":["// src/lib/cache/index.ts\nexport * from './types';\nexport { getCacheAdapter } from './factory';"],"names":[],"mappings":"AAAA,yBAAyB;;AACzB;AACA","debugId":null}},
    {"offset": {"line": 259, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/lib/language.cache.ts"],"sourcesContent":["import { getCacheAdapter } from '@/lib/cache';\nimport { serverCacheConfig } from '@/config/';\nimport type { Language } from '@/types';\n\nconst adapter = getCacheAdapter();\n\n// 使用 server 端快取設定（不重複 env，僅取業務邏輯）\n// 注意：type 一律使用小寫鍵（languages）\nconst key = serverCacheConfig.generateKey('languages', 'list');\nconst ttl = serverCacheConfig.ttl.languages;      // 單位：秒\nconst tags = serverCacheConfig.tags.languages;\n\nexport async function getLanguagesCache(): Promise<Language[] | null> {\n    return adapter.get<Language[]>(key);\n}\n\nexport async function setLanguagesCache(data: Language[]): Promise<void> {\n    await adapter.set(key, data, { ttl, tags });\n}\n\nexport async function clearLanguagesCache(): Promise<void> {\n    await adapter.del(key);\n}\n\n// 若之後要清除整個類別：adapter.delByTag('languages')"],"names":[],"mappings":";;;;;AAAA;AAAA;AACA;AAAA;;;AAGA,MAAM,UAAU,CAAA,GAAA,8HAAA,CAAA,kBAAe,AAAD;AAE9B,kCAAkC;AAClC,6BAA6B;AAC7B,MAAM,MAAM,0JAAA,CAAA,oBAAiB,CAAC,WAAW,CAAC,aAAa;AACvD,MAAM,MAAM,0JAAA,CAAA,oBAAiB,CAAC,GAAG,CAAC,SAAS,EAAO,OAAO;AACzD,MAAM,OAAO,0JAAA,CAAA,oBAAiB,CAAC,IAAI,CAAC,SAAS;AAEtC,eAAe;IAClB,OAAO,QAAQ,GAAG,CAAa;AACnC;AAEO,eAAe,kBAAkB,IAAgB;IACpD,MAAM,QAAQ,GAAG,CAAC,KAAK,MAAM;QAAE;QAAK;IAAK;AAC7C;AAEO,eAAe;IAClB,MAAM,QAAQ,GAAG,CAAC;AACtB,EAEA,2CAA2C","debugId":null}},
    {"offset": {"line": 292, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/services/language.repository.ts"],"sourcesContent":["// src/features/language/application/language.repository.ts\nimport { languageService } from '@/services/language.service';\nimport { getLanguagesCache, setLanguagesCache } from '@/features/language/lib/language.cache';\nimport type { Language } from '@/types';\n\nexport class LanguageRepository {\n    async getLanguages(): Promise<Language[]> {\n        const cached = await getLanguagesCache();\n        if (cached) return cached;\n\n        const data = await languageService.getLanguages();\n        await setLanguagesCache(data);\n        return data;\n    }\n\n    async refreshLanguages(): Promise<Language[]> {\n        const data = await languageService.getLanguages();\n        await setLanguagesCache(data);\n        return data;\n    }\n}\n\nexport const languageRepository = new LanguageRepository();"],"names":[],"mappings":"AAAA,2DAA2D;;;;;AAC3D;AACA;;;AAGO,MAAM;IACT,MAAM,eAAoC;QACtC,MAAM,SAAS,MAAM,CAAA,GAAA,uJAAA,CAAA,oBAAiB,AAAD;QACrC,IAAI,QAAQ,OAAO;QAEnB,MAAM,OAAO,MAAM,sIAAA,CAAA,kBAAe,CAAC,YAAY;QAC/C,MAAM,CAAA,GAAA,uJAAA,CAAA,oBAAiB,AAAD,EAAE;QACxB,OAAO;IACX;IAEA,MAAM,mBAAwC;QAC1C,MAAM,OAAO,MAAM,sIAAA,CAAA,kBAAe,CAAC,YAAY;QAC/C,MAAM,CAAA,GAAA,uJAAA,CAAA,oBAAiB,AAAD,EAAE;QACxB,OAAO;IACX;AACJ;AAEO,MAAM,qBAAqB,IAAI","debugId":null}},
    {"offset": {"line": 320, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/services/index.ts"],"sourcesContent":["export * from './language.repository';"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 334, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/components/LanguageSwitcher.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/features/language/components/LanguageSwitcher.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/features/language/components/LanguageSwitcher.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAyT,GACtV,uFACA","debugId":null}},
    {"offset": {"line": 346, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/components/LanguageSwitcher.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/features/language/components/LanguageSwitcher.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/features/language/components/LanguageSwitcher.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAqS,GAClU,mEACA","debugId":null}},
    {"offset": {"line": 358, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 366, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/components/LanguageSwitcherContainer.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/features/language/components/LanguageSwitcherContainer.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/features/language/components/LanguageSwitcherContainer.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAkU,GAC/V,gGACA","debugId":null}},
    {"offset": {"line": 378, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/components/LanguageSwitcherContainer.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/features/language/components/LanguageSwitcherContainer.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/features/language/components/LanguageSwitcherContainer.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA8S,GAC3U,4EACA","debugId":null}},
    {"offset": {"line": 390, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 398, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/hooks/useLanguageSwitcher.ts/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const useLanguageSwitcher = registerClientReference(\n    function() { throw new Error(\"Attempted to call useLanguageSwitcher() from the server but useLanguageSwitcher is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/features/language/hooks/useLanguageSwitcher.ts <module evaluation>\",\n    \"useLanguageSwitcher\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,sBAAsB,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACrD;IAAa,MAAM,IAAI,MAAM;AAAsP,GACnR,oFACA","debugId":null}},
    {"offset": {"line": 410, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/hooks/useLanguageSwitcher.ts/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const useLanguageSwitcher = registerClientReference(\n    function() { throw new Error(\"Attempted to call useLanguageSwitcher() from the server but useLanguageSwitcher is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/features/language/hooks/useLanguageSwitcher.ts\",\n    \"useLanguageSwitcher\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,sBAAsB,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACrD;IAAa,MAAM,IAAI,MAAM;AAAsP,GACnR,gEACA","debugId":null}},
    {"offset": {"line": 422, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 430, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/hooks/index.ts"],"sourcesContent":["export { useLanguageSwitcher } from './useLanguageSwitcher';"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 444, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/lib/getLanguagesForSSR.ts"],"sourcesContent":["import { languageRepository } from '../services';\nimport type { Language } from '@/types';\n\n\nexport async function getLanguagesForSSR(): Promise<Language[]> {\n    return languageRepository.getLanguages();\n}"],"names":[],"mappings":";;;AAAA;AAAA;;AAIO,eAAe;IAClB,OAAO,iKAAA,CAAA,qBAAkB,CAAC,YAAY;AAC1C","debugId":null}},
    {"offset": {"line": 457, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/index.ts"],"sourcesContent":["//  對外匯出整合（barrel）\nexport * from './services';       // 子 barrel，會指向 ./services/index.ts\nexport { default as LanguageSwitcher } from './components/LanguageSwitcher';\nexport { default as LanguageSwitcherContainer } from './components/LanguageSwitcherContainer';\nexport { useLanguageSwitcher } from './hooks';\nexport { getLanguagesForSSR } from './lib/getLanguagesForSSR';"],"names":[],"mappings":"AAAA,kBAAkB;;AAClB,4SAAkC,mCAAmC;AACrE;AACA;AACA;AACA","debugId":null}},
    {"offset": {"line": 492, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/components/layout/Header.tsx"],"sourcesContent":["import React from 'react';\nimport { getTranslations } from 'next-intl/server';\nimport { Link } from '@/i18n/navigation';\nimport { I18nIntegration } from '@/i18n/i18n-integration';\nimport { LanguageSwitcherContainer } from '@/features/language';\n\n\nexport default async function Header() {\n    // 靜態渲染的翻譯資料\n    const t = await getTranslations('navigation');\n    const languages = await I18nIntegration.getLanguages();\n    const locales = await I18nIntegration.getLocales();\n    return (\n        <header className=\"w-full border-b bg-white/70 backdrop-blur supports-[backdrop-filter]:bg-white/60\">\n            <div>\n                <h2>頁面</h2>\n                <nav className=\"flex gap-3\">\n                    <Link href=\"/\">{t('home')}</Link>\n                    <Link href=\"/about\">{t('about')}</Link>\n                    <Link href=\"/contact\">{t('contact')}</Link>\n                </nav>\n            </div>\n            <div>\n                <h2>支援的語系清單</h2>\n                <nav className=\"flex gap-3\">\n                    {languages.map(lang => (\n                        <Link href={`/${lang.id}`} key={lang.id} title={lang.id}>\n                            {lang.title}\n                        </Link>\n                    ))}\n                </nav>\n\n                {/* 傳遞語言資料給容器組件 */}\n                <LanguageSwitcherContainer\n                    className=\"mb-6\"\n                    variant=\"inline\"\n                    languages={languages}\n                />\n            </div>\n            <div>\n                <h2>國家預設語系</h2>\n                <ul className=\"flex gap-3\">\n                    {Object.entries(locales).map(([countryCode, locale]) => (\n                        <li key={countryCode}>\n                            {countryCode} : {locale}\n                        </li>\n                    ))}\n                </ul>\n            </div>\n        </header>\n    );\n}"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA;AAAA;;;;;;AAGe,eAAe;IAC1B,YAAY;IACZ,MAAM,IAAI,MAAM,CAAA,GAAA,wPAAA,CAAA,kBAAe,AAAD,EAAE;IAChC,MAAM,YAAY,MAAM,kIAAA,CAAA,kBAAe,CAAC,YAAY;IACpD,MAAM,UAAU,MAAM,kIAAA,CAAA,kBAAe,CAAC,UAAU;IAChD,qBACI,8OAAC;QAAO,WAAU;;0BACd,8OAAC;;kCACG,8OAAC;kCAAG;;;;;;kCACJ,8OAAC;wBAAI,WAAU;;0CACX,8OAAC,yHAAA,CAAA,OAAI;gCAAC,MAAK;0CAAK,EAAE;;;;;;0CAClB,8OAAC,yHAAA,CAAA,OAAI;gCAAC,MAAK;0CAAU,EAAE;;;;;;0CACvB,8OAAC,yHAAA,CAAA,OAAI;gCAAC,MAAK;0CAAY,EAAE;;;;;;;;;;;;;;;;;;0BAGjC,8OAAC;;kCACG,8OAAC;kCAAG;;;;;;kCACJ,8OAAC;wBAAI,WAAU;kCACV,UAAU,GAAG,CAAC,CAAA,qBACX,8OAAC,yHAAA,CAAA,OAAI;gCAAC,MAAM,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE;gCAAgB,OAAO,KAAK,EAAE;0CAClD,KAAK,KAAK;+BADiB,KAAK,EAAE;;;;;;;;;;kCAO/C,8OAAC,+NAAA,CAAA,4BAAyB;wBACtB,WAAU;wBACV,SAAQ;wBACR,WAAW;;;;;;;;;;;;0BAGnB,8OAAC;;kCACG,8OAAC;kCAAG;;;;;;kCACJ,8OAAC;wBAAG,WAAU;kCACT,OAAO,OAAO,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,aAAa,OAAO,iBAC/C,8OAAC;;oCACI;oCAAY;oCAAI;;+BADZ;;;;;;;;;;;;;;;;;;;;;;AAQjC","debugId":null}},
    {"offset": {"line": 646, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/app/%5Blocale%5D/page.tsx"],"sourcesContent":["import Header from \"@/components/layout/Header\";\n\n\nexport default async function HomePage() {\n    return (\n        <div className=\"page flex flex-col gap-3\">\n            <Header />\n        </div>\n    );\n}"],"names":[],"mappings":";;;;AAAA;;;AAGe,eAAe;IAC1B,qBACI,8OAAC;QAAI,WAAU;kBACX,cAAA,8OAAC,sIAAA,CAAA,UAAM;;;;;;;;;;AAGnB","debugId":null}}]
}