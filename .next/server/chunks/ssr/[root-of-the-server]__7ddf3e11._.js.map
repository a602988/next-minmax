{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 22, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/i18n/navigation.ts"],"sourcesContent":["import {createNavigation} from 'next-intl/navigation';\nimport {routing} from './routing';\n\n//這是在 Next.js 導航 API 基礎上，考量到路由設定的輕量級封裝。\nexport const {Link, redirect, usePathname, useRouter, getPathname} =\n    createNavigation(routing);\n"],"names":[],"mappings":";;;;;;;AAAA;AACA;;;AAGO,MAAM,EAAC,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,EAAC,GAC9D,CAAA,GAAA,8PAAA,CAAA,mBAAgB,AAAD,EAAE,sHAAA,CAAA,UAAO","debugId":null}},
    {"offset": {"line": 38, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/lib/cache/types.ts"],"sourcesContent":["// src/lib/cache/types.ts\nexport type CacheSetOptions = {\n    ttl?: number;      // 秒\n    tags?: string[];   // 標籤，用於清除\n};\n\nexport interface CacheAdapter {\n    get<T>(key: string): Promise<T | null>;\n    set<T>(key: string, value: T, options?: CacheSetOptions): Promise<void>;\n    del(key: string): Promise<void>;\n    delByTag(tag: string): Promise<void>;\n    clear(): Promise<void>;\n}"],"names":[],"mappings":"AAAA,yBAAyB","debugId":null}},
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/lib/cache/memory-adapter.ts"],"sourcesContent":["// src/lib/cache/memory-adapter.ts 記憶體快取實作（Map + TTL + Tag 索引）\nimport type { CacheAdapter, CacheSetOptions } from './types';\n\ntype StoreItem = {\n    value: unknown;\n    expireAt?: number;      // ms\n    tags: Set<string>;\n};\n\nexport class MemoryCacheAdapter implements CacheAdapter {\n    private store = new Map<string, StoreItem>();\n    private tagIndex = new Map<string, Set<string>>();\n\n    async get<T>(key: string): Promise<T | null> {\n        const item = this.store.get(key);\n        if (!item) return null;\n        if (item.expireAt && Date.now() > item.expireAt) {\n            this.evict(key, item);\n            return null;\n        }\n        return item.value as T;\n    }\n\n    async set<T>(key: string, value: T, options?: CacheSetOptions): Promise<void> {\n        const ttlSec = options?.ttl ?? 0;\n        const expireAt = ttlSec > 0 ? Date.now() + ttlSec * 1000 : undefined;\n        const tags = new Set(options?.tags ?? []);\n        const old = this.store.get(key);\n        if (old) this.unindexTags(key, old.tags);\n        this.store.set(key, { value, expireAt, tags });\n        this.indexTags(key, tags);\n    }\n\n    async del(key: string): Promise<void> {\n        const item = this.store.get(key);\n        if (!item) return;\n        this.unindexTags(key, item.tags);\n        this.store.delete(key);\n    }\n\n    async delByTag(tag: string): Promise<void> {\n        const keys = this.tagIndex.get(tag);\n        if (!keys) return;\n        for (const key of keys) {\n            const item = this.store.get(key);\n            if (!item) continue;\n            this.unindexTags(key, item.tags);\n            this.store.delete(key);\n        }\n        this.tagIndex.delete(tag);\n    }\n\n    async clear(): Promise<void> {\n        this.store.clear();\n        this.tagIndex.clear();\n    }\n\n    private evict(key: string, item: StoreItem) {\n        this.unindexTags(key, item.tags);\n        this.store.delete(key);\n    }\n\n    private indexTags(key: string, tags: Set<string>) {\n        for (const tag of tags) {\n            if (!this.tagIndex.has(tag)) this.tagIndex.set(tag, new Set());\n            this.tagIndex.get(tag)!.add(key);\n        }\n    }\n\n    private unindexTags(key: string, tags: Set<string>) {\n        for (const tag of tags) {\n            const set = this.tagIndex.get(tag);\n            if (!set) continue;\n            set.delete(key);\n            if (set.size === 0) this.tagIndex.delete(tag);\n        }\n    }\n}"],"names":[],"mappings":"AAAA,8DAA8D;;;;AASvD,MAAM;IACD,QAAQ,IAAI,MAAyB;IACrC,WAAW,IAAI,MAA2B;IAElD,MAAM,IAAO,GAAW,EAAqB;QACzC,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;QAC5B,IAAI,CAAC,MAAM,OAAO;QAClB,IAAI,KAAK,QAAQ,IAAI,KAAK,GAAG,KAAK,KAAK,QAAQ,EAAE;YAC7C,IAAI,CAAC,KAAK,CAAC,KAAK;YAChB,OAAO;QACX;QACA,OAAO,KAAK,KAAK;IACrB;IAEA,MAAM,IAAO,GAAW,EAAE,KAAQ,EAAE,OAAyB,EAAiB;QAC1E,MAAM,SAAS,SAAS,OAAO;QAC/B,MAAM,WAAW,SAAS,IAAI,KAAK,GAAG,KAAK,SAAS,OAAO;QAC3D,MAAM,OAAO,IAAI,IAAI,SAAS,QAAQ,EAAE;QACxC,MAAM,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;QAC3B,IAAI,KAAK,IAAI,CAAC,WAAW,CAAC,KAAK,IAAI,IAAI;QACvC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK;YAAE;YAAO;YAAU;QAAK;QAC5C,IAAI,CAAC,SAAS,CAAC,KAAK;IACxB;IAEA,MAAM,IAAI,GAAW,EAAiB;QAClC,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;QAC5B,IAAI,CAAC,MAAM;QACX,IAAI,CAAC,WAAW,CAAC,KAAK,KAAK,IAAI;QAC/B,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;IACtB;IAEA,MAAM,SAAS,GAAW,EAAiB;QACvC,MAAM,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC;QAC/B,IAAI,CAAC,MAAM;QACX,KAAK,MAAM,OAAO,KAAM;YACpB,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;YAC5B,IAAI,CAAC,MAAM;YACX,IAAI,CAAC,WAAW,CAAC,KAAK,KAAK,IAAI;YAC/B,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QACtB;QACA,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;IACzB;IAEA,MAAM,QAAuB;QACzB,IAAI,CAAC,KAAK,CAAC,KAAK;QAChB,IAAI,CAAC,QAAQ,CAAC,KAAK;IACvB;IAEQ,MAAM,GAAW,EAAE,IAAe,EAAE;QACxC,IAAI,CAAC,WAAW,CAAC,KAAK,KAAK,IAAI;QAC/B,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;IACtB;IAEQ,UAAU,GAAW,EAAE,IAAiB,EAAE;QAC9C,KAAK,MAAM,OAAO,KAAM;YACpB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,IAAI;YACxD,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAM,GAAG,CAAC;QAChC;IACJ;IAEQ,YAAY,GAAW,EAAE,IAAiB,EAAE;QAChD,KAAK,MAAM,OAAO,KAAM;YACpB,MAAM,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC;YAC9B,IAAI,CAAC,KAAK;YACV,IAAI,MAAM,CAAC;YACX,IAAI,IAAI,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;QAC7C;IACJ;AACJ","debugId":null}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/lib/cache/factory.ts"],"sourcesContent":["// src/lib/cache/factory.ts\nimport { MemoryCacheAdapter } from './memory-adapter';\nimport type { CacheAdapter } from './types';\nimport { CACHE_CONFIG } from '@/config';\n\nlet singleton: CacheAdapter | null = null;\n\nexport function getCacheAdapter(): CacheAdapter {\n    if (singleton) return singleton;\n\n    const strategy = CACHE_CONFIG.STRATEGY; // 'memory' | 'redis' | 'none'\n    if (strategy === 'memory') {\n        singleton = new MemoryCacheAdapter();\n    } else if (strategy === 'redis') {\n        // TODO: 之後接 RedisAdapter\n        singleton = new MemoryCacheAdapter();\n        // 可先以記憶體代替，待接線時替換\n    } else {\n        // none：回傳最小 no-op adapter\n        singleton = {\n            async get() { return null; },\n            async set() { /* no-op */ },\n            async del() { /* no-op */ },\n            async delByTag() { /* no-op */ },\n            async clear() { /* no-op */ }\n        };\n    }\n    return singleton;\n}"],"names":[],"mappings":"AAAA,2BAA2B;;;;AAC3B;AAEA;AAAA;;;AAEA,IAAI,YAAiC;AAE9B,SAAS;IACZ,IAAI,WAAW,OAAO;IAEtB,MAAM,WAAW,0IAAA,CAAA,eAAY,CAAC,QAAQ,EAAE,8BAA8B;IACtE,IAAI,aAAa,UAAU;QACvB,YAAY,IAAI,wIAAA,CAAA,qBAAkB;IACtC,OAAO,IAAI,aAAa,SAAS;QAC7B,yBAAyB;QACzB,YAAY,IAAI,wIAAA,CAAA,qBAAkB;IAClC,kBAAkB;IACtB,OAAO;QACH,0BAA0B;QAC1B,YAAY;YACR,MAAM;gBAAQ,OAAO;YAAM;YAC3B,MAAM,QAAoB;YAC1B,MAAM,QAAoB;YAC1B,MAAM,aAAyB;YAC/B,MAAM,UAAsB;QAChC;IACJ;IACA,OAAO;AACX","debugId":null}},
    {"offset": {"line": 155, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/lib/cache/index.ts"],"sourcesContent":["// src/lib/cache/index.ts\nexport * from './types';\nexport { getCacheAdapter } from './factory';"],"names":[],"mappings":"AAAA,yBAAyB;;AACzB;AACA","debugId":null}},
    {"offset": {"line": 173, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/lib/language.cache.ts"],"sourcesContent":["// src/features/language/infrastructure/language.cache.ts\nimport { getCacheAdapter } from '@/lib/cache';\nimport { CACHE_CONFIG } from '@/config';\nimport type { Language } from '@/types';\n\nconst adapter = getCacheAdapter();\n\nconst KEY = CACHE_CONFIG.generateKey('LANGUAGES', 'list');\nconst TTL = CACHE_CONFIG.TTL.LANGUAGES;\nconst TAGS = CACHE_CONFIG.TAGS.LANGUAGES;\n\nexport async function getLanguagesCache(): Promise<Language[] | null> {\n    return adapter.get<Language[]>(KEY);\n}\n\nexport async function setLanguagesCache(data: Language[]): Promise<void> {\n    await adapter.set(KEY, data, { ttl: TTL, tags: TAGS });\n}\n\nexport async function clearLanguagesCache(): Promise<void> {\n    await adapter.del(KEY);\n}\n\n// 若之後要清除整個類別：adapter.delByTag('languages')"],"names":[],"mappings":"AAAA,yDAAyD;;;;;;AACzD;AAAA;AACA;AAAA;;;AAGA,MAAM,UAAU,CAAA,GAAA,8HAAA,CAAA,kBAAe,AAAD;AAE9B,MAAM,MAAM,0IAAA,CAAA,eAAY,CAAC,WAAW,CAAC,aAAa;AAClD,MAAM,MAAM,0IAAA,CAAA,eAAY,CAAC,GAAG,CAAC,SAAS;AACtC,MAAM,OAAO,0IAAA,CAAA,eAAY,CAAC,IAAI,CAAC,SAAS;AAEjC,eAAe;IAClB,OAAO,QAAQ,GAAG,CAAa;AACnC;AAEO,eAAe,kBAAkB,IAAgB;IACpD,MAAM,QAAQ,GAAG,CAAC,KAAK,MAAM;QAAE,KAAK;QAAK,MAAM;IAAK;AACxD;AAEO,eAAe;IAClB,MAAM,QAAQ,GAAG,CAAC;AACtB,EAEA,2CAA2C","debugId":null}},
    {"offset": {"line": 205, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/services/language.repository.ts"],"sourcesContent":["// src/features/language/application/language.repository.ts\nimport { languageService } from '@/services/language.service';\nimport { getLanguagesCache, setLanguagesCache } from '@/features/language/lib/language.cache';\nimport type { Language } from '@/types';\n\nexport class LanguageRepository {\n    async getLanguages(): Promise<Language[]> {\n        const cached = await getLanguagesCache();\n        if (cached) return cached;\n\n        const data = await languageService.getLanguages();\n        await setLanguagesCache(data);\n        return data;\n    }\n\n    async refreshLanguages(): Promise<Language[]> {\n        const data = await languageService.getLanguages();\n        await setLanguagesCache(data);\n        return data;\n    }\n}\n\nexport const languageRepository = new LanguageRepository();"],"names":[],"mappings":"AAAA,2DAA2D;;;;;AAC3D;AACA;;;AAGO,MAAM;IACT,MAAM,eAAoC;QACtC,MAAM,SAAS,MAAM,CAAA,GAAA,uJAAA,CAAA,oBAAiB,AAAD;QACrC,IAAI,QAAQ,OAAO;QAEnB,MAAM,OAAO,MAAM,sIAAA,CAAA,kBAAe,CAAC,YAAY;QAC/C,MAAM,CAAA,GAAA,uJAAA,CAAA,oBAAiB,AAAD,EAAE;QACxB,OAAO;IACX;IAEA,MAAM,mBAAwC;QAC1C,MAAM,OAAO,MAAM,sIAAA,CAAA,kBAAe,CAAC,YAAY;QAC/C,MAAM,CAAA,GAAA,uJAAA,CAAA,oBAAiB,AAAD,EAAE;QACxB,OAAO;IACX;AACJ;AAEO,MAAM,qBAAqB,IAAI","debugId":null}},
    {"offset": {"line": 233, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/services/index.ts"],"sourcesContent":["export * from './language.repository';"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 247, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/components/LanguageSwitcher.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/features/language/components/LanguageSwitcher.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/features/language/components/LanguageSwitcher.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAyT,GACtV,uFACA","debugId":null}},
    {"offset": {"line": 259, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/components/LanguageSwitcher.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/features/language/components/LanguageSwitcher.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/features/language/components/LanguageSwitcher.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAqS,GAClU,mEACA","debugId":null}},
    {"offset": {"line": 271, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 279, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/components/LanguageSwitcherContainer.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/features/language/components/LanguageSwitcherContainer.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/features/language/components/LanguageSwitcherContainer.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAkU,GAC/V,gGACA","debugId":null}},
    {"offset": {"line": 291, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/components/LanguageSwitcherContainer.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/features/language/components/LanguageSwitcherContainer.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/features/language/components/LanguageSwitcherContainer.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA8S,GAC3U,4EACA","debugId":null}},
    {"offset": {"line": 303, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 311, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/hooks/useLanguageSwitcher.ts/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const useLanguageSwitcher = registerClientReference(\n    function() { throw new Error(\"Attempted to call useLanguageSwitcher() from the server but useLanguageSwitcher is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/features/language/hooks/useLanguageSwitcher.ts <module evaluation>\",\n    \"useLanguageSwitcher\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,sBAAsB,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACrD;IAAa,MAAM,IAAI,MAAM;AAAsP,GACnR,oFACA","debugId":null}},
    {"offset": {"line": 323, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/hooks/useLanguageSwitcher.ts/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const useLanguageSwitcher = registerClientReference(\n    function() { throw new Error(\"Attempted to call useLanguageSwitcher() from the server but useLanguageSwitcher is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/features/language/hooks/useLanguageSwitcher.ts\",\n    \"useLanguageSwitcher\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,sBAAsB,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACrD;IAAa,MAAM,IAAI,MAAM;AAAsP,GACnR,gEACA","debugId":null}},
    {"offset": {"line": 335, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 343, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/hooks/index.ts"],"sourcesContent":["export { useLanguageSwitcher } from './useLanguageSwitcher';"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 357, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/lib/getLanguagesForSSR.ts"],"sourcesContent":["import { languageRepository } from '../services';\nimport type { Language } from '@/types';\n\n\nexport async function getLanguagesForSSR(): Promise<Language[]> {\n    return languageRepository.getLanguages();\n}"],"names":[],"mappings":";;;AAAA;AAAA;;AAIO,eAAe;IAClB,OAAO,iKAAA,CAAA,qBAAkB,CAAC,YAAY;AAC1C","debugId":null}},
    {"offset": {"line": 370, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/index.ts"],"sourcesContent":["//  對外匯出整合（barrel）\nexport * from './services';       // 子 barrel，會指向 ./services/index.ts\nexport { default as LanguageSwitcher } from './components/LanguageSwitcher';\nexport { default as LanguageSwitcherContainer } from './components/LanguageSwitcherContainer';\nexport { useLanguageSwitcher } from './hooks';\nexport { getLanguagesForSSR } from './lib/getLanguagesForSSR';"],"names":[],"mappings":"AAAA,kBAAkB;;AAClB,4SAAkC,mCAAmC;AACrE;AACA;AACA;AACA","debugId":null}},
    {"offset": {"line": 405, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/components/layout/Header.tsx"],"sourcesContent":["import React from 'react';\nimport { getTranslations } from 'next-intl/server';\nimport { Link } from '@/i18n/navigation';\nimport { I18nIntegration } from '@/i18n/i18n-integration';\nimport { LanguageSwitcherContainer } from '@/features/language';\n\n\nexport default async function Header() {\n    // 靜態渲染的翻譯資料\n    const t = await getTranslations('navigation');\n    const languages = await I18nIntegration.getLanguages();\n    const locales = await I18nIntegration.getLocales();\n    return (\n        <header className=\"w-full border-b bg-white/70 backdrop-blur supports-[backdrop-filter]:bg-white/60\">\n            <div>\n                <h2>頁面</h2>\n                <nav className=\"flex gap-3\">\n                    <Link href=\"/\">{t('home')}</Link>\n                    <Link href=\"/about\">{t('about')}</Link>\n                    <Link href=\"/contact\">{t('contact')}</Link>\n                </nav>\n            </div>\n            <div>\n                <h2>支援的語系清單</h2>\n                <nav className=\"flex gap-3\">\n                    {languages.map(lang => (\n                        <Link href={`/${lang.id}`} key={lang.id} title={lang.id}>\n                            {lang.title}\n                        </Link>\n                    ))}\n                </nav>\n\n                {/* 傳遞語言資料給容器組件 */}\n                <LanguageSwitcherContainer\n                    className=\"mb-6\"\n                    variant=\"inline\"\n                    languages={languages}\n                />\n            </div>\n            <div>\n                <h2>國家預設語系</h2>\n                <ul className=\"flex gap-3\">\n                    {Object.entries(locales).map(([countryCode, locale]) => (\n                        <li key={countryCode}>\n                            {countryCode} : {locale}\n                        </li>\n                    ))}\n                </ul>\n            </div>\n        </header>\n    );\n}"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA;AAAA;;;;;;AAGe,eAAe;IAC1B,YAAY;IACZ,MAAM,IAAI,MAAM,CAAA,GAAA,wPAAA,CAAA,kBAAe,AAAD,EAAE;IAChC,MAAM,YAAY,MAAM,kIAAA,CAAA,kBAAe,CAAC,YAAY;IACpD,MAAM,UAAU,MAAM,kIAAA,CAAA,kBAAe,CAAC,UAAU;IAChD,qBACI,8OAAC;QAAO,WAAU;;0BACd,8OAAC;;kCACG,8OAAC;kCAAG;;;;;;kCACJ,8OAAC;wBAAI,WAAU;;0CACX,8OAAC,yHAAA,CAAA,OAAI;gCAAC,MAAK;0CAAK,EAAE;;;;;;0CAClB,8OAAC,yHAAA,CAAA,OAAI;gCAAC,MAAK;0CAAU,EAAE;;;;;;0CACvB,8OAAC,yHAAA,CAAA,OAAI;gCAAC,MAAK;0CAAY,EAAE;;;;;;;;;;;;;;;;;;0BAGjC,8OAAC;;kCACG,8OAAC;kCAAG;;;;;;kCACJ,8OAAC;wBAAI,WAAU;kCACV,UAAU,GAAG,CAAC,CAAA,qBACX,8OAAC,yHAAA,CAAA,OAAI;gCAAC,MAAM,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE;gCAAgB,OAAO,KAAK,EAAE;0CAClD,KAAK,KAAK;+BADiB,KAAK,EAAE;;;;;;;;;;kCAO/C,8OAAC,+NAAA,CAAA,4BAAyB;wBACtB,WAAU;wBACV,SAAQ;wBACR,WAAW;;;;;;;;;;;;0BAGnB,8OAAC;;kCACG,8OAAC;kCAAG;;;;;;kCACJ,8OAAC;wBAAG,WAAU;kCACT,OAAO,OAAO,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,aAAa,OAAO,iBAC/C,8OAAC;;oCACI;oCAAY;oCAAI;;+BADZ;;;;;;;;;;;;;;;;;;;;;;AAQjC","debugId":null}},
    {"offset": {"line": 559, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/app/%5Blocale%5D/page.tsx"],"sourcesContent":["import Header from \"@/components/layout/Header\";\n\n\nexport default async function HomePage() {\n    return (\n        <div className=\"page flex flex-col gap-3\">\n            <Header />\n        </div>\n    );\n}"],"names":[],"mappings":";;;;AAAA;;;AAGe,eAAe;IAC1B,qBACI,8OAAC;QAAI,WAAU;kBACX,cAAA,8OAAC,sIAAA,CAAA,UAAM;;;;;;;;;;AAGnB","debugId":null}}]
}