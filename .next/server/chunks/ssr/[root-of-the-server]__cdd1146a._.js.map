{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/i18n/routing.ts"],"sourcesContent":["import { defineRouting } from 'next-intl/routing';\n\nexport const routing = defineRouting({\n  // 支援的語系 - 這個會被 API 動態覆蓋\n  locales: ['zh-TW', 'zh-CN', 'en', 'ja'],\n  \n  // 預設語系 - 這個也會被 API 動態覆蓋\n  defaultLocale: 'zh-TW',\n  \n  // 預設語系不加前綴\n  localePrefix: 'as-needed',\n  \n  // 啟用語系檢測\n  localeDetection: true\n});\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,UAAU,CAAA,GAAA,kOAAA,CAAA,gBAAa,AAAD,EAAE;IACnC,wBAAwB;IACxB,SAAS;QAAC;QAAS;QAAS;QAAM;KAAK;IAEvC,wBAAwB;IACxB,eAAe;IAEf,WAAW;IACX,cAAc;IAEd,SAAS;IACT,iBAAiB;AACnB","debugId":null}},
    {"offset": {"line": 53, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/i18n/navigation.ts"],"sourcesContent":["import {createNavigation} from 'next-intl/navigation';\nimport {routing} from './routing';\n\n//這是在 Next.js 導航 API 基礎上，考量到路由設定的輕量級封裝。\nexport const {Link, redirect, usePathname, useRouter, getPathname} =\n    createNavigation(routing);\n"],"names":[],"mappings":";;;;;;;AAAA;AACA;;;AAGO,MAAM,EAAC,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,EAAC,GAC9D,CAAA,GAAA,8PAAA,CAAA,mBAAgB,AAAD,EAAE,sHAAA,CAAA,UAAO","debugId":null}},
    {"offset": {"line": 69, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/lib/locale-utils.ts"],"sourcesContent":["import { routing } from '@/i18n/routing';\n\n/**\n * 移除路徑中的語系前綴，取得基底路徑\n * @param pathname - 當前路徑 (例如: /en/about 或 /about)\n * @returns 不含語系前綴的基底路徑 (例如: /about)\n */\nexport function getBasePathWithoutLocale(pathname: string): string {\n    const parts = pathname.split('/').filter(Boolean);\n    const first = parts[0];\n\n    // 檢查第一段是否為支援的語系\n    const hasLocalePrefix = !!first && routing.locales.includes(first as any);\n\n    // 移除語系前綴\n    const withoutLocale = hasLocalePrefix ? parts.slice(1) : parts;\n    const path = `/${withoutLocale.join('/')}`;\n\n    return path === '' ? '/' : path;\n}\n\n/**\n * 檢查路徑是否包含語系前綴\n * @param pathname - 當前路徑\n * @returns 是否包含語系前綴\n */\nexport function hasLocalePrefix(pathname: string): boolean {\n    const parts = pathname.split('/').filter(Boolean);\n    const first = parts[0];\n    return !!first && routing.locales.includes(first as any);\n}\n\n/**\n * 將查詢參數附加到路徑上\n * @param path - 基底路徑\n * @param searchParams - URLSearchParams 物件\n * @returns 包含查詢參數的完整路徑\n */\nexport function appendSearchParams(path: string, searchParams?: URLSearchParams | null): string {\n    const qsString = searchParams?.toString();\n    return qsString ? `${path}?${qsString}` : path;\n}\n\n/**\n * 為語系切換器準備 href\n * 整合路徑處理和查詢參數邏輯\n * @param pathname - 當前路徑\n * @param searchParams - 查詢參數\n * @returns 處理後的 href\n */\nexport function prepareLanguageSwitcherHref(pathname: string, searchParams?: URLSearchParams | null): string {\n    const basePath = getBasePathWithoutLocale(pathname);\n    return appendSearchParams(basePath, searchParams);\n}"],"names":[],"mappings":";;;;;;AAAA;;AAOO,SAAS,yBAAyB,QAAgB;IACrD,MAAM,QAAQ,SAAS,KAAK,CAAC,KAAK,MAAM,CAAC;IACzC,MAAM,QAAQ,KAAK,CAAC,EAAE;IAEtB,gBAAgB;IAChB,MAAM,kBAAkB,CAAC,CAAC,SAAS,sHAAA,CAAA,UAAO,CAAC,OAAO,CAAC,QAAQ,CAAC;IAE5D,SAAS;IACT,MAAM,gBAAgB,kBAAkB,MAAM,KAAK,CAAC,KAAK;IACzD,MAAM,OAAO,CAAC,CAAC,EAAE,cAAc,IAAI,CAAC,MAAM;IAE1C,OAAO,SAAS,KAAK,MAAM;AAC/B;AAOO,SAAS,gBAAgB,QAAgB;IAC5C,MAAM,QAAQ,SAAS,KAAK,CAAC,KAAK,MAAM,CAAC;IACzC,MAAM,QAAQ,KAAK,CAAC,EAAE;IACtB,OAAO,CAAC,CAAC,SAAS,sHAAA,CAAA,UAAO,CAAC,OAAO,CAAC,QAAQ,CAAC;AAC/C;AAQO,SAAS,mBAAmB,IAAY,EAAE,YAAqC;IAClF,MAAM,WAAW,cAAc;IAC/B,OAAO,WAAW,GAAG,KAAK,CAAC,EAAE,UAAU,GAAG;AAC9C;AASO,SAAS,4BAA4B,QAAgB,EAAE,YAAqC;IAC/F,MAAM,WAAW,yBAAyB;IAC1C,OAAO,mBAAmB,UAAU;AACxC","debugId":null}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/components/LanguageSwitcher.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\nimport type { Language } from '@/types';\nimport { Link } from '@/i18n/navigation';\nimport { routing } from '@/i18n/routing';\nimport { prepareLanguageSwitcherHref } from '@/lib/locale-utils';\nimport type { ReadonlyURLSearchParams } from 'next/navigation';\n\n/**\n * 語言切換器組件的屬性類型定義\n */\ntype LanguageSwitcherProps = {\n    /** 自定義 CSS 類名 */\n    className?: string;\n    /** 可用語言列表 */\n    languages: Language[];\n    /** 當前語系 ID */\n    currentLocale: string;\n    /** 當前路徑 */\n    pathname: string;\n    /** URL 查詢參數 */\n    searchParams: ReadonlyURLSearchParams | null;\n    /** 是否顯示語言標籤文字，預設為 true */\n    showLabels?: boolean;\n    /** 顯示變體：下拉選單或內聯列表，預設為 'inline' */\n    variant?: 'dropdown' | 'inline';\n};\n\n/**\n * 語言切換器組件\n *\n * 提供多語言網站的語言切換功能，支援兩種顯示模式：\n * 1. inline: 內聯顯示所有語言選項\n * 2. dropdown: 下拉選單顯示（目前僅顯示按鈕，下拉功能待實作）\n *\n * 特色功能：\n * - 無障礙支援 (ARIA 標籤、鍵盤導航)\n * - SEO 友善 (hrefLang 屬性)\n * - 響應式設計\n * - 當前語言高亮顯示\n * - 預設語言標記\n *\n * @param props - 組件屬性\n * @returns 語言切換器 JSX 元素\n */\nexport default function LanguageSwitcher({\n                                             className,\n                                             languages,\n                                             currentLocale,\n                                             pathname,\n                                             searchParams,\n                                             showLabels = true,\n                                             variant = 'inline'\n                                         }: LanguageSwitcherProps) {\n    // 錯誤處理：若無語系列表，顯示錯誤訊息或不渲染\n    if (!languages || languages.length === 0) {\n        // 開發環境下顯示警告訊息\n        if (process.env.NODE_ENV === 'development') {\n            return (\n                <div className={className}>\n                    <span className=\"text-red-500 text-sm\">⚠️ 無語系資料</span>\n                </div>\n            );\n        }\n        // 生產環境下不渲染任何內容\n        return null;\n    }\n\n    // 找到當前語言的詳細資訊\n    const currentLanguage = languages.find(lang => lang.id === currentLocale);\n\n    return (\n        <nav\n            className={className}\n            aria-label=\"Language switcher\"\n            role=\"navigation\"\n        >\n            {variant === 'dropdown' ? (\n                // 下拉選單版本（目前僅顯示當前語言按鈕）\n                <div className=\"relative\">\n                    <button\n                        className=\"inline-flex items-center gap-2 rounded px-3 py-1 text-sm bg-gray-100 text-gray-800 hover:bg-gray-200\"\n                        aria-expanded=\"false\"\n                        aria-haspopup=\"true\"\n                        aria-label={`Current language: ${currentLanguage?.native || currentLanguage?.title}. Click to change language`}\n                    >\n                        {/* 語言圖示 */}\n                        {currentLanguage?.icon && (\n                            <span\n                                aria-hidden=\"true\"\n                                className={`${currentLanguage.icon} inline-block h-4 w-4`}\n                            />\n                        )}\n                        {/* 語言標籤 */}\n                        {showLabels && (\n                            <span>{currentLanguage?.native || currentLanguage?.title}</span>\n                        )}\n                        {/* 下拉箭頭圖示 */}\n                        <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                        </svg>\n                    </button>\n                    {/* TODO: 實作下拉選單內容 */}\n                </div>\n            ) : (\n                // 內聯版本：顯示所有語言選項\n                <ul\n                    className=\"flex flex-wrap items-center gap-2\"\n                    role=\"list\"\n                >\n                    {languages.map((lang) => {\n                        // 優先顯示原生語言名稱，否則顯示英文名稱\n                        const label = lang.native || lang.title;\n                        // 生成語言切換連結，保持當前路徑和查詢參數\n                        const href = prepareLanguageSwitcherHref(pathname, searchParams);\n                        // 判斷是否為當前語言\n                        const active = currentLocale === lang.id;\n\n                        return (\n                            <li key={lang.id} role=\"listitem\">\n                                <Link\n                                    href={href}\n                                    locale={lang.id as (typeof routing.locales)[number]}\n                                    className={\n                                        'inline-flex items-center gap-2 rounded px-3 py-1 text-sm transition-colors ' +\n                                        (active\n                                                ? 'bg-blue-600 text-white' // 當前語言樣式\n                                                : 'bg-gray-100 text-gray-800 hover:bg-gray-200 focus:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2' // 非當前語言樣式\n                                        )\n                                    }\n                                    // 無障礙屬性：標示當前頁面\n                                    aria-current={active ? 'page' : undefined}\n                                    // 無障礙屬性：螢幕閱讀器標籤\n                                    aria-label={`Switch to ${lang.title}${lang.native ? ` (${lang.native})` : ''}`}\n                                    // 滑鼠懸停提示\n                                    title={`${lang.title}${lang.native ? ` (${lang.native})` : ''}`}\n                                    // SEO 屬性：指定連結的語言\n                                    hrefLang={lang.id}\n                                    // HTML 語言屬性\n                                    lang={lang.id}\n                                >\n                                    {/* 語言圖示 */}\n                                    {lang.icon && (\n                                        <span\n                                            aria-hidden=\"true\"\n                                            className={`${lang.icon} inline-block h-4 w-4`}\n                                        />\n                                    )}\n\n                                    {/* 語言標籤文字 */}\n                                    {showLabels && <span>{label}</span>}\n\n                                    {/* 預設語言標記 */}\n                                    {lang.default && (\n                                        <span\n                                            className=\"ml-1 rounded bg-blue-500/20 px-1.5 py-0.5 text-[10px]\"\n                                            aria-label=\"Default language\"\n                                        >\n                                            default\n                                        </span>\n                                    )}\n\n                                    {/* 視覺上隱藏但對螢幕閱讀器可見的文字 */}\n                                    <span className=\"sr-only\">\n                                        {active ? '(current)' : `Switch to ${lang.title}`}\n                                    </span>\n                                </Link>\n                            </li>\n                        );\n                    })}\n                </ul>\n            )}\n        </nav>\n    );\n}"],"names":[],"mappings":";;;;AAIA;AAEA;AANA;;;;AA8Ce,SAAS,iBAAiB,EACI,SAAS,EACT,SAAS,EACT,aAAa,EACb,QAAQ,EACR,YAAY,EACZ,aAAa,IAAI,EACjB,UAAU,QAAQ,EACE;IAC7D,yBAAyB;IACzB,IAAI,CAAC,aAAa,UAAU,MAAM,KAAK,GAAG;QACtC,cAAc;QACd,wCAA4C;YACxC,qBACI,8OAAC;gBAAI,WAAW;0BACZ,cAAA,8OAAC;oBAAK,WAAU;8BAAuB;;;;;;;;;;;QAGnD;;;IAGJ;IAEA,cAAc;IACd,MAAM,kBAAkB,UAAU,IAAI,CAAC,CAAA,OAAQ,KAAK,EAAE,KAAK;IAE3D,qBACI,8OAAC;QACG,WAAW;QACX,cAAW;QACX,MAAK;kBAEJ,YAAY,aACT,sBAAsB;sBACtB,8OAAC;YAAI,WAAU;sBACX,cAAA,8OAAC;gBACG,WAAU;gBACV,iBAAc;gBACd,iBAAc;gBACd,cAAY,CAAC,kBAAkB,EAAE,iBAAiB,UAAU,iBAAiB,MAAM,0BAA0B,CAAC;;oBAG7G,iBAAiB,sBACd,8OAAC;wBACG,eAAY;wBACZ,WAAW,GAAG,gBAAgB,IAAI,CAAC,qBAAqB,CAAC;;;;;;oBAIhE,4BACG,8OAAC;kCAAM,iBAAiB,UAAU,iBAAiB;;;;;;kCAGvD,8OAAC;wBAAI,WAAU;wBAAU,MAAK;wBAAO,QAAO;wBAAe,SAAQ;kCAC/D,cAAA,8OAAC;4BAAK,eAAc;4BAAQ,gBAAe;4BAAQ,aAAa;4BAAG,GAAE;;;;;;;;;;;;;;;;;;;;;mBAMjF,gBAAgB;sBAChB,8OAAC;YACG,WAAU;YACV,MAAK;sBAEJ,UAAU,GAAG,CAAC,CAAC;gBACZ,sBAAsB;gBACtB,MAAM,QAAQ,KAAK,MAAM,IAAI,KAAK,KAAK;gBACvC,uBAAuB;gBACvB,MAAM,OAAO,CAAA,GAAA,6HAAA,CAAA,8BAA2B,AAAD,EAAE,UAAU;gBACnD,YAAY;gBACZ,MAAM,SAAS,kBAAkB,KAAK,EAAE;gBAExC,qBACI,8OAAC;oBAAiB,MAAK;8BACnB,cAAA,8OAAC,yHAAA,CAAA,OAAI;wBACD,MAAM;wBACN,QAAQ,KAAK,EAAE;wBACf,WACI,gFACA,CAAC,SACS,yBAAyB,SAAS;2BAClC,wIAAwI,UAAU;wBAC5J;wBAEJ,eAAe;wBACf,gBAAc,SAAS,SAAS;wBAChC,gBAAgB;wBAChB,cAAY,CAAC,UAAU,EAAE,KAAK,KAAK,GAAG,KAAK,MAAM,GAAG,CAAC,EAAE,EAAE,KAAK,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI;wBAC9E,SAAS;wBACT,OAAO,GAAG,KAAK,KAAK,GAAG,KAAK,MAAM,GAAG,CAAC,EAAE,EAAE,KAAK,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI;wBAC/D,iBAAiB;wBACjB,UAAU,KAAK,EAAE;wBACjB,YAAY;wBACZ,MAAM,KAAK,EAAE;;4BAGZ,KAAK,IAAI,kBACN,8OAAC;gCACG,eAAY;gCACZ,WAAW,GAAG,KAAK,IAAI,CAAC,qBAAqB,CAAC;;;;;;4BAKrD,4BAAc,8OAAC;0CAAM;;;;;;4BAGrB,KAAK,OAAO,kBACT,8OAAC;gCACG,WAAU;gCACV,cAAW;0CACd;;;;;;0CAML,8OAAC;gCAAK,WAAU;0CACX,SAAS,cAAc,CAAC,UAAU,EAAE,KAAK,KAAK,EAAE;;;;;;;;;;;;mBA7CpD,KAAK,EAAE;;;;;YAkDxB;;;;;;;;;;;AAKpB","debugId":null}},
    {"offset": {"line": 287, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/hooks/useLanguageSwitcher.ts"],"sourcesContent":["'use client';\n\nimport { usePathname, useSearchParams } from 'next/navigation';\nimport { useLocale } from 'next-intl';\nimport { useState, useEffect } from 'react';\nimport type { Language } from '@/types';\n\n/**\n * 語言切換器相關資料的自定義 Hook\n */\nexport function useLanguageSwitcher() {\n    // 取得當前路徑，用於生成語言切換連結\n    const pathname = usePathname() || '/';\n    // 取得當前語系\n    const currentLocale = useLocale();\n    // 取得 URL 查詢參數，用於保持切換語言時的參數\n    const searchParams = useSearchParams();\n\n    // 語言列表狀態\n    const [languages, setLanguages] = useState<Language[]>([]);\n    // 載入狀態\n    const [isLoading, setIsLoading] = useState(true);\n    // 錯誤狀態\n    const [error, setError] = useState<string | null>(null);\n\n    // 載入語言列表\n    useEffect(() => {\n        let isMounted = true;\n\n        const loadLanguages = async () => {\n            try {\n                setIsLoading(true);\n                setError(null);\n\n                // 使用客戶端 API 路由來獲取語言列表\n                const response = await fetch('/api/languages');\n                if (!response.ok) {\n                    throw new Error('Failed to fetch languages');\n                }\n                const languageList = await response.json();\n\n                if (isMounted) {\n                    setLanguages(languageList);\n                }\n            } catch (err) {\n                if (isMounted) {\n                    setError(err instanceof Error ? err.message : '載入語言列表失敗');\n                    console.error('Failed to load languages:', err);\n                }\n            } finally {\n                if (isMounted) {\n                    setIsLoading(false);\n                }\n            }\n        };\n\n        loadLanguages();\n\n        return () => {\n            isMounted = false;\n        };\n    }, []);\n\n    return {\n        pathname,\n        currentLocale,\n        searchParams,\n        languages,\n        isLoading,\n        error,\n    };\n}"],"names":[],"mappings":";;;AAEA;AACA;AACA;AAJA;;;;AAUO,SAAS;IACZ,oBAAoB;IACpB,MAAM,WAAW,CAAA,GAAA,kIAAA,CAAA,cAAW,AAAD,OAAO;IAClC,SAAS;IACT,MAAM,gBAAgB,CAAA,GAAA,kKAAA,CAAA,YAAS,AAAD;IAC9B,2BAA2B;IAC3B,MAAM,eAAe,CAAA,GAAA,kIAAA,CAAA,kBAAe,AAAD;IAEnC,SAAS;IACT,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAc,EAAE;IACzD,OAAO;IACP,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,OAAO;IACP,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAElD,SAAS;IACT,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACN,IAAI,YAAY;QAEhB,MAAM,gBAAgB;YAClB,IAAI;gBACA,aAAa;gBACb,SAAS;gBAET,sBAAsB;gBACtB,MAAM,WAAW,MAAM,MAAM;gBAC7B,IAAI,CAAC,SAAS,EAAE,EAAE;oBACd,MAAM,IAAI,MAAM;gBACpB;gBACA,MAAM,eAAe,MAAM,SAAS,IAAI;gBAExC,IAAI,WAAW;oBACX,aAAa;gBACjB;YACJ,EAAE,OAAO,KAAK;gBACV,IAAI,WAAW;oBACX,SAAS,eAAe,QAAQ,IAAI,OAAO,GAAG;oBAC9C,QAAQ,KAAK,CAAC,6BAA6B;gBAC/C;YACJ,SAAU;gBACN,IAAI,WAAW;oBACX,aAAa;gBACjB;YACJ;QACJ;QAEA;QAEA,OAAO;YACH,YAAY;QAChB;IACJ,GAAG,EAAE;IAEL,OAAO;QACH;QACA;QACA;QACA;QACA;QACA;IACJ;AACJ","debugId":null}},
    {"offset": {"line": 355, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/hooks/index.ts"],"sourcesContent":["export { useLanguageSwitcher } from './useLanguageSwitcher';"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 369, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/components/LanguageSwitcherContainer.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\nimport { useLanguageSwitcher } from '../hooks';\nimport LanguageSwitcher from './LanguageSwitcher';\nimport type { Language } from '@/types';\n\n/**\n * 語言切換器容器組件\n *\n * 自動處理資料載入和狀態管理的語言切換器包裝組件\n */\ntype LanguageSwitcherContainerProps = {\n    /** 自定義 CSS 類名 */\n    className?: string;\n    /** 是否顯示語言標籤文字，預設為 true */\n    showLabels?: boolean;\n    /** 顯示變體：下拉選單或內聯列表，預設為 'inline' */\n    variant?: 'dropdown' | 'inline';\n    /** 載入中的顯示內容 */\n    loadingComponent?: React.ReactNode;\n    /** 錯誤時的顯示內容 */\n    errorComponent?: React.ReactNode;\n    /** 可選的語言資料，如果提供則不會重新載入 */\n    languages?: Language[];\n};\n\nexport default function LanguageSwitcherContainer({\n                                                      className,\n                                                      showLabels = true,\n                                                      variant = 'inline',\n                                                      loadingComponent,\n                                                      errorComponent,\n                                                      languages: providedLanguages,\n                                                  }: LanguageSwitcherContainerProps) {\n    const {\n        pathname,\n        currentLocale,\n        searchParams,\n        languages: hookLanguages,\n        isLoading,\n        error,\n    } = useLanguageSwitcher();\n\n    // 如果有提供語言資料，就使用提供的，否則使用 hook 載入的\n    const languages = providedLanguages || hookLanguages;\n    const shouldShowLoading = !providedLanguages && isLoading;\n    const shouldShowError = !providedLanguages && error;\n\n    // 載入中狀態\n    if (shouldShowLoading) {\n        return loadingComponent || (\n            <div className={className}>\n                <span className=\"text-gray-500 text-sm\">載入語言選項...</span>\n            </div>\n        );\n    }\n\n    // 錯誤狀態\n    if (shouldShowError) {\n        return errorComponent || (\n            <div className={className}>\n                <span className=\"text-red-500 text-sm\">⚠️ {error}</span>\n            </div>\n        );\n    }\n\n    // 正常渲染\n    return (\n        <LanguageSwitcher\n            className={className}\n            languages={languages}\n            currentLocale={currentLocale}\n            pathname={pathname}\n            searchParams={searchParams}\n            showLabels={showLabels}\n            variant={variant}\n        />\n    );\n}"],"names":[],"mappings":";;;;AAGA;AAAA;AACA;AAJA;;;;AA2Be,SAAS,0BAA0B,EACI,SAAS,EACT,aAAa,IAAI,EACjB,UAAU,QAAQ,EAClB,gBAAgB,EAChB,cAAc,EACd,WAAW,iBAAiB,EACC;IAC/E,MAAM,EACF,QAAQ,EACR,aAAa,EACb,YAAY,EACZ,WAAW,aAAa,EACxB,SAAS,EACT,KAAK,EACR,GAAG,CAAA,GAAA,2JAAA,CAAA,sBAAmB,AAAD;IAEtB,iCAAiC;IACjC,MAAM,YAAY,qBAAqB;IACvC,MAAM,oBAAoB,CAAC,qBAAqB;IAChD,MAAM,kBAAkB,CAAC,qBAAqB;IAE9C,QAAQ;IACR,IAAI,mBAAmB;QACnB,OAAO,kCACH,8OAAC;YAAI,WAAW;sBACZ,cAAA,8OAAC;gBAAK,WAAU;0BAAwB;;;;;;;;;;;IAGpD;IAEA,OAAO;IACP,IAAI,iBAAiB;QACjB,OAAO,gCACH,8OAAC;YAAI,WAAW;sBACZ,cAAA,8OAAC;gBAAK,WAAU;;oBAAuB;oBAAI;;;;;;;;;;;;IAGvD;IAEA,OAAO;IACP,qBACI,8OAAC,8JAAA,CAAA,UAAgB;QACb,WAAW;QACX,WAAW;QACX,eAAe;QACf,UAAU;QACV,cAAc;QACd,YAAY;QACZ,SAAS;;;;;;AAGrB","debugId":null}}]
}