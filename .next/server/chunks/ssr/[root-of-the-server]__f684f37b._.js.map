{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///Users/jean/Documents/GitHub/next-minmax/src/env.mjs"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\n/**\n * 環境變數配置 - 程式碼優先的配置管理\n *\n * 設計原則：\n * 1. env.mjs 包含所有預設值和業務邏輯配置\n * 2. .env 檔案只覆寫需要變更或敏感的設定\n * 3. 開發時依賴預設值，生產時用環境變數覆蓋\n */\n\n/**\n * 伺服器端環境變數配置\n * 這些變數只在伺服器端使用，確保安全性，不會暴露給客戶端\n */\nconst server = {\n    // ==========================================\n    // 國際化與語系配置\n    // 控制多語系、地理位置偵測及語系重導功能\n    // ==========================================\n\n    /** 國際化功能總開關 */\n    INTERNATIONALIZATION_ENABLED: z.string().transform((val) => val === \"true\").default(\"true\"),\n\n    /** 多語系功能開關 */\n    MULTI_LANGUAGE_ENABLED: z.string().transform((val) => val === \"true\").default(\"true\"),\n\n    /** ip 地理偵測功能開關 */\n    GEO_DETECTION_ENABLED: z.string().transform((val) => val === \"true\").default(\"false\"),\n\n    /** 強制重導開關 */\n    FORCE_REDIRECT: z.string().transform((val) => val === \"true\").default(\"false\"),\n\n    // ==========================================\n    // 專案核心配置\n    // 專案基本資訊與預設語系設定\n    // ==========================================\n\n    /** 專案代碼 */\n    PROJECT_CODE: z.string().default(\"minmax2025\"),\n\n    /** routing - 預設語系 */\n    DEFAULT_LANGUAGE: z.string().default(\"zh-TW\"),\n\n    /** routing - 支援的語系 */\n    SUPPORTED_LOCALES: z.string().default('zh-TW,en'),\n\n    /** routing - 語系前綴  預設 不加*/\n    LOCALE_PREFIX_MODE: z.enum(['always', 'as-needed', 'never']).default('as-needed'),\n\n    /** routing - 啟用語系檢測 */\n    LOCALE_DETECTION_ENABLED: z.boolean().default(true),\n\n    /** 國家子網域對應表 (JSON) {\"TW\": \"tw\", \"US\": \"us\", \"JP\": \"jp\"} */\n    COUNTRY_SUBDOMAIN_MAP: z.string().default('{}'),\n\n    // ==========================================\n    // 🔄 快取系統配置\n    // 控制整體快取策略和生存時間\n    // ==========================================\n\n    /** 快取系統總開關 */\n    CACHE_ENABLED: z.string().transform((val) => val === \"true\").default(\"true\"),\n\n    /** CDN 快取協作開關 */\n    CACHE_CDN_ENABLED: z.string().transform((val) => val === \"true\").default(\"false\"),\n\n    /** 國際化快取策略 */\n    I18N_CACHE_STRATEGY: z.enum([\"memory\", \"redis\", \"none\"]).default(\"memory\"),\n\n    /** 快取預設生存時間 (秒) */\n    CACHE_DEFAULT_TTL: z.string().transform((val) => parseInt(val)).default(\"3600\"),\n\n    // ==========================================\n    // API 與外部服務配置\n    // API 網址、超時設定及第三方服務配置\n    // ==========================================\n\n    /** 外部後端 API 基礎網址 */\n    EXTERNAL_API_BASE_URL: z.string().default(\"https://v5.jeffy.test\"),\n\n    /** 一般 API 請求超時 (毫秒) */\n    API_TIMEOUT: z.string().transform((val) => parseInt(val)).default(\"5000\"),\n\n    /** 內容 API 請求超時 (毫秒) */\n    CONTENT_API_TIMEOUT: z.string().transform((val) => parseInt(val)).default(\"10000\"),\n\n    /** 地理位置 API 超時 (毫秒) */\n    GEO_API_TIMEOUT: z.string().transform((val) => parseInt(val)).default(\"800\"),\n\n    /** 地理位置服務提供商 */\n    GEO_API_PROVIDER: z.enum([\"ipapi\", \"ipinfo\", \"geoplugin\"]).default(\"geoplugin\"),\n\n    // ==========================================\n    // 開發與測試配置\n    // Mock API、錯誤模擬及開發工具設定\n    // ==========================================\n\n    /** Mock API 開關 */\n    USE_MOCK_API: z.string().transform((val) => val === \"true\").default(\"true\"),\n\n    /** Mock API 延遲模擬 (毫秒) */\n    MOCK_API_DELAY: z.string().transform((val) => parseInt(val)).default(\"100\"),\n\n    /** 錯誤模擬開關 */\n    MOCK_ERROR_ENABLED: z.string().transform((val) => val === \"true\").default(\"false\"),\n\n    /** 錯誤模擬機率 (0.0-1.0) */\n    MOCK_ERROR_RATE: z.string().transform((val) => parseFloat(val)).default(\"0.0\"),\n\n    // ==========================================\n    // 監控與日誌配置\n    // API 日誌記錄及效能監控開關\n    // ==========================================\n\n    /** API 請求日誌記錄 */\n    API_LOGGING_ENABLED: z.string().transform((val) => val === \"true\").default(\"true\"),\n\n    /** 效能監控開關 */\n    PERFORMANCE_MONITORING_ENABLED: z.string().transform((val) => val === \"true\").default(\"false\"),\n\n    // ==========================================\n    // 功能開關\n    // 各項業務功能的開關控制\n    // ==========================================\n\n    /** 會員功能開關 */\n   MEMBERSHIP_ENABLED: z.string().transform((val) => val === \"true\").default(\"false\"),\n\n    // ==========================================\n    // 🔐 敏感資訊\n    // 資料庫、API 金鑰等敏感資料，僅在 .env 中設定\n    // ==========================================\n\n    /** 資料庫連線字串 */\n    //DATABASE_URL: z.string().optional(),\n\n    /** Redis 連線字串 */\n    //REDIS_URL: z.string().optional(),\n\n    /** API 密鑰 */\n    //API_SECRET_KEY: z.string().optional(),\n\n    /** JWT 簽名密鑰 */\n   // JWT_SECRET: z.string().optional(),\n\n    /** 管理員 API 金鑰 */\n    //ADMIN_API_KEY: z.string().optional(),\n\n    /** 地理位置服務 API 金鑰 */\n    //GEO_API_KEY: z.string().optional(),\n};\n\n/**\n * 客戶端環境變數配置\n * 這些變數會暴露給瀏覽器，請避免包含敏感資訊\n * 所有變數都必須以 NEXT_PUBLIC_ 前綴開始\n */\n\nconst client = {\n    // ==========================================\n    // 🏗️ 專案基本資訊\n    // 前端顯示用的專案資訊和基礎配置\n    // ==========================================\n\n    /** 專案顯示名稱 */\n    NEXT_PUBLIC_PROJECT_NAME: z.string().default(\"demo測試網站\"),\n\n    /** routing - 預設語系 */\n    NEXT_PUBLIC_DEFAULT_LOCALE: z.string().default(\"zh-TW\"),\n\n    /** routing - 支援的語系 */\n    NEXT_PUBLIC_SUPPORTED_LOCALES: z.string().default('zh-TW,en'),\n\n    /** routing - 語系前綴  預設 不加*/\n    NEXT_PUBLIC_LOCALE_PREFIX_MODE: z.enum(['always', 'as-needed', 'never']).default('as-needed'),\n\n    /** routing - 啟用語系檢測 */\n    NEXT_PUBLIC_LOCALE_DETECTION_ENABLED: z.boolean().default(true),\n\n    /** API 版本號 */\n    NEXT_PUBLIC_API_VERSION: z.string().default(\"1.0.0\"),\n\n    // ==========================================\n    // 🌐 API 與服務配置\n    // 客戶端 API 呼叫相關設定\n    // ==========================================\n\n    /** 前端 API 基礎網址 */\n    NEXT_PUBLIC_API_BASE_URL: z.string().default(\"http://localhost:3000\"),\n\n    // ==========================================\n    // 🌍 國際化功能開關\n    // 前端國際化相關的功能控制\n    // ==========================================\n\n    /** 前端多語系功能開關 */\n    NEXT_PUBLIC_MULTI_LANGUAGE_ENABLED: z.string().transform((val) => val === \"true\").default(\"true\"),\n\n    /** 前端國際化功能總開關 */\n    NEXT_PUBLIC_INTERNATIONALIZATION_ENABLED: z.string().transform((val) => val === \"true\").default(\"true\"),\n\n    // ==========================================\n    // 🗺️ 地理位置偵測配置\n    // 使用者地理位置偵測與重導邏輯設定\n    // ==========================================\n\n    /** 地理位置偵測策略 */\n    NEXT_PUBLIC_GEO_DETECTION_STRATEGY: z.enum([\"cdn-only\", \"api-only\", \"cdn-fallback\"]).default(\"api-only\"),\n\n    /** ip 地理偵測功能開關 */\n    NEXT_PUBLIC_GEO_DETECTION_ENABLED: z.string().transform((val) => val === \"true\").default(\"false\"),\n\n    /** 地理重導模式 */\n    NEXT_PUBLIC_GEO_REDIRECT_MODE: z.enum([\"off\", \"suggest\", \"force\"]).default(\"suggest\"),\n\n    /** 強制重導開關 */\n    NEXT_PUBLIC_FORCE_REDIRECT: z.string().transform((val) => val === \"true\").default(\"false\"),\n\n    /** CDN 國家標頭名稱 */\n    NEXT_PUBLIC_CDN_COUNTRY_HEADER: z.string().default(\"cf-ipcountry\"),\n\n    // ==========================================\n    // 🔄 快取系統配置\n    // 前端快取策略和生存時間\n    // ==========================================\n\n    /** 前端快取功能開關 */\n    NEXT_PUBLIC_CACHE_ENABLED: z.string().transform((val) => val === \"true\").default(\"true\"),\n\n    /** 前端 CDN 快取協作開關 */\n    NEXT_PUBLIC_CACHE_CDN_ENABLED: z.string().transform((val) => val === \"true\").default(\"false\"),\n\n    /** 前端快取預設生存時間 (秒) */\n    NEXT_PUBLIC_CACHE_DEFAULT_TTL: z.string().transform((val) => parseInt(val)).default(\"3600\"),\n\n    // ==========================================\n    // ⚙️ 前端功能配置\n    // 前端特有的功能開關和配置\n    // ==========================================\n\n    /** 開發模式開關 */\n    NEXT_PUBLIC_DEV_MODE_ENABLED: z.string().transform((val) => val === \"true\").default(\"false\"),\n\n    /** 會員功能開關 */\n    NEXT_PUBLIC_MEMBERSHIP_ENABLED: z.string().transform((val) => val === \"true\").default(\"false\"),\n\n    // ==========================================\n    // 🔧 開發與測試配置\n    // 前端可見的開發工具設定\n    // ==========================================\n\n    /** 前端 Mock API 開關 */\n    NEXT_PUBLIC_USE_MOCK_API: z.string().transform((val) => val === \"true\").default(\"true\"),\n\n    /** 前端 Mock API 延遲模擬 (毫秒) */\n    NEXT_PUBLIC_MOCK_API_DELAY: z.string().transform((val) => parseInt(val)).default(\"100\"),\n\n    /** 前端錯誤模擬開關 */\n    NEXT_PUBLIC_MOCK_ERROR_ENABLED: z.string().transform((val) => val === \"true\").default(\"false\"),\n\n    /** 前端錯誤模擬機率 (0.0-1.0) */\n    NEXT_PUBLIC_MOCK_ERROR_RATE: z.string().transform((val) => parseFloat(val)).default(\"0.0\"),\n\n    // ==========================================\n    // 📊 監控與日誌配置\n    // 前端監控和日誌記錄設定\n    // ==========================================\n\n    /** 前端 API 請求日誌記錄 */\n    NEXT_PUBLIC_API_LOGGING_ENABLED: z.string().transform((val) => val === \"true\").default(\"false\"),\n\n    /** 前端效能監控開關 */\n    NEXT_PUBLIC_PERFORMANCE_MONITORING_ENABLED: z.string().transform((val) => val === \"true\").default(\"false\"),\n\n    // ==========================================\n    // 🔧 外部服務配置\n    // 第三方服務的公開配置項目\n    // ==========================================\n\n    /** 錯誤追蹤服務 DSN */\n    NEXT_PUBLIC_SENTRY_DSN: z.string().optional(),\n\n    /** 前端地理位置服務提供商 */\n    NEXT_PUBLIC_GEO_API_PROVIDER: z.enum([\"ipapi\", \"ipinfo\", \"geoplugin\"]).default(\"geoplugin\"),\n\n    // ==========================================\n    // ⏱️ 超時設定\n    // 前端 API 請求超時配置\n    // ==========================================\n\n    /** 前端一般 API 請求超時 (毫秒) */\n    NEXT_PUBLIC_API_TIMEOUT: z.string().transform((val) => parseInt(val)).default(\"30000\"),\n\n    /** 前端內容 API 請求超時 (毫秒) */\n    NEXT_PUBLIC_CONTENT_API_TIMEOUT: z.string().transform((val) => parseInt(val)).default(\"60000\"),\n\n    /** 前端地理位置 API 超時 (毫秒) */\n    NEXT_PUBLIC_GEO_API_TIMEOUT: z.string().transform((val) => parseInt(val)).default(\"5000\"),\n};\n\n// 取得所有 schema 的鍵名\nconst serverKeys = Object.keys(server);\nconst clientKeys = Object.keys(client);\n\nexport const env = createEnv({\n    server,\n    client,\n\n    /**\n     * 運行時環境變數映射\n     * 精確地從 process.env 映射我們定義的變數\n     */\n    runtimeEnv: {\n        ...Object.fromEntries(\n            serverKeys.map(key => [key, process.env[key]])\n        ),\n        ...Object.fromEntries(\n            clientKeys.map(key => [key, process.env[key]])\n        ),\n    },\n});"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 206, "column": 0}, "map": {"version":3,"sources":["file:///Users/jean/Documents/GitHub/next-minmax/src/config/api.config.ts"],"sourcesContent":["import { env } from '@/env.mjs';\n\n/**\n * API 相關配置\n */\nexport const API_CONFIG = {\n    // 基礎配置\n    BASE_URL: env.NEXT_PUBLIC_API_BASE_URL, // 前端 API 基礎網址\n    EXTERNAL_BASE_URL: env.NEXT_PUBLIC_API_BASE_URL,  // 外部後端 API\n    PROJECT_NAME: env.NEXT_PUBLIC_PROJECT_NAME, // 專案代碼名稱\n\n    // 超時設定\n    TIMEOUT: {\n        DEFAULT: env.API_TIMEOUT, // 一般 API 請求超時 (毫秒)\n        CONTENT: env.CONTENT_API_TIMEOUT, // 內容 API 請求超時 (毫秒)\n        GEO: env.GEO_API_TIMEOUT, // 地理位置 API 超時 (毫秒)\n    },\n\n    // 重試設定\n    RETRY: {\n        ATTEMPTS: 3, // 重試次數\n        DELAY: 1000, // 重試延遲 (毫秒)\n        EXPONENTIAL_BACKOFF: true, // 指數退避策略\n    },\n\n    // 模式設定\n    USE_MOCK: env.USE_MOCK_API, // Mock API 開關\n    LOGGING: env.API_LOGGING_ENABLED, // API 請求日誌記錄開關\n\n    // API 端點 - Mock 與正式版本統一管理\n    ENDPOINTS: {\n        // Mock API 端點 (Next.js API Routes)\n        MOCK: {\n            LANGUAGE: '/api/ssr/languages', // 語言資料端點\n            LOCALES: '/api/ssr/locales', // 地區設定端點\n            SYSTEM_MENUS: '/api/ssr/system-menus', // 系統選單端點\n            WEB_DATA: '/api/ssr/web-data', // 網站資料端點\n            DETAIL: '/api/ssr/detail', // 詳細資料端點\n        },\n\n        // 正式 API 端點 (外部後端)\n        EXTERNAL: {\n            LANGUAGE: '/api/v1/languages', // 語言資料端點\n            LOCALES: '/api/v1/locales', // 地區設定端點\n            SYSTEM_MENUS: '/api/v1/system-menus', // 系統選單端點\n            WEB_DATA: '/api/v1/web-data', // 網站資料端點\n            DETAIL: '/api/v1/detail', // 詳細資料端點\n        }\n    }\n} as const;"],"names":[],"mappings":";;;AAAA;;AAKO,MAAM,aAAa;IACtB,OAAO;IACP,UAAU,2GAAA,CAAA,MAAG,CAAC,wBAAwB;IACtC,mBAAmB,2GAAA,CAAA,MAAG,CAAC,wBAAwB;IAC/C,cAAc,2GAAA,CAAA,MAAG,CAAC,wBAAwB;IAE1C,OAAO;IACP,SAAS;QACL,SAAS,2GAAA,CAAA,MAAG,CAAC,WAAW;QACxB,SAAS,2GAAA,CAAA,MAAG,CAAC,mBAAmB;QAChC,KAAK,2GAAA,CAAA,MAAG,CAAC,eAAe;IAC5B;IAEA,OAAO;IACP,OAAO;QACH,UAAU;QACV,OAAO;QACP,qBAAqB;IACzB;IAEA,OAAO;IACP,UAAU,2GAAA,CAAA,MAAG,CAAC,YAAY;IAC1B,SAAS,2GAAA,CAAA,MAAG,CAAC,mBAAmB;IAEhC,0BAA0B;IAC1B,WAAW;QACP,mCAAmC;QACnC,MAAM;YACF,UAAU;YACV,SAAS;YACT,cAAc;YACd,UAAU;YACV,QAAQ;QACZ;QAEA,mBAAmB;QACnB,UAAU;YACN,UAAU;YACV,SAAS;YACT,cAAc;YACd,UAAU;YACV,QAAQ;QACZ;IACJ;AACJ","debugId":null}},
    {"offset": {"line": 255, "column": 0}, "map": {"version":3,"sources":["file:///Users/jean/Documents/GitHub/next-minmax/src/config/app.client.config.ts"],"sourcesContent":["import { env } from '@/env.mjs';\n\n/**\n * 應用程式客戶端配置\n * 只包含可在瀏覽器中安全使用的配置\n */\nexport const APP_CONFIG = {\n    // 專案基本資訊\n    PROJECT_NAME: env.PROJECT_CODE, // 專案代碼名稱\n\n    // API 配置 (僅前端可用)\n    API: {\n        BASE_URL: env.NEXT_PUBLIC_API_BASE_URL, // 前端 API 基礎網址\n        TIMEOUT: 30000, // 客戶端預設超時\n    },\n\n    // 功能開關 (僅前端相關)\n    FEATURES: {\n        MULTI_LANGUAGE: env.NEXT_PUBLIC_MULTI_LANGUAGE_ENABLED, // 多語系功能開關\n        DEV_MODE: env.NEXT_PUBLIC_DEV_MODE_ENABLED, // 開發模式開關\n    },\n\n    // 地理位置配置 (僅前端相關)\n    GEO: {\n        DETECTION_STRATEGY: env.NEXT_PUBLIC_GEO_DETECTION_STRATEGY, // 地理位置偵測策略\n        REDIRECT_MODE: env.NEXT_PUBLIC_GEO_REDIRECT_MODE, // 地理重導模式\n        CDN_COUNTRY_HEADER: env.NEXT_PUBLIC_CDN_COUNTRY_HEADER, // CDN 國家標頭名稱\n    },\n\n    // 語系配置 (僅前端相關)\n    LOCALE: {\n        CLIENT_DEFAULT: env.NEXT_PUBLIC_DEFAULT_LOCALE, // 前端預設語系\n        MULTI_LANGUAGE_ENABLED: env.NEXT_PUBLIC_MULTI_LANGUAGE_ENABLED, // 前端多語系功能開關\n    }\n} as const;\n\n// 導出類型\nexport type AppClientConfig = typeof APP_CONFIG;"],"names":[],"mappings":";;;AAAA;;AAMO,MAAM,aAAa;IACtB,SAAS;IACT,cAAc,2GAAA,CAAA,MAAG,CAAC,YAAY;IAE9B,iBAAiB;IACjB,KAAK;QACD,UAAU,2GAAA,CAAA,MAAG,CAAC,wBAAwB;QACtC,SAAS;IACb;IAEA,eAAe;IACf,UAAU;QACN,gBAAgB,2GAAA,CAAA,MAAG,CAAC,kCAAkC;QACtD,UAAU,2GAAA,CAAA,MAAG,CAAC,4BAA4B;IAC9C;IAEA,iBAAiB;IACjB,KAAK;QACD,oBAAoB,2GAAA,CAAA,MAAG,CAAC,kCAAkC;QAC1D,eAAe,2GAAA,CAAA,MAAG,CAAC,6BAA6B;QAChD,oBAAoB,2GAAA,CAAA,MAAG,CAAC,8BAA8B;IAC1D;IAEA,eAAe;IACf,QAAQ;QACJ,gBAAgB,2GAAA,CAAA,MAAG,CAAC,0BAA0B;QAC9C,wBAAwB,2GAAA,CAAA,MAAG,CAAC,kCAAkC;IAClE;AACJ","debugId":null}},
    {"offset": {"line": 289, "column": 0}, "map": {"version":3,"sources":["file:///Users/jean/Documents/GitHub/next-minmax/src/config/app.server.config.ts"],"sourcesContent":["import { env } from '@/env.mjs';\n\n/**\n * 應用程式服務端配置\n * 包含所有服務端專用的配置，包括敏感資訊\n */\nexport const SERVER_APP_CONFIG = {\n    // 專案基本資訊\n    PROJECT_NAME: env.PROJECT_CODE, // 專案代碼名稱\n\n    // API 配置\n    API: {\n        BASE_URL: env.NEXT_PUBLIC_API_BASE_URL, // 前端 API 基礎網址\n        EXTERNAL_URL: env.EXTERNAL_API_BASE_URL, // 外部後端 API 基礎網址\n        TIMEOUT: env.API_TIMEOUT, // 一般 API 請求超時 (毫秒)\n        CONTENT_TIMEOUT: env.CONTENT_API_TIMEOUT, // 內容 API 請求超時 (毫秒)\n        GEO_TIMEOUT: env.GEO_API_TIMEOUT, // 地理位置 API 超時 (毫秒)\n    },\n\n    // 功能開關\n    FEATURES: {\n        INTERNATIONALIZATION: env.INTERNATIONALIZATION_ENABLED, // 國際化功能總開關\n        GEO_DETECTION: env.GEO_DETECTION_ENABLED, // IP 地理偵測功能開關\n        FORCE_REDIRECT: env.FORCE_REDIRECT, // 強制重導開關\n        MULTI_LANGUAGE: env.MULTI_LANGUAGE_ENABLED, // 多語系功能開關\n        MEMBERSHIP: env.MEMBERSHIP_ENABLED, // 會員功能開關\n        CACHE: env.CACHE_ENABLED, // 快取系統總開關\n    },\n\n    // 快取配置\n    CACHE: {\n        ENABLED: env.CACHE_ENABLED, // 快取系統總開關\n        CDN_ENABLED: env.CACHE_CDN_ENABLED, // CDN 快取協作開關\n        STRATEGY: env.I18N_CACHE_STRATEGY, // 國際化快取策略\n        DEFAULT_TTL: env.CACHE_DEFAULT_TTL, // 快取預設生存時間 (秒)\n    },\n\n    // 地理位置配置\n    GEO: {\n        DETECTION_STRATEGY: env.NEXT_PUBLIC_GEO_DETECTION_STRATEGY, // 地理位置偵測策略\n        REDIRECT_MODE: env.NEXT_PUBLIC_GEO_REDIRECT_MODE, // 地理重導模式\n        CDN_COUNTRY_HEADER: env.NEXT_PUBLIC_CDN_COUNTRY_HEADER, // CDN 國家標頭名稱\n        API_PROVIDER: env.GEO_API_PROVIDER, // 地理位置服務提供商\n        API_TIMEOUT: env.GEO_API_TIMEOUT, // 地理位置 API 超時 (毫秒)\n    },\n\n    // Mock 與測試配置\n    MOCK: {\n        USE_MOCK_API: env.USE_MOCK_API, // Mock API 開關\n        API_DELAY: env.MOCK_API_DELAY, // Mock API 延遲模擬 (毫秒)\n        ERROR_ENABLED: env.MOCK_ERROR_ENABLED, // 錯誤模擬開關\n        ERROR_RATE: env.MOCK_ERROR_RATE, // 錯誤模擬機率 (0.0-1.0)\n    },\n\n    // 開發與監控\n    DEV: {\n        API_LOGGING: env.API_LOGGING_ENABLED, // API 請求日誌記錄開關\n        PERFORMANCE_MONITORING: env.PERFORMANCE_MONITORING_ENABLED, // 效能監控開關\n        DEV_MODE: env.NEXT_PUBLIC_DEV_MODE_ENABLED, // 開發模式開關\n    },\n\n    // 語系配置\n    LOCALE: {\n        DEFAULT: env.DEFAULT_LANGUAGE, // 預設語系\n        CLIENT_DEFAULT: env.NEXT_PUBLIC_DEFAULT_LOCALE, // 前端預設語系\n        MULTI_LANGUAGE_ENABLED: env.NEXT_PUBLIC_MULTI_LANGUAGE_ENABLED, // 前端多語系功能開關\n        COUNTRY_SUBDOMAIN_MAP: env.COUNTRY_SUBDOMAIN_MAP, // 國家子網域對應表 (JSON)\n    }\n} as const;\n\n// 導出類型\nexport type ServerAppConfig = typeof SERVER_APP_CONFIG;"],"names":[],"mappings":";;;AAAA;;AAMO,MAAM,oBAAoB;IAC7B,SAAS;IACT,cAAc,2GAAA,CAAA,MAAG,CAAC,YAAY;IAE9B,SAAS;IACT,KAAK;QACD,UAAU,2GAAA,CAAA,MAAG,CAAC,wBAAwB;QACtC,cAAc,2GAAA,CAAA,MAAG,CAAC,qBAAqB;QACvC,SAAS,2GAAA,CAAA,MAAG,CAAC,WAAW;QACxB,iBAAiB,2GAAA,CAAA,MAAG,CAAC,mBAAmB;QACxC,aAAa,2GAAA,CAAA,MAAG,CAAC,eAAe;IACpC;IAEA,OAAO;IACP,UAAU;QACN,sBAAsB,2GAAA,CAAA,MAAG,CAAC,4BAA4B;QACtD,eAAe,2GAAA,CAAA,MAAG,CAAC,qBAAqB;QACxC,gBAAgB,2GAAA,CAAA,MAAG,CAAC,cAAc;QAClC,gBAAgB,2GAAA,CAAA,MAAG,CAAC,sBAAsB;QAC1C,YAAY,2GAAA,CAAA,MAAG,CAAC,kBAAkB;QAClC,OAAO,2GAAA,CAAA,MAAG,CAAC,aAAa;IAC5B;IAEA,OAAO;IACP,OAAO;QACH,SAAS,2GAAA,CAAA,MAAG,CAAC,aAAa;QAC1B,aAAa,2GAAA,CAAA,MAAG,CAAC,iBAAiB;QAClC,UAAU,2GAAA,CAAA,MAAG,CAAC,mBAAmB;QACjC,aAAa,2GAAA,CAAA,MAAG,CAAC,iBAAiB;IACtC;IAEA,SAAS;IACT,KAAK;QACD,oBAAoB,2GAAA,CAAA,MAAG,CAAC,kCAAkC;QAC1D,eAAe,2GAAA,CAAA,MAAG,CAAC,6BAA6B;QAChD,oBAAoB,2GAAA,CAAA,MAAG,CAAC,8BAA8B;QACtD,cAAc,2GAAA,CAAA,MAAG,CAAC,gBAAgB;QAClC,aAAa,2GAAA,CAAA,MAAG,CAAC,eAAe;IACpC;IAEA,aAAa;IACb,MAAM;QACF,cAAc,2GAAA,CAAA,MAAG,CAAC,YAAY;QAC9B,WAAW,2GAAA,CAAA,MAAG,CAAC,cAAc;QAC7B,eAAe,2GAAA,CAAA,MAAG,CAAC,kBAAkB;QACrC,YAAY,2GAAA,CAAA,MAAG,CAAC,eAAe;IACnC;IAEA,QAAQ;IACR,KAAK;QACD,aAAa,2GAAA,CAAA,MAAG,CAAC,mBAAmB;QACpC,wBAAwB,2GAAA,CAAA,MAAG,CAAC,8BAA8B;QAC1D,UAAU,2GAAA,CAAA,MAAG,CAAC,4BAA4B;IAC9C;IAEA,OAAO;IACP,QAAQ;QACJ,SAAS,2GAAA,CAAA,MAAG,CAAC,gBAAgB;QAC7B,gBAAgB,2GAAA,CAAA,MAAG,CAAC,0BAA0B;QAC9C,wBAAwB,2GAAA,CAAA,MAAG,CAAC,kCAAkC;QAC9D,uBAAuB,2GAAA,CAAA,MAAG,CAAC,qBAAqB;IACpD;AACJ","debugId":null}},
    {"offset": {"line": 354, "column": 0}, "map": {"version":3,"sources":["file:///Users/jean/Documents/GitHub/next-minmax/src/config/locale.server.config.ts"],"sourcesContent":["import { env } from '@/env.mjs';\n\n/**\n * 服務端語系配置\n * 只能在服務端使用\n */\nexport const SERVER_LOCALE_CONFIG = {\n    SUPPORTED_LOCALES: env.SUPPORTED_LOCALES.split(',').map((l) => l.trim()),\n    DEFAULT_LOCALE: env.DEFAULT_LANGUAGE,\n    LOCALE_PREFIX_MODE: env.LOCALE_PREFIX_MODE,\n    FALLBACK_LOCALE: 'zh-TW' as const,\n\n    DETECTION: {\n        ENABLED: env.MULTI_LANGUAGE_ENABLED,\n        GEO_ENABLED: env.GEO_DETECTION_ENABLED,\n        CACHE_TTL: 3600,\n    },\n\n    CACHE: {\n        STRATEGY: env.I18N_CACHE_STRATEGY,\n        TTL: 3600,\n    },\n\n    COUNTRY_SUBDOMAIN_MAP: JSON.parse(env.COUNTRY_SUBDOMAIN_MAP),\n\n    // 工具函數\n    isValidLocale: (locale: string): boolean => {\n        return env.SUPPORTED_LOCALES.split(',').map((l) => l.trim()).includes(locale);\n    },\n\n    // 服務端專用函數\n    getSubdomainByCountry: (country: string): string | null => {\n        const map = JSON.parse(env.COUNTRY_SUBDOMAIN_MAP);\n        return map[country] || null;\n    }\n} as const;"],"names":[],"mappings":";;;AAAA;;AAMO,MAAM,uBAAuB;IAChC,mBAAmB,2GAAA,CAAA,MAAG,CAAC,iBAAiB,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,IAAM,EAAE,IAAI;IACrE,gBAAgB,2GAAA,CAAA,MAAG,CAAC,gBAAgB;IACpC,oBAAoB,2GAAA,CAAA,MAAG,CAAC,kBAAkB;IAC1C,iBAAiB;IAEjB,WAAW;QACP,SAAS,2GAAA,CAAA,MAAG,CAAC,sBAAsB;QACnC,aAAa,2GAAA,CAAA,MAAG,CAAC,qBAAqB;QACtC,WAAW;IACf;IAEA,OAAO;QACH,UAAU,2GAAA,CAAA,MAAG,CAAC,mBAAmB;QACjC,KAAK;IACT;IAEA,uBAAuB,KAAK,KAAK,CAAC,2GAAA,CAAA,MAAG,CAAC,qBAAqB;IAE3D,OAAO;IACP,eAAe,CAAC;QACZ,OAAO,2GAAA,CAAA,MAAG,CAAC,iBAAiB,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,IAAM,EAAE,IAAI,IAAI,QAAQ,CAAC;IAC1E;IAEA,UAAU;IACV,uBAAuB,CAAC;QACpB,MAAM,MAAM,KAAK,KAAK,CAAC,2GAAA,CAAA,MAAG,CAAC,qBAAqB;QAChD,OAAO,GAAG,CAAC,QAAQ,IAAI;IAC3B;AACJ","debugId":null}},
    {"offset": {"line": 388, "column": 0}, "map": {"version":3,"sources":["file:///Users/jean/Documents/GitHub/next-minmax/src/config/locale.client.config.ts"],"sourcesContent":["import { env } from '@/env.mjs';\n\n/**\n * 客戶端語系配置\n * 可以在客戶端和服務端使用\n */\nexport const CLIENT_LOCALE_CONFIG = {\n    SUPPORTED_LOCALES: env.NEXT_PUBLIC_SUPPORTED_LOCALES.split(',').map((l) => l.trim()),\n    DEFAULT_LOCALE: env.NEXT_PUBLIC_DEFAULT_LOCALE,\n    LOCALE_PREFIX_MODE: env.NEXT_PUBLIC_LOCALE_PREFIX_MODE,\n    MULTI_LANGUAGE_ENABLED: env.NEXT_PUBLIC_MULTI_LANGUAGE_ENABLED,\n\n    DETECTION: {\n        STRATEGY: env.NEXT_PUBLIC_GEO_DETECTION_STRATEGY,\n        REDIRECT_MODE: env.NEXT_PUBLIC_GEO_REDIRECT_MODE,\n        CDN_HEADER: env.NEXT_PUBLIC_CDN_COUNTRY_HEADER,\n    },\n\n    // 客戶端工具函數\n    isValidLocale: (locale: string): boolean => {\n        return env.NEXT_PUBLIC_SUPPORTED_LOCALES.split(',').map((l) => l.trim()).includes(locale);\n    }\n} as const;"],"names":[],"mappings":";;;AAAA;;AAMO,MAAM,uBAAuB;IAChC,mBAAmB,2GAAA,CAAA,MAAG,CAAC,6BAA6B,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,IAAM,EAAE,IAAI;IACjF,gBAAgB,2GAAA,CAAA,MAAG,CAAC,0BAA0B;IAC9C,oBAAoB,2GAAA,CAAA,MAAG,CAAC,8BAA8B;IACtD,wBAAwB,2GAAA,CAAA,MAAG,CAAC,kCAAkC;IAE9D,WAAW;QACP,UAAU,2GAAA,CAAA,MAAG,CAAC,kCAAkC;QAChD,eAAe,2GAAA,CAAA,MAAG,CAAC,6BAA6B;QAChD,YAAY,2GAAA,CAAA,MAAG,CAAC,8BAA8B;IAClD;IAEA,UAAU;IACV,eAAe,CAAC;QACZ,OAAO,2GAAA,CAAA,MAAG,CAAC,6BAA6B,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,IAAM,EAAE,IAAI,IAAI,QAAQ,CAAC;IACtF;AACJ","debugId":null}},
    {"offset": {"line": 412, "column": 0}, "map": {"version":3,"sources":["file:///Users/jean/Documents/GitHub/next-minmax/src/config/locale.config.ts"],"sourcesContent":["/**\n * 統一的語系配置入口\n * 根據執行環境動態導入適當的配置\n */\n\n// 動態導入，避免客戶端打包服務端配置\nexport const getLocaleConfig = async () => {\n    if (typeof window === 'undefined') {\n        // 服務端：導入服務端配置\n        const { SERVER_LOCALE_CONFIG } = await import('./locale.server.config');\n        return SERVER_LOCALE_CONFIG;\n    } else {\n        // 客戶端：導入客戶端配置\n        const { CLIENT_LOCALE_CONFIG } = await import('./locale.client.config');\n        return CLIENT_LOCALE_CONFIG;\n    }\n};\n\n// 同步版本（僅供客戶端使用）\nexport const getClientLocaleConfig = async () => {\n    if (typeof window === 'undefined') {\n        throw new Error('getClientLocaleConfig 只能在客戶端調用');\n    }\n    // 使用動態 import 替代 require\n    const { CLIENT_LOCALE_CONFIG } = await import('./locale.client.config');\n    return CLIENT_LOCALE_CONFIG;\n};\n\n// 直接導出客戶端配置（供客戶端組件使用）\nexport { CLIENT_LOCALE_CONFIG } from './locale.client.config';\n\nexport type SupportedLocale = string;"],"names":[],"mappings":"AAAA;;;CAGC,GAED,oBAAoB;;;;;AAuBpB,sBAAsB;AACtB;AAvBO,MAAM,kBAAkB;IAC3B,wCAAmC;QAC/B,cAAc;QACd,MAAM,EAAE,oBAAoB,EAAE,GAAG;QACjC,OAAO;IACX;;AAKJ;AAGO,MAAM,wBAAwB;IACjC,wCAAmC;QAC/B,MAAM,IAAI,MAAM;IACpB;IACA,yBAAyB;IACzB,MAAM,EAAE,oBAAoB,EAAE,GAAG;IACjC,OAAO;AACX","debugId":null}},
    {"offset": {"line": 450, "column": 0}, "map": {"version":3,"sources":["file:///Users/jean/Documents/GitHub/next-minmax/src/config/cache.client.config.ts"],"sourcesContent":["/**\n * 快取系統客戶端配置檔案\n * 只包含客戶端可安全使用的快取配置\n */\n\n/**\n * 快取資料類型定義 - 統一管理所有快取相關設定\n */\nconst CACHE_DATA_TYPES = {\n    LANGUAGES: {\n        ttl: 7200,  // 2小時\n        tags: ['languages', 'static-data'] as string[],\n        description: '語言資料快取'\n    },\n    LOCALES: {\n        ttl: 7200,  // 2小時\n        tags: ['locales', 'static-data'] as string[],\n        description: '地區設定快取'\n    },\n    MENUS: {\n        ttl: 3600,  // 1小時\n        tags: ['menus', 'navigation'] as string[],\n        description: '選單資料快取'\n    },\n    WEB_DATA: {\n        ttl: 3600,  // 1小時\n        tags: ['web-data', 'static-data'] as string[],\n        description: '網站資料快取'\n    },\n    PAGES: {\n        ttl: 1800,  // 30分鐘\n        tags: ['pages', 'content'] as string[],\n        description: '頁面內容快取'\n    },\n    GEO_DATA: {\n        ttl: 1800,  // 30分鐘\n        tags: ['geo-data', 'location'] as string[],\n        description: '地理位置資料快取'\n    },\n    USER_DATA: {\n        ttl: 600,   // 10分鐘\n        tags: ['user-data', 'dynamic-data'] as string[],\n        description: '使用者資料快取'\n    },\n    API_RESPONSE: {\n        ttl: 3600,  // 預設 1小時，服務端會覆蓋\n        tags: ['api-response'] as string[],\n        description: 'API 回應快取'\n    },\n} as const;\n\n/**\n * 客戶端快取配置\n */\nexport const CACHE_CONFIG = {\n    // 基礎配置 (客戶端預設值)\n    ENABLED: true,\n    CDN_ENABLED: false,\n    DEFAULT_TTL: 3600,\n    STRATEGY: 'memory' as const,\n\n    // Redis 配置 (客戶端不使用)\n    REDIS: {\n        PREFIX: 'minmax:',\n        KEY_SEPARATOR: ':',\n    },\n\n    // 從 CACHE_DATA_TYPES 自動生成 TTL 和 TAGS\n    TTL: {\n        LANGUAGES: CACHE_DATA_TYPES.LANGUAGES.ttl,\n        LOCALES: CACHE_DATA_TYPES.LOCALES.ttl,\n        MENUS: CACHE_DATA_TYPES.MENUS.ttl,\n        WEB_DATA: CACHE_DATA_TYPES.WEB_DATA.ttl,\n        PAGES: CACHE_DATA_TYPES.PAGES.ttl,\n        GEO_DATA: CACHE_DATA_TYPES.GEO_DATA.ttl,\n        USER_DATA: CACHE_DATA_TYPES.USER_DATA.ttl,\n        API_RESPONSE: CACHE_DATA_TYPES.API_RESPONSE.ttl,\n    },\n\n    TAGS: {\n        LANGUAGES: CACHE_DATA_TYPES.LANGUAGES.tags,\n        LOCALES: CACHE_DATA_TYPES.LOCALES.tags,\n        MENUS: CACHE_DATA_TYPES.MENUS.tags,\n        WEB_DATA: CACHE_DATA_TYPES.WEB_DATA.tags,\n        PAGES: CACHE_DATA_TYPES.PAGES.tags,\n        GEO_DATA: CACHE_DATA_TYPES.GEO_DATA.tags,\n        USER_DATA: CACHE_DATA_TYPES.USER_DATA.tags,\n        API_RESPONSE: CACHE_DATA_TYPES.API_RESPONSE.tags,\n    },\n\n    // 快取鍵值生成函數\n    generateKey: (type: CacheDataType, identifier: string, locale?: string): string => {\n        const parts = [CACHE_CONFIG.REDIS.PREFIX, type, identifier];\n        if (locale) parts.push(locale);\n        return parts.join(CACHE_CONFIG.REDIS.KEY_SEPARATOR);\n    },\n} as const;\n\n// 輔助函數和類型定義\nexport type CacheDataType = keyof typeof CACHE_DATA_TYPES;\n\n/**\n * 取得指定資料類型的完整配置\n */\nexport function getCacheConfig(type: CacheDataType) {\n    return CACHE_DATA_TYPES[type];\n}\n\n/**\n * 取得指定資料類型的 TTL (毫秒)\n */\nexport function getCacheTTL(type: CacheDataType): number {\n    return CACHE_DATA_TYPES[type].ttl * 1000;\n}\n\n/**\n * 取得指定資料類型的標籤\n */\nexport function getCacheTags(type: CacheDataType): string[] {\n    return CACHE_DATA_TYPES[type].tags;\n}\n\n/**\n * 根據標籤找到相關的資料類型\n */\nexport function getDataTypesByTag(tag: string): CacheDataType[] {\n    return Object.entries(CACHE_DATA_TYPES)\n        .filter(([_, config]) => config.tags.includes(tag))\n        .map(([key]) => key as CacheDataType);\n}\n\n/**\n * 取得所有可用的標籤\n */\nexport function getAllCacheTags(): string[] {\n    const allTags = Object.values(CACHE_DATA_TYPES).flatMap(config => config.tags);\n    return [...new Set(allTags)];\n}\n\n/**\n * 取得快取配置摘要 (用於除錯)\n */\nexport function getCacheConfigSummary() {\n    return Object.entries(CACHE_DATA_TYPES).map(([type, config]) => ({\n        type,\n        ttl: `${config.ttl}s (${config.ttl / 60}min)`,\n        tags: config.tags.join(', '),\n        description: config.description\n    }));\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 602, "column": 0}, "map": {"version":3,"sources":["file:///Users/jean/Documents/GitHub/next-minmax/src/config/cache.server.config.ts"],"sourcesContent":["/**\n * 快取系統服務端配置檔案\n * 包含完整的快取配置，包括環境變數\n */\n\nimport { env } from '@/env.mjs';\nimport {\n    getCacheConfig,\n    getCacheTTL,\n    getCacheTags,\n    getDataTypesByTag,\n    getAllCacheTags,\n    getCacheConfigSummary,\n    type CacheDataType\n} from './cache.client.config';\n\n/**\n * 快取資料類型定義 - 統一管理所有快取相關設定\n */\nconst SERVER_CACHE_DATA_TYPES = {\n    LANGUAGES: {\n        ttl: 7200,  // 2小時\n        tags: ['languages', 'static-data'] as string[],\n        description: '語言資料快取'\n    },\n    LOCALES: {\n        ttl: 7200,  // 2小時\n        tags: ['locales', 'static-data'] as string[],\n        description: '地區設定快取'\n    },\n    MENUS: {\n        ttl: 3600,  // 1小時\n        tags: ['menus', 'navigation'] as string[],\n        description: '選單資料快取'\n    },\n    WEB_DATA: {\n        ttl: 3600,  // 1小時\n        tags: ['web-data', 'static-data'] as string[],\n        description: '網站資料快取'\n    },\n    PAGES: {\n        ttl: 1800,  // 30分鐘\n        tags: ['pages', 'content'] as string[],\n        description: '頁面內容快取'\n    },\n    GEO_DATA: {\n        ttl: 1800,  // 30分鐘\n        tags: ['geo-data', 'location'] as string[],\n        description: '地理位置資料快取'\n    },\n    USER_DATA: {\n        ttl: 600,   // 10分鐘\n        tags: ['user-data', 'dynamic-data'] as string[],\n        description: '使用者資料快取'\n    },\n    API_RESPONSE: {\n        ttl: env.CACHE_DEFAULT_TTL,\n        tags: ['api-response'] as string[],\n        description: 'API 回應快取'\n    },\n} as const;\n\n/**\n * 服務端快取配置\n */\nexport const SERVER_CACHE_CONFIG = {\n    // 基礎配置 (從環境變數讀取)\n    ENABLED: env.CACHE_ENABLED,\n    CDN_ENABLED: env.CACHE_CDN_ENABLED,\n    DEFAULT_TTL: env.CACHE_DEFAULT_TTL,\n    STRATEGY: env.I18N_CACHE_STRATEGY,\n\n    // Redis 配置\n    REDIS: {\n        URL: undefined, // 可以從環境變數添加\n        PREFIX: 'minmax:',\n        KEY_SEPARATOR: ':',\n    },\n\n    // 從 SERVER_CACHE_DATA_TYPES 自動生成 TTL 和 TAGS\n    TTL: {\n        LANGUAGES: SERVER_CACHE_DATA_TYPES.LANGUAGES.ttl,\n        LOCALES: SERVER_CACHE_DATA_TYPES.LOCALES.ttl,\n        MENUS: SERVER_CACHE_DATA_TYPES.MENUS.ttl,\n        WEB_DATA: SERVER_CACHE_DATA_TYPES.WEB_DATA.ttl,\n        PAGES: SERVER_CACHE_DATA_TYPES.PAGES.ttl,\n        GEO_DATA: SERVER_CACHE_DATA_TYPES.GEO_DATA.ttl,\n        USER_DATA: SERVER_CACHE_DATA_TYPES.USER_DATA.ttl,\n        API_RESPONSE: SERVER_CACHE_DATA_TYPES.API_RESPONSE.ttl,\n    },\n\n    TAGS: {\n        LANGUAGES: SERVER_CACHE_DATA_TYPES.LANGUAGES.tags,\n        LOCALES: SERVER_CACHE_DATA_TYPES.LOCALES.tags,\n        MENUS: SERVER_CACHE_DATA_TYPES.MENUS.tags,\n        WEB_DATA: SERVER_CACHE_DATA_TYPES.WEB_DATA.tags,\n        PAGES: SERVER_CACHE_DATA_TYPES.PAGES.tags,\n        GEO_DATA: SERVER_CACHE_DATA_TYPES.GEO_DATA.tags,\n        USER_DATA: SERVER_CACHE_DATA_TYPES.USER_DATA.tags,\n        API_RESPONSE: SERVER_CACHE_DATA_TYPES.API_RESPONSE.tags,\n    },\n\n    // 快取鍵值生成函數\n    generateKey: (type: CacheDataType, identifier: string, locale?: string): string => {\n        const parts = [SERVER_CACHE_CONFIG.REDIS.PREFIX, type, identifier];\n        if (locale) parts.push(locale);\n        return parts.join(SERVER_CACHE_CONFIG.REDIS.KEY_SEPARATOR);\n    },\n} as const;\n\n// 重新導出客戶端的輔助函數，讓服務端也能使用\nexport {\n    getCacheConfig,\n    getCacheTTL,\n    getCacheTags,\n    getDataTypesByTag,\n    getAllCacheTags,\n    getCacheConfigSummary,\n    type CacheDataType\n};\n\n// 服務端專用的輔助函數\n/**\n * 取得服務端指定資料類型的完整配置\n */\nexport function getServerCacheConfig(type: CacheDataType) {\n    return SERVER_CACHE_DATA_TYPES[type];\n}\n\n/**\n * 取得服務端指定資料類型的 TTL (毫秒)\n */\nexport function getServerCacheTTL(type: CacheDataType): number {\n    return SERVER_CACHE_DATA_TYPES[type].ttl * 1000;\n}\n\n/**\n * 取得服務端指定資料類型的標籤\n */\nexport function getServerCacheTags(type: CacheDataType): string[] {\n    return SERVER_CACHE_DATA_TYPES[type].tags;\n}\n\n/**\n * 取得服務端快取配置摘要 (用於除錯)\n */\nexport function getServerCacheConfigSummary() {\n    return Object.entries(SERVER_CACHE_DATA_TYPES).map(([type, config]) => ({\n        type,\n        ttl: `${config.ttl}s (${config.ttl / 60}min)`,\n        tags: config.tags.join(', '),\n        description: config.description\n    }));\n}\n\n// 導出類型\nexport type ServerCacheConfig = typeof SERVER_CACHE_CONFIG;"],"names":[],"mappings":"AAAA;;;CAGC;;;;;;;AAED;AACA;;;AAUA;;CAEC,GACD,MAAM,0BAA0B;IAC5B,WAAW;QACP,KAAK;QACL,MAAM;YAAC;YAAa;SAAc;QAClC,aAAa;IACjB;IACA,SAAS;QACL,KAAK;QACL,MAAM;YAAC;YAAW;SAAc;QAChC,aAAa;IACjB;IACA,OAAO;QACH,KAAK;QACL,MAAM;YAAC;YAAS;SAAa;QAC7B,aAAa;IACjB;IACA,UAAU;QACN,KAAK;QACL,MAAM;YAAC;YAAY;SAAc;QACjC,aAAa;IACjB;IACA,OAAO;QACH,KAAK;QACL,MAAM;YAAC;YAAS;SAAU;QAC1B,aAAa;IACjB;IACA,UAAU;QACN,KAAK;QACL,MAAM;YAAC;YAAY;SAAW;QAC9B,aAAa;IACjB;IACA,WAAW;QACP,KAAK;QACL,MAAM;YAAC;YAAa;SAAe;QACnC,aAAa;IACjB;IACA,cAAc;QACV,KAAK,2GAAA,CAAA,MAAG,CAAC,iBAAiB;QAC1B,MAAM;YAAC;SAAe;QACtB,aAAa;IACjB;AACJ;AAKO,MAAM,sBAAsB;IAC/B,iBAAiB;IACjB,SAAS,2GAAA,CAAA,MAAG,CAAC,aAAa;IAC1B,aAAa,2GAAA,CAAA,MAAG,CAAC,iBAAiB;IAClC,aAAa,2GAAA,CAAA,MAAG,CAAC,iBAAiB;IAClC,UAAU,2GAAA,CAAA,MAAG,CAAC,mBAAmB;IAEjC,WAAW;IACX,OAAO;QACH,KAAK;QACL,QAAQ;QACR,eAAe;IACnB;IAEA,4CAA4C;IAC5C,KAAK;QACD,WAAW,wBAAwB,SAAS,CAAC,GAAG;QAChD,SAAS,wBAAwB,OAAO,CAAC,GAAG;QAC5C,OAAO,wBAAwB,KAAK,CAAC,GAAG;QACxC,UAAU,wBAAwB,QAAQ,CAAC,GAAG;QAC9C,OAAO,wBAAwB,KAAK,CAAC,GAAG;QACxC,UAAU,wBAAwB,QAAQ,CAAC,GAAG;QAC9C,WAAW,wBAAwB,SAAS,CAAC,GAAG;QAChD,cAAc,wBAAwB,YAAY,CAAC,GAAG;IAC1D;IAEA,MAAM;QACF,WAAW,wBAAwB,SAAS,CAAC,IAAI;QACjD,SAAS,wBAAwB,OAAO,CAAC,IAAI;QAC7C,OAAO,wBAAwB,KAAK,CAAC,IAAI;QACzC,UAAU,wBAAwB,QAAQ,CAAC,IAAI;QAC/C,OAAO,wBAAwB,KAAK,CAAC,IAAI;QACzC,UAAU,wBAAwB,QAAQ,CAAC,IAAI;QAC/C,WAAW,wBAAwB,SAAS,CAAC,IAAI;QACjD,cAAc,wBAAwB,YAAY,CAAC,IAAI;IAC3D;IAEA,WAAW;IACX,aAAa,CAAC,MAAqB,YAAoB;QACnD,MAAM,QAAQ;YAAC,oBAAoB,KAAK,CAAC,MAAM;YAAE;YAAM;SAAW;QAClE,IAAI,QAAQ,MAAM,IAAI,CAAC;QACvB,OAAO,MAAM,IAAI,CAAC,oBAAoB,KAAK,CAAC,aAAa;IAC7D;AACJ;;AAiBO,SAAS,qBAAqB,IAAmB;IACpD,OAAO,uBAAuB,CAAC,KAAK;AACxC;AAKO,SAAS,kBAAkB,IAAmB;IACjD,OAAO,uBAAuB,CAAC,KAAK,CAAC,GAAG,GAAG;AAC/C;AAKO,SAAS,mBAAmB,IAAmB;IAClD,OAAO,uBAAuB,CAAC,KAAK,CAAC,IAAI;AAC7C;AAKO,SAAS;IACZ,OAAO,OAAO,OAAO,CAAC,yBAAyB,GAAG,CAAC,CAAC,CAAC,MAAM,OAAO,GAAK,CAAC;YACpE;YACA,KAAK,GAAG,OAAO,GAAG,CAAC,GAAG,EAAE,OAAO,GAAG,GAAG,GAAG,IAAI,CAAC;YAC7C,MAAM,OAAO,IAAI,CAAC,IAAI,CAAC;YACvB,aAAa,OAAO,WAAW;QACnC,CAAC;AACL","debugId":null}},
    {"offset": {"line": 757, "column": 0}, "map": {"version":3,"sources":["file:///Users/jean/Documents/GitHub/next-minmax/src/config/index.ts"],"sourcesContent":["/**\n * 統一配置導出\n * 整合所有配置相關的設定\n */\n\n// 導出環境變數配置\n// export { env } from '../env.mjs';\n\n// 導出 API 配置\nexport * from './api.config';\n\n// 導出應用程式配置\nexport * from './app.client.config';\nexport * from './app.server.config';\n\n// 導出語系配置\nexport * from './locale.server.config';\nexport * from './locale.client.config';\nexport * from './locale.config';\n\n// 導出快取配置\nexport * from './cache.client.config';\nexport * from './cache.server.config';"],"names":[],"mappings":"AAAA;;;CAGC,GAED,WAAW;AACX,oCAAoC;AAEpC,YAAY;;AACZ;AAEA,WAAW;AACX;AACA;AAEA,SAAS;AACT;AACA;AACA;AAEA,SAAS;AACT;AACA","debugId":null}},
    {"offset": {"line": 801, "column": 0}, "map": {"version":3,"sources":["file:///Users/jean/Documents/GitHub/next-minmax/src/i18n/routing.ts"],"sourcesContent":["import { defineRouting } from 'next-intl/routing';\nimport { SERVER_LOCALE_CONFIG } from '@/config/';\n\nexport const routing = defineRouting({\n    // 支援的語系 - 從環境變數讀取，會被 API 動態覆蓋\n    locales: SERVER_LOCALE_CONFIG.SUPPORTED_LOCALES as [string, ...string[]],\n\n    // 預設語系 - 從環境變數讀取，會被 API 動態覆蓋\n    defaultLocale: SERVER_LOCALE_CONFIG.DEFAULT_LOCALE,\n\n    // 語系前綴模式 - 從環境變數讀取\n    localePrefix: SERVER_LOCALE_CONFIG.LOCALE_PREFIX_MODE,\n\n    // 啟用語系檢測 - 從環境變數讀取\n    localeDetection: SERVER_LOCALE_CONFIG.DETECTION.ENABLED\n});"],"names":[],"mappings":";;;AAAA;AACA;AAAA;;;AAEO,MAAM,UAAU,CAAA,GAAA,kOAAA,CAAA,gBAAa,AAAD,EAAE;IACjC,8BAA8B;IAC9B,SAAS,2IAAA,CAAA,uBAAoB,CAAC,iBAAiB;IAE/C,6BAA6B;IAC7B,eAAe,2IAAA,CAAA,uBAAoB,CAAC,cAAc;IAElD,mBAAmB;IACnB,cAAc,2IAAA,CAAA,uBAAoB,CAAC,kBAAkB;IAErD,mBAAmB;IACnB,iBAAiB,2IAAA,CAAA,uBAAoB,CAAC,SAAS,CAAC,OAAO;AAC3D","debugId":null}},
    {"offset": {"line": 823, "column": 0}, "map": {"version":3,"sources":["file:///Users/jean/Documents/GitHub/next-minmax/src/services/base/api-service.base.ts"],"sourcesContent":["import { API_CONFIG } from '@/config';\n\n/**\n * API 服務基底類別\n * 提供通用的 API 請求處理邏輯\n */\nexport abstract class BaseApiService {\n    protected readonly serviceName: string;\n\n    constructor(serviceName: string) {\n        this.serviceName = serviceName;\n    }\n\n    /**\n     * 通用的 API 請求方法\n     * @param endpoint 端點配置 { mock: string, external: string }\n     * @param options 額外的 fetch 選項\n     * @returns Promise<T>\n     */\n    protected async apiRequest<T>(\n        endpoint: { mock: string; external: string },\n        options: RequestInit = {}\n    ): Promise<T> {\n        const url = this.buildApiUrl(endpoint);\n\n        try {\n            this.logApiCall(url);\n\n            const response = await fetch(url, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    ...options.headers,\n                },\n                // 只有正式 API 需要超時設定\n                ...(API_CONFIG.USE_MOCK ? {} : {\n                    signal: AbortSignal.timeout(API_CONFIG.TIMEOUT.DEFAULT)\n                }),\n                ...options,\n            });\n\n            if (!response.ok) {\n                throw new Error(`${this.serviceName} API 請求失敗: ${response.status} ${response.statusText}`);\n            }\n\n            const apiResponse = await response.json();\n\n            // 處理 API 回應格式 { code, message, data }\n            const data = apiResponse.data || apiResponse; // 兼容不同的回應格式\n\n            this.logSuccess(data);\n\n            return data;\n        } catch (error) {\n            this.logError(error);\n            throw error;\n        }\n    }\n\n    /**\n     * 根據環境變數建構 API 網址\n     */\n    private buildApiUrl(endpoint: { mock: string; external: string }): string {\n        if (API_CONFIG.USE_MOCK) {\n            // Mock API - 使用內部 Next.js API Routes\n            return `${API_CONFIG.BASE_URL}${endpoint.mock}`;\n        } else {\n            // 正式 API - 使用外部後端 API\n            return `${API_CONFIG.EXTERNAL_BASE_URL}${endpoint.external}`;\n        }\n    }\n\n    /**\n     * 記錄 API 呼叫日誌\n     */\n    protected logApiCall(url: string): void {\n        console.log(`🌐 ${this.serviceName} API 呼叫: ${url} (Mock: ${API_CONFIG.USE_MOCK})`);\n    }\n\n    /**\n     * 記錄成功日誌 - 子類別可以覆寫自定義格式\n     */\n    protected logSuccess(data: any): void {\n        if (API_CONFIG.LOGGING) {\n            console.log(`✅ ${this.serviceName}資料載入成功`);\n        }\n    }\n\n    /**\n     * 記錄錯誤日誌\n     */\n    protected logError(error: any): void {\n        console.error(`❌ ${this.serviceName} API 呼叫失敗:`, error);\n    }\n}"],"names":[],"mappings":";;;AAAA;AAAA;;AAMO,MAAe;IACC,YAAoB;IAEvC,YAAY,WAAmB,CAAE;QAC7B,IAAI,CAAC,WAAW,GAAG;IACvB;IAEA;;;;;KAKC,GACD,MAAgB,WACZ,QAA4C,EAC5C,UAAuB,CAAC,CAAC,EACf;QACV,MAAM,MAAM,IAAI,CAAC,WAAW,CAAC;QAE7B,IAAI;YACA,IAAI,CAAC,UAAU,CAAC;YAEhB,MAAM,WAAW,MAAM,MAAM,KAAK;gBAC9B,QAAQ;gBACR,SAAS;oBACL,gBAAgB;oBAChB,GAAG,QAAQ,OAAO;gBACtB;gBACA,kBAAkB;gBAClB,GAAI,8HAAA,CAAA,aAAU,CAAC,QAAQ,GAAG,CAAC,IAAI;oBAC3B,QAAQ,YAAY,OAAO,CAAC,8HAAA,CAAA,aAAU,CAAC,OAAO,CAAC,OAAO;gBAC1D,CAAC;gBACD,GAAG,OAAO;YACd;YAEA,IAAI,CAAC,SAAS,EAAE,EAAE;gBACd,MAAM,IAAI,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,SAAS,MAAM,CAAC,CAAC,EAAE,SAAS,UAAU,EAAE;YAC7F;YAEA,MAAM,cAAc,MAAM,SAAS,IAAI;YAEvC,sCAAsC;YACtC,MAAM,OAAO,YAAY,IAAI,IAAI,aAAa,YAAY;YAE1D,IAAI,CAAC,UAAU,CAAC;YAEhB,OAAO;QACX,EAAE,OAAO,OAAO;YACZ,IAAI,CAAC,QAAQ,CAAC;YACd,MAAM;QACV;IACJ;IAEA;;KAEC,GACD,AAAQ,YAAY,QAA4C,EAAU;QACtE,IAAI,8HAAA,CAAA,aAAU,CAAC,QAAQ,EAAE;YACrB,qCAAqC;YACrC,OAAO,GAAG,8HAAA,CAAA,aAAU,CAAC,QAAQ,GAAG,SAAS,IAAI,EAAE;QACnD,OAAO;YACH,sBAAsB;YACtB,OAAO,GAAG,8HAAA,CAAA,aAAU,CAAC,iBAAiB,GAAG,SAAS,QAAQ,EAAE;QAChE;IACJ;IAEA;;KAEC,GACD,AAAU,WAAW,GAAW,EAAQ;QACpC,QAAQ,GAAG,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,IAAI,QAAQ,EAAE,8HAAA,CAAA,aAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;IACtF;IAEA;;KAEC,GACD,AAAU,WAAW,IAAS,EAAQ;QAClC,IAAI,8HAAA,CAAA,aAAU,CAAC,OAAO,EAAE;YACpB,QAAQ,GAAG,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;QAC7C;IACJ;IAEA;;KAEC,GACD,AAAU,SAAS,KAAU,EAAQ;QACjC,QAAQ,KAAK,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,EAAE;IACrD;AACJ","debugId":null}},
    {"offset": {"line": 901, "column": 0}, "map": {"version":3,"sources":["file:///Users/jean/Documents/GitHub/next-minmax/src/services/language.service.ts"],"sourcesContent":["import { API_CONFIG } from '@/config';\nimport type { Language } from '@/types';\nimport { BaseApiService } from './base/api-service.base';\n\n/**\n * 支援語系服務 - 抽象化 API 呼叫\n * 根據環境變數自動切換 Mock 或正式 API\n */\nclass LanguageService extends BaseApiService {\n    constructor() {\n        super('支援語系');\n    }\n\n    /**\n     * 取得支援的語系清單\n     * @returns Promise<Language[]>\n     */\n    async getLanguages(): Promise<Language[]> {\n        const endpoint = {\n            mock: API_CONFIG.ENDPOINTS.MOCK.LANGUAGE,\n            external: API_CONFIG.ENDPOINTS.EXTERNAL.LANGUAGE\n        };\n\n        return this.apiRequest<Language[]>(endpoint);\n    }\n\n    /**\n     * 覆寫成功日誌，顯示語系數量\n     */\n    protected logSuccess(data: Language[]): void {\n        if (API_CONFIG.LOGGING) {\n            console.log(`✅ ${this.serviceName}資料載入成功:`, data.length, '個語系');\n        }\n    }\n}\n\n// 匯出單例實例\nexport const languageService = new LanguageService();"],"names":[],"mappings":";;;AAAA;AAAA;AAEA;;;AAEA;;;CAGC,GACD,MAAM,wBAAwB,iJAAA,CAAA,iBAAc;IACxC,aAAc;QACV,KAAK,CAAC;IACV;IAEA;;;KAGC,GACD,MAAM,eAAoC;QACtC,MAAM,WAAW;YACb,MAAM,8HAAA,CAAA,aAAU,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ;YACxC,UAAU,8HAAA,CAAA,aAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ;QACpD;QAEA,OAAO,IAAI,CAAC,UAAU,CAAa;IACvC;IAEA;;KAEC,GACD,AAAU,WAAW,IAAgB,EAAQ;QACzC,IAAI,8HAAA,CAAA,aAAU,CAAC,OAAO,EAAE;YACpB,QAAQ,GAAG,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE,KAAK,MAAM,EAAE;QAC7D;IACJ;AACJ;AAGO,MAAM,kBAAkB,IAAI","debugId":null}},
    {"offset": {"line": 939, "column": 0}, "map": {"version":3,"sources":["file:///Users/jean/Documents/GitHub/next-minmax/src/services/locales.service.ts"],"sourcesContent":["import { API_CONFIG } from '@/config';\nimport { BaseApiService } from './base/api-service.base';\n\n// 定義 Locales 型別 (國家語系對照表)\ninterface CountryLocaleMapping {\n    [countryCode: string]: string; // 例如: { \"TW\": \"zh-TW\", \"US\": \"en-US\" }\n}\n\n/**\n * 國家語系對應服務 - 抽象化 API 呼叫\n * 根據環境變數自動切換 Mock 或正式 API\n */\nclass LocalesService extends BaseApiService {\n    constructor() {\n        super('國家語系對應');\n    }\n\n    /**\n     * 取得國家語系對照表\n     * @returns Promise<CountryLocaleMapping>\n     */\n    async getLocales(): Promise<CountryLocaleMapping> {\n        const endpoint = {\n            mock: API_CONFIG.ENDPOINTS.MOCK.LOCALES,\n            external: API_CONFIG.ENDPOINTS.EXTERNAL.LOCALES\n        };\n\n        return this.apiRequest<CountryLocaleMapping>(endpoint);\n    }\n\n    /**\n     * 根據國家代碼取得對應語系\n     * @param countryCode 國家代碼 (如 \"TW\", \"US\")\n     * @returns Promise<string | null>\n     */\n    async getLocaleByCountry(countryCode: string): Promise<string | null> {\n        try {\n            const locales = await this.getLocales();\n            return locales[countryCode] || null;\n        } catch (error) {\n            console.error(`❌ 無法取得國家 ${countryCode} 對應的語系:`, error);\n            return null;\n        }\n    }\n\n    /**\n     * 覆寫成功日誌，顯示國家數量\n     */\n    protected logSuccess(data: CountryLocaleMapping): void {\n        if (API_CONFIG.LOGGING) {\n            const countryCount = Object.keys(data).length;\n            console.log(`✅ ${this.serviceName}資料載入成功:`, countryCount, '個國家對照');\n        }\n    }\n}\n\n// 匯出單例實例\nexport const localesService = new LocalesService();"],"names":[],"mappings":";;;AAAA;AAAA;AACA;;;AAOA;;;CAGC,GACD,MAAM,uBAAuB,iJAAA,CAAA,iBAAc;IACvC,aAAc;QACV,KAAK,CAAC;IACV;IAEA;;;KAGC,GACD,MAAM,aAA4C;QAC9C,MAAM,WAAW;YACb,MAAM,8HAAA,CAAA,aAAU,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO;YACvC,UAAU,8HAAA,CAAA,aAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO;QACnD;QAEA,OAAO,IAAI,CAAC,UAAU,CAAuB;IACjD;IAEA;;;;KAIC,GACD,MAAM,mBAAmB,WAAmB,EAA0B;QAClE,IAAI;YACA,MAAM,UAAU,MAAM,IAAI,CAAC,UAAU;YACrC,OAAO,OAAO,CAAC,YAAY,IAAI;QACnC,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,CAAC,SAAS,EAAE,YAAY,OAAO,CAAC,EAAE;YAChD,OAAO;QACX;IACJ;IAEA;;KAEC,GACD,AAAU,WAAW,IAA0B,EAAQ;QACnD,IAAI,8HAAA,CAAA,aAAU,CAAC,OAAO,EAAE;YACpB,MAAM,eAAe,OAAO,IAAI,CAAC,MAAM,MAAM;YAC7C,QAAQ,GAAG,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE,cAAc;QAC9D;IACJ;AACJ;AAGO,MAAM,iBAAiB,IAAI","debugId":null}},
    {"offset": {"line": 991, "column": 0}, "map": {"version":3,"sources":["file:///Users/jean/Documents/GitHub/next-minmax/src/i18n/i18n-integration.ts"],"sourcesContent":["import { languageService } from '@/services/language.service';\nimport { localesService } from '@/services/locales.service';\nimport { Language } from '@/types';\nimport { Locale} from '@/types';\nimport { SERVER_LOCALE_CONFIG } from '@/config/locale.server.config';\n\n/**\n * 國際化整合服務\n *\n * 功能說明：\n * - 統一管理動態語系資料與靜態路由配置的橋接\n * - 提供快取機制，減少 API 請求頻率\n * - 實現容錯降級，確保系統在 API 不可用時仍能正常運作\n * - 支援語系列表和國家地區對應關係的動態獲取\n *\n * 使用場景：\n * - 應用啟動時初始化語系配置\n * - 語系切換器組件獲取可用語系\n * - 中間件處理語系路由驗證\n * - SSR/SSG 伺服器端語系資料獲取\n * - 地理位置偵測後的語系重導\n */\nexport class I18nIntegration {\n    // ==========================================\n    // 資料快取\n    // ==========================================\n\n    /** 語系列表 - 快取 */\n    private static cachedLanguages: Language[] | null = null;\n    /** 語系列表 - 最後更新時間 */\n    private static lastFetchTime: number = 0;\n\n    /** 國家語系對應表 - 快取 */\n    private static cachedCountryLocaleMap: Locale | null = null;\n    /** 國家語系對應表- 最後更新時間 */\n    private static lastLocalesFetchTime: number = 0;\n\n    // ==========================================\n    // 取得資料快取\n    // ==========================================\n\n    /**\n     * 語系清單 - 取得動態並快取\n     *\n     * 功能：\n     * - 從 API 獲取最新語系列表\n     * - 實現記憶體快取，避免重複請求\n     * - API 失敗時自動降級使用靜態配置\n     *\n     * @returns Promise<Language[]> 語系列表\n     */\n    static async getLanguages(): Promise<Language[]> {\n        // 取得現在時間以作為快取效期\n        const now = Date.now();\n        // JavaScript 的 Date.now() 回傳的是毫秒，而配置檔中的 TTL 通常設定為秒，所以需要轉換單位才能正確比較。\n        const cacheExpiry = SERVER_LOCALE_CONFIG.CACHE.TTL * 1000; // 快取時間 (秒) - 1小時 * 轉為毫秒\n\n        // 檢查快取是否有效\n        // 計算距離上次獲取資料經過了多少時間，比較是否小於快取有效期，如果有效，直接返回快取資料\n        if (this.cachedLanguages && (now - this.lastFetchTime) < cacheExpiry) {\n            return this.cachedLanguages;\n        }\n\n        // 如果快取無效，從 API 取得語系列表，並存到快取中\n        try {\n            // 從 API 獲取最新語系資料\n            const languages = await languageService.getLanguages();\n\n            // 儲存到快取中\n            this.cachedLanguages = languages;\n            this.lastFetchTime = now;\n\n            return languages;\n        } catch (error) {\n            console.warn('📦 無法載入動態語系，使用靜態配置', error);\n            // 降級處理：返回靜態配置的語系\n            return this.getStaticFallbackLanguages();\n        }\n    }\n\n    /**\n     * 國家語系對應表 - 取得動態並快取\n     *\n     * 功能：\n     * - 從 API 獲取國家代碼與語系的對應關係\n     * - 用於地理位置偵測後的語系重導\n     * - 支援記憶體快取機制\n     *\n     * 使用場景：\n     * - 中間件根據 IP 地理位置重導語系\n     * - 語系切換器顯示地區相關選項\n     *\n     * @returns Promise<Locale> 國家語系對應表\n     */\n    static async getLocales(): Promise<Locale> {\n        // 取得現在時間以作為快取效期\n        const now = Date.now();\n        // JavaScript 的 Date.now() 回傳的是毫秒，而配置檔中的 TTL 通常設定為秒，所以需要轉換單位才能正確比較。\n        const cacheExpiry = SERVER_LOCALE_CONFIG.CACHE.TTL * 1000;  // 快取時間 (秒) - 1小時 * 轉為毫秒\n\n        // 檢查快取是否有效\n        // 計算距離上次獲取資料經過了多少時間，比較是否小於快取有效期，如果有效，直接返回快取資料\n        if (this.cachedCountryLocaleMap && now - this.lastLocalesFetchTime < cacheExpiry) {\n            return this.cachedCountryLocaleMap;\n        }\n\n        // 如果快取無效，從 API 取得語系列表，並存到快取中\n        try {\n            // 從 API 獲取最新對應表\n            const map = await localesService.getLocales();\n            // 儲存到快取中\n            this.cachedCountryLocaleMap = map;\n            this.lastLocalesFetchTime = now;\n            return map;\n        } catch (error) {\n            console.warn('📦 無法載入地區對應表，使用空對應表', error);\n            // 降級處理：返回空的對應表\n            return {} as Locale;\n        }\n    }\n\n    /**\n     * 將 Language[] 轉換為 next-intl 需要的 locales 陣列\n     *\n     * 用途：橋接動態語系資料與 Next.js 路由系統\n     *\n     * @returns Promise<string[]> 支援的語系代碼陣列\n     */\n    static async getSupportedLocales(): Promise<string[]> {\n        const languages = await this.getLanguages();\n        return languages.map(lang => lang.id);\n    }\n\n    /**\n     * 取得預設語系\n     *\n     * 邏輯：\n     * 1. 優先使用動態資料中標記為 default 的語系\n     * 2. 找不到時使用配置檔的預設值\n     *\n     * @returns Promise<string> 預設語系代碼\n     */\n    static async getDefaultLocale(): Promise<string> {\n        const languages = await I18nIntegration.getLanguages();\n        const defaultLang = languages.find(lang => lang.default);\n        return defaultLang?.id || SERVER_LOCALE_CONFIG.DEFAULT_LOCALE;\n    }\n\n    // ==========================================\n    // 私有輔助方法\n    // ==========================================\n\n    /**\n     * 靜態備援語系資料\n     *\n     * 當 API 不可用時的降級方案：\n     * - 使用 locales.config 的靜態配置\n     * - 自動生成基本的語系資訊\n     * - 確保系統基本功能不受影響\n     *\n     * @returns Language[] 靜態語系列表\n     */\n    private static getStaticFallbackLanguages(): Language[] {\n        const locales = SERVER_LOCALE_CONFIG.SUPPORTED_LOCALES;\n        const defaultLocale = SERVER_LOCALE_CONFIG.DEFAULT_LOCALE;\n        return locales.map((locale) => ({\n            id: locale,\n            title: locale.toUpperCase(),\n            native: locale.toUpperCase(),\n            icon: '🌐',\n            default: locale === defaultLocale\n        }));\n    }\n}"],"names":[],"mappings":";;;AAAA;AACA;AAGA;;;;AAkBO,MAAM;IACT,6CAA6C;IAC7C,OAAO;IACP,6CAA6C;IAE7C,cAAc,GACd,OAAe,kBAAqC,KAAK;IACzD,kBAAkB,GAClB,OAAe,gBAAwB,EAAE;IAEzC,iBAAiB,GACjB,OAAe,yBAAwC,KAAK;IAC5D,oBAAoB,GACpB,OAAe,uBAA+B,EAAE;IAEhD,6CAA6C;IAC7C,SAAS;IACT,6CAA6C;IAE7C;;;;;;;;;KASC,GACD,aAAa,eAAoC;QAC7C,gBAAgB;QAChB,MAAM,MAAM,KAAK,GAAG;QACpB,mEAAmE;QACnE,MAAM,cAAc,2IAAA,CAAA,uBAAoB,CAAC,KAAK,CAAC,GAAG,GAAG,MAAM,wBAAwB;QAEnF,WAAW;QACX,8CAA8C;QAC9C,IAAI,IAAI,CAAC,eAAe,IAAI,AAAC,MAAM,IAAI,CAAC,aAAa,GAAI,aAAa;YAClE,OAAO,IAAI,CAAC,eAAe;QAC/B;QAEA,6BAA6B;QAC7B,IAAI;YACA,iBAAiB;YACjB,MAAM,YAAY,MAAM,sIAAA,CAAA,kBAAe,CAAC,YAAY;YAEpD,SAAS;YACT,IAAI,CAAC,eAAe,GAAG;YACvB,IAAI,CAAC,aAAa,GAAG;YAErB,OAAO;QACX,EAAE,OAAO,OAAO;YACZ,QAAQ,IAAI,CAAC,sBAAsB;YACnC,iBAAiB;YACjB,OAAO,IAAI,CAAC,0BAA0B;QAC1C;IACJ;IAEA;;;;;;;;;;;;;KAaC,GACD,aAAa,aAA8B;QACvC,gBAAgB;QAChB,MAAM,MAAM,KAAK,GAAG;QACpB,mEAAmE;QACnE,MAAM,cAAc,2IAAA,CAAA,uBAAoB,CAAC,KAAK,CAAC,GAAG,GAAG,MAAO,wBAAwB;QAEpF,WAAW;QACX,8CAA8C;QAC9C,IAAI,IAAI,CAAC,sBAAsB,IAAI,MAAM,IAAI,CAAC,oBAAoB,GAAG,aAAa;YAC9E,OAAO,IAAI,CAAC,sBAAsB;QACtC;QAEA,6BAA6B;QAC7B,IAAI;YACA,gBAAgB;YAChB,MAAM,MAAM,MAAM,qIAAA,CAAA,iBAAc,CAAC,UAAU;YAC3C,SAAS;YACT,IAAI,CAAC,sBAAsB,GAAG;YAC9B,IAAI,CAAC,oBAAoB,GAAG;YAC5B,OAAO;QACX,EAAE,OAAO,OAAO;YACZ,QAAQ,IAAI,CAAC,uBAAuB;YACpC,eAAe;YACf,OAAO,CAAC;QACZ;IACJ;IAEA;;;;;;KAMC,GACD,aAAa,sBAAyC;QAClD,MAAM,YAAY,MAAM,IAAI,CAAC,YAAY;QACzC,OAAO,UAAU,GAAG,CAAC,CAAA,OAAQ,KAAK,EAAE;IACxC;IAEA;;;;;;;;KAQC,GACD,aAAa,mBAAoC;QAC7C,MAAM,YAAY,MAAM,gBAAgB,YAAY;QACpD,MAAM,cAAc,UAAU,IAAI,CAAC,CAAA,OAAQ,KAAK,OAAO;QACvD,OAAO,aAAa,MAAM,2IAAA,CAAA,uBAAoB,CAAC,cAAc;IACjE;IAEA,6CAA6C;IAC7C,SAAS;IACT,6CAA6C;IAE7C;;;;;;;;;KASC,GACD,OAAe,6BAAyC;QACpD,MAAM,UAAU,2IAAA,CAAA,uBAAoB,CAAC,iBAAiB;QACtD,MAAM,gBAAgB,2IAAA,CAAA,uBAAoB,CAAC,cAAc;QACzD,OAAO,QAAQ,GAAG,CAAC,CAAC,SAAW,CAAC;gBAC5B,IAAI;gBACJ,OAAO,OAAO,WAAW;gBACzB,QAAQ,OAAO,WAAW;gBAC1B,MAAM;gBACN,SAAS,WAAW;YACxB,CAAC;IACL;AACJ","debugId":null}},
    {"offset": {"line": 1132, "column": 0}, "map": {"version":3,"sources":["file:///Users/jean/Documents/GitHub/next-minmax/src/i18n/request.ts"],"sourcesContent":["import {getRequestConfig} from 'next-intl/server';\nimport {cookies} from 'next/headers';\nimport {routing} from './routing';\nimport {I18nIntegration} from '@/i18n/i18n-integration';\nimport {SERVER_LOCALE_CONFIG} from '@/config/locale.server.config';\n\nexport default getRequestConfig(async ({requestLocale}) => {\n    const requested = await requestLocale;\n\n    // 1) 取得動態有效語系（使用 I18nIntegration）\n    let supportedLocales: string[] = [];// 支援的語系\n    let dynamicDefaultLocale: string = routing.defaultLocale; // 預設語系\n\n    try {\n        // 使用 I18nIntegration 取得動態語系清單\n        supportedLocales = await I18nIntegration.getSupportedLocales();\n        console.log(`🌍 SSR 動態語系載入成功: [${supportedLocales.join(', ')}]`);\n        // 暫時使用靜態預設語系，之後再實作動態預設語系\n        dynamicDefaultLocale = routing.defaultLocale;\n    } catch (e) {\n        // 動態載入失敗時，使用 routing 的靜態預設作為兜底\n        console.warn('⚠️ 載入動態 locales 失敗，使用靜態 routing 作為兜底', e);\n        supportedLocales = [...routing.locales]; // Create a mutable copy\n        dynamicDefaultLocale = routing.defaultLocale;\n    }\n\n    // 2) 依優先序決定候選語系：URL → Cookie → 動態預設 → 靜態預設\n    const cookieStore = await cookies();\n    const cookieLocale = cookieStore.get('NEXT_LOCALE')?.value;\n    const candidate =\n        requested ||\n        (SERVER_LOCALE_CONFIG.DETECTION.ENABLED ? cookieLocale : undefined) ||\n        dynamicDefaultLocale ||\n        routing.defaultLocale;\n\n    // 3) 嚴格以 supportedLocales 驗證，非法則回退至 dynamicDefault → routing.defaultLocale\n    const isValid = supportedLocales.includes(candidate);\n    const locale = isValid\n        ? candidate\n        : (supportedLocales.includes(dynamicDefaultLocale)\n            ? dynamicDefaultLocale\n            : routing.defaultLocale);\n\n    // 4) 載入對應 messages，失敗時回退到 default messages\n    let messages: Record<string, unknown>;\n    try {\n        messages = (await import(`../../messages/${locale}.json`)).default;\n    } catch (e) {\n        console.warn(`⚠️ 找不到 ${locale}.json，回退至 ${routing.defaultLocale}.json`, e);\n        messages = (await import(`../../messages/${routing.defaultLocale}.json`)).default;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n        console.log(`🌍 語系決策: requested=${requested} cookie=${cookieLocale} final=${locale}`);\n    }\n\n    return {\n        locale,\n        messages\n    };\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;uCAEe,CAAA,GAAA,0PAAA,CAAA,mBAAgB,AAAD,EAAE,OAAO,EAAC,aAAa,EAAC;IAClD,MAAM,YAAY,MAAM;IAExB,kCAAkC;IAClC,IAAI,mBAA6B,EAAE,EAAC,QAAQ;IAC5C,IAAI,uBAA+B,sHAAA,CAAA,UAAO,CAAC,aAAa,EAAE,OAAO;IAEjE,IAAI;QACA,8BAA8B;QAC9B,mBAAmB,MAAM,kIAAA,CAAA,kBAAe,CAAC,mBAAmB;QAC5D,QAAQ,GAAG,CAAC,CAAC,kBAAkB,EAAE,iBAAiB,IAAI,CAAC,MAAM,CAAC,CAAC;QAC/D,yBAAyB;QACzB,uBAAuB,sHAAA,CAAA,UAAO,CAAC,aAAa;IAChD,EAAE,OAAO,GAAG;QACR,+BAA+B;QAC/B,QAAQ,IAAI,CAAC,wCAAwC;QACrD,mBAAmB;eAAI,sHAAA,CAAA,UAAO,CAAC,OAAO;SAAC,EAAE,wBAAwB;QACjE,uBAAuB,sHAAA,CAAA,UAAO,CAAC,aAAa;IAChD;IAEA,2CAA2C;IAC3C,MAAM,cAAc,MAAM,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD;IAChC,MAAM,eAAe,YAAY,GAAG,CAAC,gBAAgB;IACrD,MAAM,YACF,aACA,CAAC,2IAAA,CAAA,uBAAoB,CAAC,SAAS,CAAC,OAAO,GAAG,eAAe,SAAS,KAClE,wBACA,sHAAA,CAAA,UAAO,CAAC,aAAa;IAEzB,2EAA2E;IAC3E,MAAM,UAAU,iBAAiB,QAAQ,CAAC;IAC1C,MAAM,SAAS,UACT,YACC,iBAAiB,QAAQ,CAAC,wBACvB,uBACA,sHAAA,CAAA,UAAO,CAAC,aAAa;IAE/B,2CAA2C;IAC3C,IAAI;IACJ,IAAI;QACA,WAAW,CAAC;;;;;;;;;;;;;;;;;kBAAa,CAAC,eAAe,EAAE,OAAO,KAAK,CAAC,CAAC,EAAE,OAAO;IACtE,EAAE,OAAO,GAAG;QACR,QAAQ,IAAI,CAAC,CAAC,OAAO,EAAE,OAAO,UAAU,EAAE,sHAAA,CAAA,UAAO,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE;QACxE,WAAW,CAAC;;;;;;;;;;;;;;;;;kBAAa,CAAC,eAAe,EAAE,sHAAA,CAAA,UAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,OAAO;IACrF;IAEA,wCAA2C;QACvC,QAAQ,GAAG,CAAC,CAAC,mBAAmB,EAAE,UAAU,QAAQ,EAAE,aAAa,OAAO,EAAE,QAAQ;IACxF;IAEA,OAAO;QACH;QACA;IACJ;AACJ","debugId":null}},
    {"offset": {"line": 1224, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/geist_e531dabc.module.css [app-rsc] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"className\": \"geist_e531dabc-module__QGiZLq__className\",\n  \"variable\": \"geist_e531dabc-module__QGiZLq__variable\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA","ignoreList":[0]}},
    {"offset": {"line": 1232, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/geist_e531dabc.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22layout.tsx%22,%22import%22:%22Geist%22,%22arguments%22:[{%22variable%22:%22--font-geist-sans%22,%22subsets%22:[%22latin%22]}],%22variableName%22:%22geistSans%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Geist', 'Geist Fallback'\",\n        fontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,WAAW;IACb,WAAW,qJAAA,CAAA,UAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,WAAW;IAEf;AACJ;AAEA,IAAI,qJAAA,CAAA,UAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,qJAAA,CAAA,UAAS,CAAC,QAAQ;AAC1C;uCAEe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1251, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/geist_mono_68a01160.module.css [app-rsc] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"className\": \"geist_mono_68a01160-module__YLcDdW__className\",\n  \"variable\": \"geist_mono_68a01160-module__YLcDdW__variable\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA","ignoreList":[0]}},
    {"offset": {"line": 1259, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/geist_mono_68a01160.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22layout.tsx%22,%22import%22:%22Geist_Mono%22,%22arguments%22:[{%22variable%22:%22--font-geist-mono%22,%22subsets%22:[%22latin%22]}],%22variableName%22:%22geistMono%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Geist Mono', 'Geist Mono Fallback'\",\n        fontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,WAAW;IACb,WAAW,0JAAA,CAAA,UAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,WAAW;IAEf;AACJ;AAEA,IAAI,0JAAA,CAAA,UAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,0JAAA,CAAA,UAAS,CAAC,QAAQ;AAC1C;uCAEe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1279, "column": 0}, "map": {"version":3,"sources":["file:///Users/jean/Documents/GitHub/next-minmax/src/lib/seo-utils.ts"],"sourcesContent":["import { headers } from 'next/headers';\nimport type { Language } from '@/types';\n\n/**\n * 生成當前頁面的 hreflang 連結\n */\nexport async function generateHrefLangLinks(\n    languages: Language[],\n    currentLocale: string\n): Promise<Array<{ hrefLang: string; href: string }>> {\n    const headersList = await headers();\n    const pathname = headersList.get('x-pathname') || '/';\n    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'https://yourwebsite.com';\n\n    // 移除當前語系前綴，取得基底路徑\n    const basePath = pathname.replace(new RegExp(`^/${currentLocale}`), '') || '/';\n\n    // 為每個語系生成完整 URL\n    const hrefLangLinks = languages.map(lang => ({\n        hrefLang: lang.id,\n        href: `${baseUrl}/${lang.id}${basePath === '/' ? '' : basePath}`\n    }));\n\n    // 添加 x-default\n    const defaultLanguage = languages.find(lang => lang.default);\n    if (defaultLanguage) {\n        hrefLangLinks.push({\n            hrefLang: 'x-default',\n            href: `${baseUrl}${basePath === '/' ? '' : basePath}`\n        });\n    }\n\n    return hrefLangLinks;\n}\n\n/**\n * 生成多語言結構化資料\n */\nexport function generateMultilingualStructuredData(\n    languages: Language[],\n    currentLocale: string,\n    currentUrl: string\n) {\n    return {\n        \"@context\": \"https://schema.org\",\n        \"@type\": \"WebPage\",\n        \"inLanguage\": currentLocale,\n        \"url\": currentUrl,\n        \"availableLanguage\": languages.map(lang => ({\n            \"@type\": \"Language\",\n            \"name\": lang.title,\n            \"alternateName\": lang.native,\n            \"identifier\": lang.id\n        }))\n    };\n}\n\n\n"],"names":[],"mappings":";;;;AAAA;;AAMO,eAAe,sBAClB,SAAqB,EACrB,aAAqB;IAErB,MAAM,cAAc,MAAM,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD;IAChC,MAAM,WAAW,YAAY,GAAG,CAAC,iBAAiB;IAClD,MAAM,UAAU,QAAQ,GAAG,CAAC,oBAAoB,IAAI;IAEpD,kBAAkB;IAClB,MAAM,WAAW,SAAS,OAAO,CAAC,IAAI,OAAO,CAAC,EAAE,EAAE,eAAe,GAAG,OAAO;IAE3E,gBAAgB;IAChB,MAAM,gBAAgB,UAAU,GAAG,CAAC,CAAA,OAAQ,CAAC;YACzC,UAAU,KAAK,EAAE;YACjB,MAAM,GAAG,QAAQ,CAAC,EAAE,KAAK,EAAE,GAAG,aAAa,MAAM,KAAK,UAAU;QACpE,CAAC;IAED,eAAe;IACf,MAAM,kBAAkB,UAAU,IAAI,CAAC,CAAA,OAAQ,KAAK,OAAO;IAC3D,IAAI,iBAAiB;QACjB,cAAc,IAAI,CAAC;YACf,UAAU;YACV,MAAM,GAAG,UAAU,aAAa,MAAM,KAAK,UAAU;QACzD;IACJ;IAEA,OAAO;AACX;AAKO,SAAS,mCACZ,SAAqB,EACrB,aAAqB,EACrB,UAAkB;IAElB,OAAO;QACH,YAAY;QACZ,SAAS;QACT,cAAc;QACd,OAAO;QACP,qBAAqB,UAAU,GAAG,CAAC,CAAA,OAAQ,CAAC;gBACxC,SAAS;gBACT,QAAQ,KAAK,KAAK;gBAClB,iBAAiB,KAAK,MAAM;gBAC5B,cAAc,KAAK,EAAE;YACzB,CAAC;IACL;AACJ","debugId":null}},
    {"offset": {"line": 1324, "column": 0}, "map": {"version":3,"sources":["file:///Users/jean/Documents/GitHub/next-minmax/src/app/%5Blocale%5D/layout.tsx"],"sourcesContent":["import { setRequestLocale } from 'next-intl/server';\nimport { NextIntlClientProvider, hasLocale } from 'next-intl';\nimport { notFound } from 'next/navigation';\nimport { routing } from '@/i18n/routing';\nimport { Geist, Geist_Mono } from 'next/font/google';\nimport type { Metadata, Viewport } from 'next';\nimport { generateHrefLangLinks, generateMultilingualStructuredData } from '@/lib/seo-utils';\nimport { I18nIntegration } from '@/i18n/i18n-integration';\nimport { APP_CONFIG } from '@/config'; // 使用統一的配置\n\nconst geistSans = Geist({ variable: '--font-geist-sans', subsets: ['latin'] });\nconst geistMono = Geist_Mono({ variable: '--font-geist-mono', subsets: ['latin'] });\n\n// 導出 viewport 配置\nexport const viewport: Viewport = {\n    width: 'device-width',\n    initialScale: 1,\n    maximumScale: 5,\n    userScalable: true,\n    themeColor: [\n        { media: '(prefers-color-scheme: light)', color: '#ffffff' },\n        { media: '(prefers-color-scheme: dark)', color: '#000000' }\n    ],\n};\n\n// 動態生成 metadata\nexport async function generateMetadata({\n                                           params,\n                                       }: {\n    params: Promise<{ locale: string }>;\n}): Promise<Metadata> {\n    const { locale } = await params;\n\n    // 取得語系資料\n    const languages = await I18nIntegration.getLanguages();\n    const baseUrl = APP_CONFIG.API.BASE_URL;\n\n    // 生成 hreflang 連結\n    const hrefLangLinks = await generateHrefLangLinks(languages, locale);\n\n    // 轉換為 Next.js metadata 格式\n    const alternates: Record<string, string> = {};\n    hrefLangLinks.forEach(({ hrefLang, href }) => {\n        alternates[hrefLang] = href;\n    });\n\n    // 生成結構化資料\n    const structuredData = generateMultilingualStructuredData(\n        languages,\n        locale,\n        `${baseUrl}/${locale}`\n    );\n\n    return {\n        title: {\n            default: '我的網站',\n            template: '%s | 我的網站',\n        },\n        description: '這是我網站的預設描述。',\n        keywords: ['Next.js', 'React', '開發'],\n\n        // 改進的 Open Graph 配置\n        openGraph: {\n            type: 'website',\n            locale: locale.replace('-', '_'),\n            url: `${baseUrl}/${locale}`,\n            siteName: '我的網站',\n            title: '我的網站',\n            description: '這是我網站的預設描述。',\n            images: [\n                {\n                    url: `${baseUrl}/og-image.jpg`,\n                    width: 1200,\n                    height: 630,\n                    alt: '我的網站',\n                },\n            ],\n            alternateLocale: languages\n                .filter(lang => lang.id !== locale)\n                .map(lang => lang.id.replace('-', '_')),\n        },\n\n        // 添加 Twitter Card\n        twitter: {\n            card: 'summary_large_image',\n            title: '我的網站',\n            description: '這是我網站的預設描述。',\n            images: [`${baseUrl}/og-image.jpg`],\n        },\n\n        // 改進的 alternates 配置\n        alternates: {\n            canonical: `${baseUrl}/${locale}`,\n            languages: {\n                ...alternates,\n                'x-default': `${baseUrl}/${languages[0]?.id || 'en'}`,\n            },\n        },\n\n        // 添加更多 SEO 相關的 metadata\n        robots: {\n            index: true,\n            follow: true,\n            googleBot: {\n                index: true,\n                follow: true,\n                'max-video-preview': -1,\n                'max-image-preview': 'large',\n                'max-snippet': -1,\n            },\n        },\n\n        // 添加 verification 標籤（如果需要）\n        verification: {\n            google: 'your-google-verification-code',\n        },\n\n        other: {\n            'language': locale,\n            // 將結構化資料添加到 other 中\n            'structured-data': JSON.stringify(structuredData),\n        },\n    };\n}\n\nexport default async function LocaleLayout({\n                                               children,\n                                               params,\n                                           }: {\n    children: React.ReactNode;\n    params: Promise<{ locale: string }>;\n}) {\n    const { locale } = await params;\n\n\n\n\n    if (!hasLocale(routing.locales, locale)) {\n        notFound();\n    }\n\n    setRequestLocale(locale);\n\n    return (\n        <html lang={locale}>\n        <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>\n\n\n        <NextIntlClientProvider>{children}</NextIntlClientProvider>\n        </body>\n        </html>\n    );\n}"],"names":[],"mappings":"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","debugId":null}}]
}