{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 22, "column": 0}, "map": {"version":3,"sources":["file:///Users/jean/Documents/GitHub/next-minmax/src/i18n/navigation.ts"],"sourcesContent":["import {createNavigation} from 'next-intl/navigation';\nimport {routing} from './routing';\n\n//這是在 Next.js 導航 API 基礎上，考量到路由設定的輕量級封裝。\nexport const {Link, redirect, usePathname, useRouter, getPathname} =\n    createNavigation(routing);\n"],"names":[],"mappings":";;;;;;;AAAA;AACA;;;AAGO,MAAM,EAAC,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,EAAC,GAC9D,CAAA,GAAA,8PAAA,CAAA,mBAAgB,AAAD,EAAE,sHAAA,CAAA,UAAO","debugId":null}},
    {"offset": {"line": 38, "column": 0}, "map": {"version":3,"sources":["file:///Users/jean/Documents/GitHub/next-minmax/src/lib/services/language.service.ts"],"sourcesContent":["import { API_CONFIG } from '@config';\nimport { Language } from '@/types';\n\n/**\n * 語系服務 - 抽象化 API 呼叫\n * 根據環境變數自動切換 Mock 或正式 API\n */\nclass LanguageService {\n    /**\n     * 取得語系清單\n     * @returns Promise<Language[]>\n     */\n    async getLanguages(): Promise<Language[]> {\n        const url = this.buildApiUrl();\n\n        try {\n            console.log(`🌍 語系 API 呼叫: ${url} (Mock: ${API_CONFIG.USE_MOCK})`);\n\n            const response = await fetch(url, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                // 只有正式 API 需要超時設定\n                ...(API_CONFIG.USE_MOCK ? {} : {\n                    signal: AbortSignal.timeout(API_CONFIG.TIMEOUT.DEFAULT)\n                })\n            });\n\n            if (!response.ok) {\n                throw new Error(`語系 API 請求失敗: ${response.status} ${response.statusText}`);\n            }\n\n            const apiResponse = await response.json();\n\n            // 處理 API 回應格式 { code, message, data }\n            const data = apiResponse.data || apiResponse; // 兼容不同的回應格式\n\n            if (API_CONFIG.LOGGING) {\n                console.log('✅ 語系資料載入成功:', data.length, '個語系');\n            }\n\n            return data;\n        } catch (error) {\n            console.error('❌ 語系 API 呼叫失敗:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * 根據環境變數建構 API 網址\n     */\n    private buildApiUrl(): string {\n        if (API_CONFIG.USE_MOCK) {\n            // Mock API - 使用內部 Next.js API Routes\n            return `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.MOCK.LANGUAGE}`;\n        } else {\n            // 正式 API - 使用外部後端 API\n            return `${API_CONFIG.EXTERNAL_BASE_URL}${API_CONFIG.ENDPOINTS.EXTERNAL.LANGUAGE}`;\n        }\n    }\n}\n\n// 匯出單例實例\nexport const languageService = new LanguageService();"],"names":[],"mappings":";;;;;;;;;AAGA;;;CAGC,GACD,MAAM;IACF;;;KAGC,GACD,MAAM,eAAoC;QACtC,MAAM,MAAM,IAAI,CAAC,WAAW;QAE5B,IAAI;YACA,QAAQ,GAAG,CAAC,CAAC,cAAc,EAAE,IAAI,QAAQ,EAAE,WAAW,QAAQ,CAAC,CAAC,CAAC;YAEjE,MAAM,WAAW,MAAM,MAAM,KAAK;gBAC9B,QAAQ;gBACR,SAAS;oBACL,gBAAgB;gBACpB;gBACA,kBAAkB;gBAClB,GAAI,WAAW,QAAQ,GAAG,CAAC,IAAI;oBAC3B,QAAQ,YAAY,OAAO,CAAC,WAAW,OAAO,CAAC,OAAO;gBAC1D,CAAC;YACL;YAEA,IAAI,CAAC,SAAS,EAAE,EAAE;gBACd,MAAM,IAAI,MAAM,CAAC,aAAa,EAAE,SAAS,MAAM,CAAC,CAAC,EAAE,SAAS,UAAU,EAAE;YAC5E;YAEA,MAAM,cAAc,MAAM,SAAS,IAAI;YAEvC,sCAAsC;YACtC,MAAM,OAAO,YAAY,IAAI,IAAI,aAAa,YAAY;YAE1D,IAAI,WAAW,OAAO,EAAE;gBACpB,QAAQ,GAAG,CAAC,eAAe,KAAK,MAAM,EAAE;YAC5C;YAEA,OAAO;QACX,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,kBAAkB;YAChC,MAAM;QACV;IACJ;IAEA;;KAEC,GACD,AAAQ,cAAsB;QAC1B,IAAI,WAAW,QAAQ,EAAE;YACrB,qCAAqC;YACrC,OAAO,GAAG,WAAW,QAAQ,GAAG,WAAW,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE;QACxE,OAAO;YACH,sBAAsB;YACtB,OAAO,GAAG,WAAW,iBAAiB,GAAG,WAAW,SAAS,CAAC,QAAQ,CAAC,QAAQ,EAAE;QACrF;IACJ;AACJ;AAGO,MAAM,kBAAkB,IAAI","debugId":null}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":["file:///Users/jean/Documents/GitHub/next-minmax/src/app/%5Blocale%5D/page.tsx"],"sourcesContent":["import { getTranslations } from 'next-intl/server';\nimport { Link } from '@/i18n/navigation';\nimport { languageService } from '@/lib/services/language.service';\n\nexport default async function HomePage() {\n    // 靜態渲染的翻譯資料\n    const t = await getTranslations('navigation');\n    const languages = await languageService.getLanguages();\n\n    return (\n        <div>\n            <nav className=\"flex gap-3\">\n                <Link href=\"/\">{t('home')}</Link>\n                <Link href=\"/about\">{t('about')}</Link>\n                <Link href=\"/contact\">{t('contact')}</Link>\n            </nav>\n\n            <h2>支援的語系清單</h2>\n            <ul>\n                {languages.map(lang => (\n                    <li key={lang.id}>\n                        {lang.title} ({lang.id})\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;AAEe,eAAe;IAC1B,YAAY;IACZ,MAAM,IAAI,MAAM,CAAA,GAAA,wPAAA,CAAA,kBAAe,AAAD,EAAE;IAChC,MAAM,YAAY,MAAM,6IAAA,CAAA,kBAAe,CAAC,YAAY;IAEpD,qBACI,8OAAC;;0BACG,8OAAC;gBAAI,WAAU;;kCACX,8OAAC,yHAAA,CAAA,OAAI;wBAAC,MAAK;kCAAK,EAAE;;;;;;kCAClB,8OAAC,yHAAA,CAAA,OAAI;wBAAC,MAAK;kCAAU,EAAE;;;;;;kCACvB,8OAAC,yHAAA,CAAA,OAAI;wBAAC,MAAK;kCAAY,EAAE;;;;;;;;;;;;0BAG7B,8OAAC;0BAAG;;;;;;0BACJ,8OAAC;0BACI,UAAU,GAAG,CAAC,CAAA,qBACX,8OAAC;;4BACI,KAAK,KAAK;4BAAC;4BAAG,KAAK,EAAE;4BAAC;;uBADlB,KAAK,EAAE;;;;;;;;;;;;;;;;AAOpC","debugId":null}}]
}