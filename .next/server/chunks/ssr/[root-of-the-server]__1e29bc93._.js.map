{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/env.mjs"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\n/**\n * 環境變數配置 - 程式碼優先的配置管理\n *\n * 設計原則：\n * 1. env.mjs 包含所有預設值和業務邏輯配置\n * 2. .env 檔案只覆寫需要變更或敏感的設定\n * 3. 開發時依賴預設值，生產時用環境變數覆蓋\n * 4. 共享配置避免重複定義\n *\n * 主要修正：\n * 1. 使用 z.coerce 簡化類型轉換，例如 z.coerce.boolean() 會自動將 \"true\" 轉為 true。\n * 2. 移除動態生成 client config 的函式，直接在 client schema 中定義 NEXT_PUBLIC_ 變數。\n * 3. runtimeEnv 直接設為 process.env，這是 Next.js 環境下的標準做法。\n */\n\nexport const env = createEnv({\n    /**\n     * 伺服器端專用環境變數。\n     * 這些變數「不會」暴露給客戶端，適合放置敏感資訊如 API 金鑰。\n     */\n    server: {\n        // ==========================================\n        // 專案核心配置 - 伺服器端專用\n        // ==========================================\n        PROJECT_CODE: z.string().default(\"minmax2025\"),\n        COUNTRY_SUBDOMAIN_MAP: z.string().default('{}'),\n\n        // ==========================================\n        // API 與外部服務配置 - 伺服器端專用\n        // ==========================================\n        API_BASE_URL: z.string().url().default(\"https://v5.jeffy.test\"),\n        I18N_CACHE_STRATEGY: z.enum([\"memory\", \"redis\", \"none\"]).default(\"memory\"),\n\n        // ==========================================\n        // 🔐 敏感資訊 - 僅伺服器端 (可視需求取消註解)\n        // ==========================================\n        // DATABASE_URL: z.string().url().optional(),\n        // REDIS_URL: z.string().url().optional(),\n        // API_SECRET_KEY: z.string().min(1).optional(),\n        // JWT_SECRET: z.string().min(1).optional(),\n        // ADMIN_API_KEY: z.string().min(1).optional(),\n        // GEO_API_KEY: z.string().min(1).optional(),\n    },\n\n    /**\n     * 客戶端環境變數。\n     * 必須以 `NEXT_PUBLIC_` 開頭，這些變數會被打包進客戶端的 JavaScript bundle 中。\n     * 絕對不要在此處放置任何敏感資訊。\n     */\n    client: {\n        // ==========================================\n        // 🏗️ 專案基本資訊 (來自共享配置)\n        // ==========================================\n        NEXT_PUBLIC_PROJECT_NAME: z.string().default(\"測試網站\"),\n        NEXT_PUBLIC_API_VERSION: z.string().default(\"1.0.0\"),\n\n        // ==========================================\n        // 🌍 國際化與語系配置 (來自共享配置)\n        // ==========================================\n        NEXT_PUBLIC_DEFAULT_LOCALE: z.string().default(\"zh-TW\"),\n        NEXT_PUBLIC_SUPPORTED_LOCALES: z.string().default('zh-TW'),\n        NEXT_PUBLIC_LOCALE_PREFIX_MODE: z.enum(['always', 'as-needed', 'never']).default('as-needed'),\n        NEXT_PUBLIC_LOCALE_DETECTION_ENABLED: z.coerce.boolean().default(true),\n        NEXT_PUBLIC_MULTI_LANGUAGE_ENABLED: z.coerce.boolean().default(true),\n        NEXT_PUBLIC_INTERNATIONALIZATION_ENABLED: z.coerce.boolean().default(true),\n\n        // ==========================================\n        // 🗺️ 地理位置偵測配置 (來自共享配置)\n        // ==========================================\n        NEXT_PUBLIC_GEO_DETECTION_STRATEGY: z.enum([\"cdn-only\", \"api-only\", \"cdn-fallback\"]).default(\"api-only\"),\n        NEXT_PUBLIC_GEO_DETECTION_ENABLED: z.coerce.boolean().default(false),\n        NEXT_PUBLIC_GEO_REDIRECT_MODE: z.enum([\"off\", \"suggest\", \"force\"]).default(\"suggest\"),\n        NEXT_PUBLIC_FORCE_REDIRECT: z.coerce.boolean().default(false),\n        NEXT_PUBLIC_CDN_COUNTRY_HEADER: z.string().default(\"cf-ipcountry\"),\n        NEXT_PUBLIC_GEO_API_PROVIDER: z.enum([\"ipapi\", \"ipinfo\", \"geoplugin\"]).default(\"geoplugin\"),\n        NEXT_PUBLIC_GEO_API_TIMEOUT: z.coerce.number().default(5000),\n\n        // ==========================================\n        // 🔄 快取系統配置 (來自共享配置)\n        // ==========================================\n        NEXT_PUBLIC_CACHE_ENABLED: z.coerce.boolean().default(true),\n        NEXT_PUBLIC_CACHE_CDN_ENABLED: z.coerce.boolean().default(false),\n        NEXT_PUBLIC_CACHE_DEFAULT_TTL: z.coerce.number().default(3600),\n\n        // ==========================================\n        // ⚙️ 功能開關 (來自共享配置)\n        // ==========================================\n        NEXT_PUBLIC_DEV_MODE_ENABLED: z.coerce.boolean().default(false),\n        NEXT_PUBLIC_MEMBERSHIP_ENABLED: z.coerce.boolean().default(false),\n\n        // ==========================================\n        // 🔧 開發與測試配置 (來自共享配置)\n        // ==========================================\n        NEXT_PUBLIC_USE_MOCK_API: z.coerce.boolean().default(true),\n        NEXT_PUBLIC_MOCK_API_DELAY: z.coerce.number().default(100),\n        NEXT_PUBLIC_MOCK_ERROR_ENABLED: z.coerce.boolean().default(false),\n        NEXT_PUBLIC_MOCK_ERROR_RATE: z.coerce.number().min(0).max(1).default(0.0),\n\n        // ==========================================\n        // 📊 監控與日誌配置 (來自共享配置)\n        // ==========================================\n        NEXT_PUBLIC_API_LOGGING_ENABLED: z.coerce.boolean().default(false),\n        NEXT_PUBLIC_PERFORMANCE_MONITORING_ENABLED: z.coerce.boolean().default(false),\n\n        // ==========================================\n        // ⏱️ 超時設定 (來自共享配置)\n        // ==========================================\n        NEXT_PUBLIC_API_TIMEOUT: z.coerce.number().default(30000),\n        NEXT_PUBLIC_CONTENT_API_TIMEOUT: z.coerce.number().default(60000),\n\n        // ==========================================\n        // 🌐 API 與服務配置 - 客戶端專用\n        // ==========================================\n        NEXT_PUBLIC_API_BASE_URL: z.string().url().default(\"http://localhost:3000/api/ssr/\"),\n\n        // ==========================================\n        // 🔧 外部服務配置 - 客戶端專用\n        // ==========================================\n        NEXT_PUBLIC_SENTRY_DSN: z.string().url().optional(),\n    },\n\n    /**\n     * 運行時的環境變數來源。\n     * 對於 Next.js，這應該總是 `process.env`。\n     * createEnv 會自動處理 server-side 和 client-side 的變數分離。\n     */\n    runtimeEnv: process.env,\n\n    /**\n     * 如果你想在建置（build）階段，當缺少客戶端環境變數時就讓建置失敗，\n     * 可以取消下面這行的註解。\n     */\n    // skipValidation: !!process.env.CI,\n});"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 124, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/config/api.config.ts"],"sourcesContent":["import { env } from '@/env.mjs';\n\n/**\n * API 應用配置（只保留業務邏輯）\n * - 不鏡射 env 值；需要時於此集中處理條件/轉換/群組\n * - 命名使用小寫（camelCase）\n */\n\n\n\n\nexport const apiConfig = {\n    // 衍生：根據是否使用 Mock 選擇實際 baseUrl\n    baseUrl: env.NEXT_PUBLIC_USE_MOCK_API ? env.NEXT_PUBLIC_API_BASE_URL : env.API_BASE_URL,\n\n    // 衍生：根據是否使用 Mock 切換端點路徑\n    endpoints: env.NEXT_PUBLIC_USE_MOCK_API\n        ? {\n            language: 'languages',\n            locales: 'locales',\n            systemMenus: 'system-menus',\n            webData: 'web-data',\n            detail: 'detail',\n        }\n        : {\n            language: '/api/v1/languages',\n            locales: '/api/v1/locales',\n            systemMenus: '/api/v1/system-menus',\n            webData: '/api/v1/web-data',\n            detail: '/api/v1/detail',\n        },\n\n    // 群組：超時（毫秒）直接取 env，集中使用\n    timeouts: {\n        api: env.NEXT_PUBLIC_API_TIMEOUT,\n        content: env.NEXT_PUBLIC_CONTENT_API_TIMEOUT,\n        geo: env.NEXT_PUBLIC_GEO_API_TIMEOUT,\n    },\n\n    // 業務常數：重試策略（如需環境化，於此處加衍生邏輯）\n    retry: {\n        attempts: 3,\n        delay: 1000,\n        exponentialBackoff: true,\n    },\n\n    // 業務判斷：是否模擬延遲/錯誤與相關參數\n    shouldSimulateDelay: () => env.NEXT_PUBLIC_USE_MOCK_API && env.NEXT_PUBLIC_MOCK_API_DELAY > 0,\n    getMockDelay: () => env.NEXT_PUBLIC_MOCK_API_DELAY,\n    shouldSimulateError: () => env.NEXT_PUBLIC_MOCK_ERROR_ENABLED && Math.random() < env.NEXT_PUBLIC_MOCK_ERROR_RATE,\n} as const;\n\nexport type ApiConfig = typeof apiConfig;"],"names":[],"mappings":";;;AAAA;;AAWO,MAAM,YAAY;IACrB,8BAA8B;IAC9B,SAAS,2GAAA,CAAA,MAAG,CAAC,wBAAwB,GAAG,2GAAA,CAAA,MAAG,CAAC,wBAAwB,GAAG,2GAAA,CAAA,MAAG,CAAC,YAAY;IAEvF,wBAAwB;IACxB,WAAW,2GAAA,CAAA,MAAG,CAAC,wBAAwB,GACjC;QACE,UAAU;QACV,SAAS;QACT,aAAa;QACb,SAAS;QACT,QAAQ;IACZ,IACE;QACE,UAAU;QACV,SAAS;QACT,aAAa;QACb,SAAS;QACT,QAAQ;IACZ;IAEJ,wBAAwB;IACxB,UAAU;QACN,KAAK,2GAAA,CAAA,MAAG,CAAC,uBAAuB;QAChC,SAAS,2GAAA,CAAA,MAAG,CAAC,+BAA+B;QAC5C,KAAK,2GAAA,CAAA,MAAG,CAAC,2BAA2B;IACxC;IAEA,4BAA4B;IAC5B,OAAO;QACH,UAAU;QACV,OAAO;QACP,oBAAoB;IACxB;IAEA,sBAAsB;IACtB,qBAAqB,IAAM,2GAAA,CAAA,MAAG,CAAC,wBAAwB,IAAI,2GAAA,CAAA,MAAG,CAAC,0BAA0B,GAAG;IAC5F,cAAc,IAAM,2GAAA,CAAA,MAAG,CAAC,0BAA0B;IAClD,qBAAqB,IAAM,2GAAA,CAAA,MAAG,CAAC,8BAA8B,IAAI,KAAK,MAAM,KAAK,2GAAA,CAAA,MAAG,CAAC,2BAA2B;AACpH","debugId":null}},
    {"offset": {"line": 167, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/config/app.client.config.ts"],"sourcesContent":["import { env } from '@/env.mjs';\n\n/**\n * 客戶端應用配置（僅保留必要的業務衍生值）\n * - 直接在使用處讀 env.NEXT_PUBLIC_*，此處不重複包裝\n * - 命名使用小寫（camelCase）\n */\nexport const appConfig = {\n    // 衍生：API 超時（毫秒），若無設定則回退 30000\n    apiTimeout:\n        typeof env.NEXT_PUBLIC_API_TIMEOUT === 'number'\n            ? env.NEXT_PUBLIC_API_TIMEOUT\n            : Number.parseInt(String(env.NEXT_PUBLIC_API_TIMEOUT ?? ''), 10) || 30000,\n\n    // 衍生：i18n 啟用（客戶端視角）的布林正規化\n    i18nEnabled:\n        typeof env.NEXT_PUBLIC_MULTI_LANGUAGE_ENABLED === 'boolean'\n            ? env.NEXT_PUBLIC_MULTI_LANGUAGE_ENABLED\n            : String(env.NEXT_PUBLIC_MULTI_LANGUAGE_ENABLED).toLowerCase() === 'true',\n} as const;\n\nexport type AppClientConfig = typeof appConfig;"],"names":[],"mappings":";;;AAAA;;AAOO,MAAM,YAAY;IACrB,8BAA8B;IAC9B,YACI,OAAO,2GAAA,CAAA,MAAG,CAAC,uBAAuB,KAAK,WACjC,2GAAA,CAAA,MAAG,CAAC,uBAAuB,GAC3B,OAAO,QAAQ,CAAC,OAAO,2GAAA,CAAA,MAAG,CAAC,uBAAuB,IAAI,KAAK,OAAO;IAE5E,0BAA0B;IAC1B,aACI,OAAO,2GAAA,CAAA,MAAG,CAAC,kCAAkC,KAAK,YAC5C,2GAAA,CAAA,MAAG,CAAC,kCAAkC,GACtC,OAAO,2GAAA,CAAA,MAAG,CAAC,kCAAkC,EAAE,WAAW,OAAO;AAC/E","debugId":null}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/config/app.server.config.ts"],"sourcesContent":["import { env } from '@/env.mjs';\n\n/**\n * 服務端應用配置層\n * 只包含真正需要業務邏輯處理的配置\n * ⚠️ 此檔案只能在伺服器端使用\n */\nexport const SERVER_APP_CONFIG = {\n    // 國際化配置 - 數據轉換\n    i18n: {\n        supportedLocales: env.SUPPORTED_LOCALES.split(',').map((locale) => locale.trim()),\n        countrySubdomainMap: JSON.parse(env.COUNTRY_SUBDOMAIN_MAP || '{}'),\n    },\n\n    // API 配置 - 條件邏輯\n    api: {\n        baseUrl: env.USE_MOCK_API ? env.API_BASE_URL : env.API_BASE_URL,\n    },\n} as const;\n\n// 導出計算屬性 - 只包含真正的業務邏輯組合\nexport const SERVER_COMPUTED = {\n    /** 是否啟用完整國際化功能（伺服端視角） */\n    isI18nEnabled: () => env.INTERNATIONALIZATION_ENABLED && env.MULTI_LANGUAGE_ENABLED,\n\n    /** 檢查是否支援特定語系 */\n    isLocaleSupported: (locale: string) => SERVER_APP_CONFIG.i18n.supportedLocales.includes(locale),\n\n    /** 是否應該模擬 API 延遲 */\n    shouldSimulateDelay: () => env.USE_MOCK_API && env.MOCK_API_DELAY > 0,\n\n    /** 是否應該模擬錯誤 */\n    shouldSimulateError: () => env.MOCK_ERROR_ENABLED && Math.random() < env.MOCK_ERROR_RATE,\n} as const;\n\nexport type ServerAppConfig = typeof SERVER_APP_CONFIG;"],"names":[],"mappings":";;;;AAAA;;AAOO,MAAM,oBAAoB;IAC7B,eAAe;IACf,MAAM;QACF,kBAAkB,2GAAA,CAAA,MAAG,CAAC,iBAAiB,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,SAAW,OAAO,IAAI;QAC9E,qBAAqB,KAAK,KAAK,CAAC,2GAAA,CAAA,MAAG,CAAC,qBAAqB,IAAI;IACjE;IAEA,gBAAgB;IAChB,KAAK;QACD,SAAS,2GAAA,CAAA,MAAG,CAAC,YAAY,GAAG,2GAAA,CAAA,MAAG,CAAC,YAAY,GAAG,2GAAA,CAAA,MAAG,CAAC,YAAY;IACnE;AACJ;AAGO,MAAM,kBAAkB;IAC3B,uBAAuB,GACvB,eAAe,IAAM,2GAAA,CAAA,MAAG,CAAC,4BAA4B,IAAI,2GAAA,CAAA,MAAG,CAAC,sBAAsB;IAEnF,eAAe,GACf,mBAAmB,CAAC,SAAmB,kBAAkB,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC;IAExF,kBAAkB,GAClB,qBAAqB,IAAM,2GAAA,CAAA,MAAG,CAAC,YAAY,IAAI,2GAAA,CAAA,MAAG,CAAC,cAAc,GAAG;IAEpE,aAAa,GACb,qBAAqB,IAAM,2GAAA,CAAA,MAAG,CAAC,kBAAkB,IAAI,KAAK,MAAM,KAAK,2GAAA,CAAA,MAAG,CAAC,eAAe;AAC5F","debugId":null}},
    {"offset": {"line": 209, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/config/locale.server.config.ts"],"sourcesContent":["import { env } from '@/env.mjs';\n\n/**\n * 服務端語系配置（只保留需要的轉換與工具）\n * - 不鏡射 env 值（如 defaultLocale/localePrefixMode），在使用處直接讀 env\n * - 命名使用小寫（camelCase）\n */\n\nexport const serverLocaleConfig = {\n    // 衍生：支援語系陣列\n    supportedLocales: env.SUPPORTED_LOCALES.split(',').map((l) => l.trim()),\n    // 工具：語系驗證（使用衍生 supportedLocales）\n    isValidLocale: (locale: string): boolean => {\n        return serverLocaleConfig.supportedLocales.includes(locale);\n    },\n    // 工具：取得有效的預設語系\n    getValidDefaultLocale: (): string => {\n        const envDefault = env.DEFAULT_LANGUAGE;\n        return serverLocaleConfig.supportedLocales.includes(envDefault)\n            ? envDefault\n            : serverLocaleConfig.supportedLocales[0];\n    },\n    // 衍生：國家子網域映射\n    countrySubdomainMap: JSON.parse(env.COUNTRY_SUBDOMAIN_MAP || '{}'),\n    // 工具：依國家取子網域（使用衍生 countrySubdomainMap）\n    getSubdomainByCountry: (country: string): string | null => {\n        return serverLocaleConfig.countrySubdomainMap[country] || null;\n    },\n} as const;\n\nexport type ServerLocaleConfig = typeof serverLocaleConfig;"],"names":[],"mappings":";;;AAAA;;AAQO,MAAM,qBAAqB;IAC9B,YAAY;IACZ,kBAAkB,2GAAA,CAAA,MAAG,CAAC,iBAAiB,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,IAAM,EAAE,IAAI;IACpE,iCAAiC;IACjC,eAAe,CAAC;QACZ,OAAO,mBAAmB,gBAAgB,CAAC,QAAQ,CAAC;IACxD;IACA,eAAe;IACf,uBAAuB;QACnB,MAAM,aAAa,2GAAA,CAAA,MAAG,CAAC,gBAAgB;QACvC,OAAO,mBAAmB,gBAAgB,CAAC,QAAQ,CAAC,cAC9C,aACA,mBAAmB,gBAAgB,CAAC,EAAE;IAChD;IACA,aAAa;IACb,qBAAqB,KAAK,KAAK,CAAC,2GAAA,CAAA,MAAG,CAAC,qBAAqB,IAAI;IAC7D,uCAAuC;IACvC,uBAAuB,CAAC;QACpB,OAAO,mBAAmB,mBAAmB,CAAC,QAAQ,IAAI;IAC9D;AACJ","debugId":null}},
    {"offset": {"line": 237, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/config/locale.client.config.ts"],"sourcesContent":["import { env } from '@/env.mjs';\n\n/**\n * 客戶端語系配置（僅保留業務邏輯）\n * 原則：\n * - 不重複 env.mjs，原始值在使用處直接讀 env.NEXT_PUBLIC_*\n * - 只做必要的衍生/工具，命名用小寫（camelCase）\n */\nexport const clientLocaleConfig = {\n    // 衍生：支援語系陣列\n    supportedLocales: env.NEXT_PUBLIC_SUPPORTED_LOCALES.split(',').map((l) => l.trim()),\n\n    // 工具：驗證語系是否被支援（使用衍生 supportedLocales）\n    isValidLocale: (locale: string): boolean => {\n        return clientLocaleConfig.supportedLocales.includes(locale);\n    },\n} as const;\n\nexport type ClientLocaleConfig = typeof clientLocaleConfig;\n"],"names":[],"mappings":";;;AAAA;;AAQO,MAAM,qBAAqB;IAC9B,YAAY;IACZ,kBAAkB,2GAAA,CAAA,MAAG,CAAC,6BAA6B,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,IAAM,EAAE,IAAI;IAEhF,sCAAsC;IACtC,eAAe,CAAC;QACZ,OAAO,mBAAmB,gBAAgB,CAAC,QAAQ,CAAC;IACxD;AACJ","debugId":null}},
    {"offset": {"line": 254, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/config/cache.client.config.ts"],"sourcesContent":["/**\n * 快取系統客戶端配置檔案（僅業務邏輯）\n */\n\n// redis 相關鍵格式（客戶端僅作 key 規則使用，不連線）\nconst redisConfig = {\n    prefix: 'minmax:',\n    keySeparator: ':',\n} as const;\n\n/**\n * 快取資料類型定義 - 統一管理所有快取相關設定\n * - 僅保留客戶端需要的預設 ttl/tags/描述\n */\nconst cacheDataTypes = {\n    languages: {\n        ttl: 7200, // 2 小時\n        tags: ['languages', 'static-data'] as string[],\n        description: '語言資料快取',\n    },\n    locales: {\n        ttl: 7200, // 2 小時\n        tags: ['locales', 'static-data'] as string[],\n        description: '地區設定快取',\n    },\n    menus: {\n        ttl: 3600, // 1 小時\n        tags: ['menus', 'navigation'] as string[],\n        description: '選單資料快取',\n    },\n    webData: {\n        ttl: 3600, // 1 小時\n        tags: ['web-data', 'static-data'] as string[],\n        description: '網站資料快取',\n    },\n    pages: {\n        ttl: 1800, // 30 分鐘\n        tags: ['pages', 'content'] as string[],\n        description: '頁面內容快取',\n    },\n    geoData: {\n        ttl: 1800, // 30 分鐘\n        tags: ['geo-data', 'location'] as string[],\n        description: '地理位置資料快取',\n    },\n    userData: {\n        ttl: 600, // 10 分鐘\n        tags: ['user-data', 'dynamic-data'] as string[],\n        description: '使用者資料快取',\n    },\n    apiResponse: {\n        ttl: 3600, // 預設 1 小時，服務端可覆蓋\n        tags: ['api-response'] as string[],\n        description: 'API 回應快取',\n    },\n} as const;\n\nexport type CacheDataType = keyof typeof cacheDataTypes;\n\n/**\n * 客戶端快取配置（僅業務邏輯）\n */\nexport const cacheConfig = {\n    // 基礎配置（客戶端預設值）\n    enabled: true,\n    cdnEnabled: false,\n    defaultTtl: 3600,\n    strategy: 'memory' as const,\n\n    // key 規則（僅作為 key 生成規範）\n    redis: redisConfig,\n\n    // 從 cacheDataTypes 自動生成 ttl 與 tags 映射\n    ttl: {\n        languages: cacheDataTypes.languages.ttl,\n        locales: cacheDataTypes.locales.ttl,\n        menus: cacheDataTypes.menus.ttl,\n        webData: cacheDataTypes.webData.ttl,\n        pages: cacheDataTypes.pages.ttl,\n        geoData: cacheDataTypes.geoData.ttl,\n        userData: cacheDataTypes.userData.ttl,\n        apiResponse: cacheDataTypes.apiResponse.ttl,\n    },\n\n    tags: {\n        languages: cacheDataTypes.languages.tags,\n        locales: cacheDataTypes.locales.tags,\n        menus: cacheDataTypes.menus.tags,\n        webData: cacheDataTypes.webData.tags,\n        pages: cacheDataTypes.pages.tags,\n        geoData: cacheDataTypes.geoData.tags,\n        userData: cacheDataTypes.userData.tags,\n        apiResponse: cacheDataTypes.apiResponse.tags,\n    },\n\n    // 快取鍵值生成（不依賴自身物件，避免初始化順序問題）\n    generateKey: (type: CacheDataType, identifier: string, locale?: string): string => {\n        const parts = [redisConfig.prefix, type, identifier];\n        if (locale) parts.push(locale);\n        return parts.join(redisConfig.keySeparator);\n    },\n} as const;\n\n/**\n * 取得指定資料類型的完整配置\n */\nexport function getCacheConfig(type: CacheDataType) {\n    return cacheDataTypes[type];\n}\n\n/**\n * 取得指定資料類型的 TTL（毫秒）\n */\nexport function getCacheTtl(type: CacheDataType): number {\n    return cacheDataTypes[type].ttl * 1000;\n}\n\n/**\n * 取得指定資料類型的標籤\n */\nexport function getCacheTags(type: CacheDataType): string[] {\n    return cacheDataTypes[type].tags;\n}\n\n/**\n * 根據標籤找到相關的資料類型\n */\nexport function getDataTypesByTag(tag: string): CacheDataType[] {\n    return Object.entries(cacheDataTypes)\n        .filter(([_, config]) => config.tags.includes(tag))\n        .map(([key]) => key as CacheDataType);\n}\n\n/**\n * 取得所有可用的標籤\n */\nexport function getAllCacheTags(): string[] {\n    const allTags = Object.values(cacheDataTypes).flatMap((config) => config.tags);\n    return [...new Set(allTags)];\n}\n\n/**\n * 取得快取配置摘要（用於除錯）\n */\nexport function getCacheConfigSummary() {\n    return Object.entries(cacheDataTypes).map(([type, config]) => ({\n        type,\n        ttl: `${config.ttl}s (${config.ttl / 60}min)`,\n        tags: config.tags.join(', '),\n        description: config.description,\n    }));\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 408, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/config/cache.server.config.ts"],"sourcesContent":["/**\n * 快取系統服務端配置（僅業務邏輯）\n * - 不重複 env：用 getter 直接回傳 env 值\n * - 保留 server 覆寫 ttl 與鍵規則（generateKey）\n * - 命名使用小寫（camelCase）\n */\nimport { env } from '@/env.mjs';\nimport {\n    cacheConfig,                 // client 的 key 規則與基本 ttl/tags\n    getCacheConfig,\n    getCacheTtl as getCacheTtlClientMs,\n    getCacheTags as getCacheTagsClient,\n    getDataTypesByTag,\n    getAllCacheTags,\n    getCacheConfigSummary,\n    type CacheDataType,\n} from './cache.client.config';\n\n// 服務端覆寫：僅作必要差異（例：apiResponse）\nconst serverTtl = {\n    ...cacheConfig.ttl,\n    apiResponse: env.CACHE_DEFAULT_TTL, // 秒\n} as const;\n\nconst serverTags = {\n    ...cacheConfig.tags,\n} as const;\n\nexport const serverCacheConfig = {\n    // key 規則（沿用 client）\n    redis: cacheConfig.redis,\n\n    // ttl/tags 聚合（server 覆寫）\n    ttl: serverTtl,   // 秒\n    tags: serverTags,\n\n    // 快取鍵值生成（純規則）\n    generateKey: (type: CacheDataType, identifier: string, locale?: string): string => {\n        const parts = [cacheConfig.redis.prefix, type, identifier];\n        if (locale) parts.push(locale);\n        return parts.join(cacheConfig.redis.keySeparator);\n    },\n} as const;\n\n// 直接讀 env（避免鏡射）\nexport const isCacheEnabled = (): boolean => env.CACHE_ENABLED;\nexport const isCdnEnabled = (): boolean => env.CACHE_CDN_ENABLED;\nexport const getDefaultTtl = (): number => env.CACHE_DEFAULT_TTL; // 秒\nexport const getCacheStrategy = (): 'memory' | 'redis' | 'none' => env.I18N_CACHE_STRATEGY;\n\n// 共用導出\nexport {\n    getCacheConfig,\n    getCacheTtlClientMs,\n    getCacheTagsClient,\n    getDataTypesByTag,\n    getAllCacheTags,\n    getCacheConfigSummary,\n    type CacheDataType,\n};\n\n// 服務端便捷函式\nexport function getServerCacheConfig(type: CacheDataType) {\n    const base = getCacheConfig(type);\n    return {\n        type,\n        ttl: serverTtl[type],            // 秒\n        tags: serverTags[type],\n        description: base.description,\n    };\n}\nexport function getServerCacheTtl(type: CacheDataType): number {\n    return serverTtl[type];            // 秒\n}\nexport function getServerCacheTtlMs(type: CacheDataType): number {\n    return serverTtl[type] * 1000;     // 毫秒\n}\nexport function getServerCacheTags(type: CacheDataType): string[] {\n    return serverTags[type];\n}\nexport function getServerCacheConfigSummary() {\n    return (Object.keys(serverTtl) as CacheDataType[]).map((type) => ({\n        type,\n        ttl: `${serverTtl[type]}s (${serverTtl[type] / 60}min)`,\n        tags: serverTags[type].join(', '),\n        description: getCacheConfig(type).description,\n    }));\n}\n\nexport type ServerCacheConfig = typeof serverCacheConfig;"],"names":[],"mappings":"AAAA;;;;;CAKC;;;;;;;;;;;;AACD;AACA;;;AAWA,8BAA8B;AAC9B,MAAM,YAAY;IACd,GAAG,0IAAA,CAAA,cAAW,CAAC,GAAG;IAClB,aAAa,2GAAA,CAAA,MAAG,CAAC,iBAAiB;AACtC;AAEA,MAAM,aAAa;IACf,GAAG,0IAAA,CAAA,cAAW,CAAC,IAAI;AACvB;AAEO,MAAM,oBAAoB;IAC7B,oBAAoB;IACpB,OAAO,0IAAA,CAAA,cAAW,CAAC,KAAK;IAExB,yBAAyB;IACzB,KAAK;IACL,MAAM;IAEN,cAAc;IACd,aAAa,CAAC,MAAqB,YAAoB;QACnD,MAAM,QAAQ;YAAC,0IAAA,CAAA,cAAW,CAAC,KAAK,CAAC,MAAM;YAAE;YAAM;SAAW;QAC1D,IAAI,QAAQ,MAAM,IAAI,CAAC;QACvB,OAAO,MAAM,IAAI,CAAC,0IAAA,CAAA,cAAW,CAAC,KAAK,CAAC,YAAY;IACpD;AACJ;AAGO,MAAM,iBAAiB,IAAe,2GAAA,CAAA,MAAG,CAAC,aAAa;AACvD,MAAM,eAAe,IAAe,2GAAA,CAAA,MAAG,CAAC,iBAAiB;AACzD,MAAM,gBAAgB,IAAc,2GAAA,CAAA,MAAG,CAAC,iBAAiB,EAAE,IAAI;AAC/D,MAAM,mBAAmB,IAAmC,2GAAA,CAAA,MAAG,CAAC,mBAAmB;;AAcnF,SAAS,qBAAqB,IAAmB;IACpD,MAAM,OAAO,CAAA,GAAA,0IAAA,CAAA,iBAAc,AAAD,EAAE;IAC5B,OAAO;QACH;QACA,KAAK,SAAS,CAAC,KAAK;QACpB,MAAM,UAAU,CAAC,KAAK;QACtB,aAAa,KAAK,WAAW;IACjC;AACJ;AACO,SAAS,kBAAkB,IAAmB;IACjD,OAAO,SAAS,CAAC,KAAK,EAAa,IAAI;AAC3C;AACO,SAAS,oBAAoB,IAAmB;IACnD,OAAO,SAAS,CAAC,KAAK,GAAG,MAAU,KAAK;AAC5C;AACO,SAAS,mBAAmB,IAAmB;IAClD,OAAO,UAAU,CAAC,KAAK;AAC3B;AACO,SAAS;IACZ,OAAO,AAAC,OAAO,IAAI,CAAC,WAA+B,GAAG,CAAC,CAAC,OAAS,CAAC;YAC9D;YACA,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,EAAE,SAAS,CAAC,KAAK,GAAG,GAAG,IAAI,CAAC;YACvD,MAAM,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC;YAC5B,aAAa,CAAA,GAAA,0IAAA,CAAA,iBAAc,AAAD,EAAE,MAAM,WAAW;QACjD,CAAC;AACL","debugId":null}},
    {"offset": {"line": 497, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/config/index.ts"],"sourcesContent":["/**\n * 統一配置導出\n * 整合所有配置相關的設定\n */\n\n// 導出環境變數配置\n// export { env } from '../env.mjs';\n\n// 導出 API 配置\nexport * from './api.config';\n\n// 導出應用程式配置\nexport * from './app.client.config';\nexport * from './app.server.config';\n\n// 導出語系配置\nexport * from './locale.server.config';\nexport * from './locale.client.config';\n\n// 導出快取配置\nexport * from './cache.client.config';\nexport * from './cache.server.config';"],"names":[],"mappings":"AAAA;;;CAGC,GAED,WAAW;AACX,oCAAoC;AAEpC,YAAY;;AACZ;AAEA,WAAW;AACX;AACA;AAEA,SAAS;AACT;AACA;AAEA,SAAS;AACT;AACA","debugId":null}},
    {"offset": {"line": 538, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/i18n/routing.ts"],"sourcesContent":["import { defineRouting } from 'next-intl/routing';\nimport { serverLocaleConfig } from '@/config/';\nimport { env } from '@/env.mjs';\n\n\nexport const routing = defineRouting({\n    // 支援的語系 - 從環境變數讀取，會被 API 動態覆蓋\n    locales: serverLocaleConfig.supportedLocales,\n\n    // 預設語系 - 先用 env，若不在支援清單內則回退第一個\n    defaultLocale: serverLocaleConfig.getValidDefaultLocale(),\n\n\n    // 語系前綴模式 - 從環境變數讀取\n    localePrefix: env.LOCALE_PREFIX_MODE,\n\n    // 啟用語系檢測 - 從環境變數讀取\n    localeDetection: env.LOCALE_DETECTION_ENABLED\n});"],"names":[],"mappings":";;;AAAA;AACA;AAAA;AACA;;;;AAGO,MAAM,UAAU,CAAA,GAAA,kOAAA,CAAA,gBAAa,AAAD,EAAE;IACjC,8BAA8B;IAC9B,SAAS,2IAAA,CAAA,qBAAkB,CAAC,gBAAgB;IAE5C,+BAA+B;IAC/B,eAAe,2IAAA,CAAA,qBAAkB,CAAC,qBAAqB;IAGvD,mBAAmB;IACnB,cAAc,2GAAA,CAAA,MAAG,CAAC,kBAAkB;IAEpC,mBAAmB;IACnB,iBAAiB,2GAAA,CAAA,MAAG,CAAC,wBAAwB;AACjD","debugId":null}},
    {"offset": {"line": 562, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/lib/dev-logger.ts"],"sourcesContent":["/**\n * 開發環境專用日誌工具\n *\n * 功能：\n * - 只在開發環境輸出日誌\n * - 提供不同等級的日誌方法\n * - 統一的日誌格式和樣式\n * - 支援業務日誌（可在生產環境使用）\n */\n\n/**\n * 檢查是否為開發環境\n */\nconst isDevelopment = process.env.NODE_ENV === 'development';\n\n// ==========================================\n// 開發環境專用日誌函數\n// ==========================================\n\n/**\n * 開發環境專用的一般日誌\n */\nexport const devLog = (message: string, data?: unknown) => {\n    if (isDevelopment) {\n        console.log(`📝 ${message}`, data ? data : '');\n    }\n};\n\n/**\n * 開發環境專用的資訊日誌\n */\nexport const devInfo = (message: string, data?: unknown) => {\n    if (isDevelopment) {\n        console.info(`ℹ️ ${message}`, data ? data : '');\n    }\n};\n\n/**\n * 開發環境專用的警告日誌\n */\nexport const devWarn = (message: string, data?: unknown) => {\n    if (isDevelopment) {\n        console.warn(`⚠️ ${message}`, data ? data : '');\n    }\n};\n\n/**\n * 開發環境專用的錯誤日誌\n */\nexport const devError = (message: string, data?: unknown) => {\n    if (isDevelopment) {\n        console.error(`❌ ${message}`, data ? data : '');\n    }\n};\n\n/**\n * 開發環境專用的除錯日誌\n */\nexport const devDebug = (message: string, data?: unknown) => {\n    if (isDevelopment) {\n        console.log(`🐛 ${message}`, data ? data : '');\n    }\n};\n\n/**\n * 開發環境專用的成功日誌\n */\nexport const devSuccess = (message: string, data?: unknown) => {\n    if (isDevelopment) {\n        console.log(`✅ ${message}`, data ? data : '');\n    }\n};\n\n// ==========================================\n// 業務日誌函數（可在生產環境使用）\n// ==========================================\n\n/**\n * 業務日誌：API 呼叫記錄\n * 受 API_LOGGING_ENABLED 環境變數控制\n */\nexport const apiLog = (message: string, data?: unknown) => {\n    const apiLoggingEnabled = process.env.API_LOGGING_ENABLED === 'true';\n    if (apiLoggingEnabled) {\n        console.log(`🌐 ${message}`, data ? data : '');\n    }\n};\n\n/**\n * 業務日誌：API 成功記錄\n */\nexport const apiSuccess = (message: string, data?: unknown) => {\n    const apiLoggingEnabled = process.env.API_LOGGING_ENABLED === 'true';\n    if (apiLoggingEnabled) {\n        console.log(`✅ ${message}`, data ? data : '');\n    }\n};\n\n/**\n * 業務日誌：API 錯誤記錄（總是記錄，不受環境變數控制）\n */\nexport const apiError = (message: string, data?: unknown) => {\n    console.error(`❌ ${message}`, data ? data : '');\n};\n\n// ==========================================\n// 開發工具類別\n// ==========================================\n\n/**\n * 開發環境專用的效能計時器\n */\nexport class DevTimer {\n    private startTime: number;\n    private label: string;\n\n    constructor(label: string) {\n        this.label = label;\n        this.startTime = performance.now();\n        if (isDevelopment) {\n            console.time(label);\n        }\n    }\n\n    end() {\n        if (isDevelopment) {\n            console.timeEnd(this.label);\n            const duration = performance.now() - this.startTime;\n            console.log(`⏱️ ${this.label}: ${duration.toFixed(2)}ms`);\n        }\n    }\n}\n\n/**\n * 開發環境專用的物件檢查器\n */\nexport const devInspect = (label: string, obj: unknown) => {\n    if (isDevelopment) {\n        console.group(`🔍 ${label}`);\n        console.log(obj);\n        console.groupEnd();\n    }\n};\n\n/**\n * 開發環境專用的表格顯示\n */\nexport const devTable = (label: string, data: unknown[]) => {\n    if (isDevelopment && Array.isArray(data)) {\n        console.log(`📊 ${label}`);\n        console.table(data);\n    }\n};"],"names":[],"mappings":"AAAA;;;;;;;;CAQC,GAED;;CAEC;;;;;;;;;;;;;;AACD,MAAM,gBAAgB,oDAAyB;AASxC,MAAM,SAAS,CAAC,SAAiB;IACpC,wCAAmB;QACf,QAAQ,GAAG,CAAC,CAAC,GAAG,EAAE,SAAS,EAAE,OAAO,OAAO;IAC/C;AACJ;AAKO,MAAM,UAAU,CAAC,SAAiB;IACrC,wCAAmB;QACf,QAAQ,IAAI,CAAC,CAAC,GAAG,EAAE,SAAS,EAAE,OAAO,OAAO;IAChD;AACJ;AAKO,MAAM,UAAU,CAAC,SAAiB;IACrC,wCAAmB;QACf,QAAQ,IAAI,CAAC,CAAC,GAAG,EAAE,SAAS,EAAE,OAAO,OAAO;IAChD;AACJ;AAKO,MAAM,WAAW,CAAC,SAAiB;IACtC,wCAAmB;QACf,QAAQ,KAAK,CAAC,CAAC,EAAE,EAAE,SAAS,EAAE,OAAO,OAAO;IAChD;AACJ;AAKO,MAAM,WAAW,CAAC,SAAiB;IACtC,wCAAmB;QACf,QAAQ,GAAG,CAAC,CAAC,GAAG,EAAE,SAAS,EAAE,OAAO,OAAO;IAC/C;AACJ;AAKO,MAAM,aAAa,CAAC,SAAiB;IACxC,wCAAmB;QACf,QAAQ,GAAG,CAAC,CAAC,EAAE,EAAE,SAAS,EAAE,OAAO,OAAO;IAC9C;AACJ;AAUO,MAAM,SAAS,CAAC,SAAiB;IACpC,MAAM,oBAAoB,QAAQ,GAAG,CAAC,mBAAmB,KAAK;IAC9D,IAAI,mBAAmB;QACnB,QAAQ,GAAG,CAAC,CAAC,GAAG,EAAE,SAAS,EAAE,OAAO,OAAO;IAC/C;AACJ;AAKO,MAAM,aAAa,CAAC,SAAiB;IACxC,MAAM,oBAAoB,QAAQ,GAAG,CAAC,mBAAmB,KAAK;IAC9D,IAAI,mBAAmB;QACnB,QAAQ,GAAG,CAAC,CAAC,EAAE,EAAE,SAAS,EAAE,OAAO,OAAO;IAC9C;AACJ;AAKO,MAAM,WAAW,CAAC,SAAiB;IACtC,QAAQ,KAAK,CAAC,CAAC,EAAE,EAAE,SAAS,EAAE,OAAO,OAAO;AAChD;AASO,MAAM;IACD,UAAkB;IAClB,MAAc;IAEtB,YAAY,KAAa,CAAE;QACvB,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,SAAS,GAAG,YAAY,GAAG;QAChC,wCAAmB;YACf,QAAQ,IAAI,CAAC;QACjB;IACJ;IAEA,MAAM;QACF,wCAAmB;YACf,QAAQ,OAAO,CAAC,IAAI,CAAC,KAAK;YAC1B,MAAM,WAAW,YAAY,GAAG,KAAK,IAAI,CAAC,SAAS;YACnD,QAAQ,GAAG,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,SAAS,OAAO,CAAC,GAAG,EAAE,CAAC;QAC5D;IACJ;AACJ;AAKO,MAAM,aAAa,CAAC,OAAe;IACtC,wCAAmB;QACf,QAAQ,KAAK,CAAC,CAAC,GAAG,EAAE,OAAO;QAC3B,QAAQ,GAAG,CAAC;QACZ,QAAQ,QAAQ;IACpB;AACJ;AAKO,MAAM,WAAW,CAAC,OAAe;IACpC,IAAI,iBAAiB,MAAM,OAAO,CAAC,OAAO;QACtC,QAAQ,GAAG,CAAC,CAAC,GAAG,EAAE,OAAO;QACzB,QAAQ,KAAK,CAAC;IAClB;AACJ","debugId":null}},
    {"offset": {"line": 667, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/services/base/api-service.base.ts"],"sourcesContent":["import { env } from '@/env.mjs';\nimport { apiConfig } from '@/config/api.config';\nimport {\n    devLog,\n    devWarn,\n    devError,\n    devDebug,\n    devSuccess,\n    DevTimer,\n    apiLog,\n    apiSuccess,\n    apiError\n} from '@/lib/dev-logger';\n\n/**\n * API 服務基底類別\n * 提供通用的 API 請求處理邏輯\n */\nexport abstract class BaseApiService {\n    protected readonly serviceName: string;\n\n    constructor(serviceName: string) {\n        this.serviceName = serviceName;\n    }\n\n    /**\n     * 通用的 API 請求方法\n     */\n    protected async apiRequest<T>(\n        endpoint: { mock: string; external: string },\n        options: RequestInit = {}\n    ): Promise<T> {\n        const url = this.buildApiUrl(endpoint);\n\n        // 開發環境的詳細除錯日誌\n        devDebug(`開始 API 請求: ${this.serviceName}`, { url, options });\n\n        // 效能監控（僅開發環境）\n        const timer = new DevTimer(`${this.serviceName} API 請求`);\n\n        try {\n            this.logApiCall(url);\n\n            const response = await fetch(url, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    ...options.headers,\n                },\n                ...(env.USE_MOCK_API\n                    ? {}\n                    : {\n                        signal: AbortSignal.timeout(apiConfig.timeouts.api),\n                    }),\n                ...options,\n            });\n\n            // HTTP 狀態碼錯誤處理\n            if (!response.ok) {\n                const errorDetails = {\n                    url,\n                    status: response.status,\n                    statusText: response.statusText,\n                    headers: Object.fromEntries(response.headers.entries())\n                };\n\n                // 根據狀態碼決定日誌等級\n                if (response.status >= 500) {\n                    // 5xx 伺服器錯誤 - 使用 error 等級\n                    devError(`伺服器錯誤 (${response.status}): ${this.serviceName}`, errorDetails);\n                } else if (response.status >= 400) {\n                    // 4xx 客戶端錯誤 - 使用 warn 等級\n                    devWarn(`客戶端錯誤 (${response.status}): ${this.serviceName}`, {\n                        ...errorDetails,\n                        possibleCauses: this.getPossibleCauses(response.status)\n                    });\n                } else {\n                    // 其他非 2xx 狀態碼\n                    devWarn(`非預期回應 (${response.status}): ${this.serviceName}`, errorDetails);\n                }\n\n                throw new Error(`${this.serviceName} API 請求失敗: ${response.status} ${response.statusText}`);\n            }\n\n            const apiResponse = await response.json();\n            const data: T = apiResponse.data ?? apiResponse;\n\n            // 開發環境的回應資料檢查\n            devDebug(`API 回應資料: ${this.serviceName}`, data);\n\n            this.logSuccess(data);\n            timer.end(); // 結束效能計時\n\n            return data;\n        } catch (error) {\n            timer.end(); // 即使錯誤也要結束計時\n\n            // 區分不同類型的錯誤\n            if (error instanceof TypeError && error.message.includes('fetch')) {\n                // 網路連線錯誤\n                devError(`網路連線失敗: ${this.serviceName}`, {\n                    url,\n                    error: error.message,\n                    possibleCauses: ['網路斷線', 'DNS 解析失敗', '防火牆阻擋', 'CORS 問題']\n                });\n            } else if (error instanceof DOMException && error.name === 'AbortError') {\n                // 請求超時\n                devWarn(`API 請求超時: ${this.serviceName}`, {\n                    url,\n                    timeout: env.USE_MOCK_API ? 'N/A' : `${apiConfig.timeouts.api}ms`,\n                    suggestion: '考慮增加超時時間或檢查網路狀況'\n                });\n            } else if (error instanceof SyntaxError) {\n                // JSON 解析錯誤\n                devError(`回應格式錯誤: ${this.serviceName}`, {\n                    url,\n                    error: error.message,\n                    suggestion: '檢查 API 回應是否為有效的 JSON 格式'\n                });\n            } else if (error instanceof Error && error.message.includes('API 請求失敗')) {\n                // HTTP 狀態碼錯誤（已在上面處理過日誌）\n                // 這裡不需要額外的開發日誌\n            } else {\n                // 其他未知錯誤\n                devError(`未知錯誤: ${this.serviceName}`, {\n                    url,\n                    error,\n                    stack: error instanceof Error ? error.stack : null\n                });\n            }\n\n            this.logError(error);\n            throw error;\n        }\n    }\n\n    /**\n     * 根據環境變數建構 API 網址\n     */\n    private buildApiUrl(endpoint: { mock: string; external: string }): string {\n        const path = env.USE_MOCK_API ? endpoint.mock : endpoint.external;\n        const fullUrl = `${apiConfig.baseUrl}${path}`;\n\n        // 開發環境顯示 URL 建構過程\n        devDebug(`建構 API URL: ${this.serviceName}`, {\n            baseUrl: apiConfig.baseUrl,\n            path,\n            fullUrl,\n            useMock: env.USE_MOCK_API\n        });\n\n        return fullUrl;\n    }\n\n    /**\n     * 記錄 API 呼叫日誌\n     */\n    protected logApiCall(url: string): void {\n        // 業務日誌：使用統一的 apiLog 函數\n        apiLog(`${this.serviceName} API 呼叫: ${url} (mock: ${env.USE_MOCK_API})`);\n\n        // 開發日誌：僅開發環境，提供更詳細的資訊\n        devLog(`啟動 ${this.serviceName} API 請求: ${url}`);\n    }\n\n    /**\n     * 記錄成功日誌\n     */\n    protected logSuccess(data?: unknown): void {\n        // 業務日誌：使用統一的 apiSuccess 函數\n        apiSuccess(`${this.serviceName} 資料載入成功`);\n\n        // 開發日誌：僅開發環境，提供更多細節\n        devSuccess(`${this.serviceName} 成功取得資料`, {\n            dataType: typeof data,\n            hasData: !!data,\n            dataKeys: data && typeof data === 'object' ? Object.keys(data) : null\n        });\n    }\n\n    /**\n     * 記錄錯誤日誌\n     */\n    protected logError(error: unknown): void {\n        // 業務日誌：使用統一的 apiError 函數（總是記錄）\n        apiError(`${this.serviceName} API 呼叫失敗`, error);\n\n        // 開發日誌：提供更詳細的錯誤資訊（僅開發環境）\n        devError(`${this.serviceName} 詳細錯誤資訊`, {\n            error,\n            stack: error instanceof Error ? error.stack : null,\n            timestamp: new Date().toISOString()\n        });\n    }\n\n    /**\n     * 根據 HTTP 狀態碼提供可能的原因\n     */\n    private getPossibleCauses(status: number): string[] {\n        switch (status) {\n            case 400:\n                return ['請求參數錯誤', '請求格式不正確', '缺少必要參數'];\n            case 401:\n                return ['未授權', 'API 金鑰無效', '登入狀態過期', 'Token 失效'];\n            case 403:\n                return ['權限不足', '資源被禁止存取', '帳號被停用'];\n            case 404:\n                return ['API 端點不存在', '資源未找到', 'URL 路徑錯誤'];\n            case 405:\n                return ['HTTP 方法不被允許', '檢查請求方法 (GET/POST/PUT/DELETE)'];\n            case 409:\n                return ['資源衝突', '重複的資料', '併發更新衝突'];\n            case 422:\n                return ['請求格式正確但語義錯誤', '驗證失敗', '業務邏輯錯誤'];\n            case 429:\n                return ['請求頻率過高', '超過 API 限制', '需要等待後重試'];\n            case 500:\n                return ['伺服器內部錯誤', '後端程式異常', '資料庫連線問題'];\n            case 502:\n                return ['閘道錯誤', '上游伺服器無回應', '負載平衡器問題'];\n            case 503:\n                return ['服務暫時無法使用', '伺服器維護中', '系統過載'];\n            case 504:\n                return ['閘道超時', '上游伺服器回應太慢', '網路延遲過高'];\n            default:\n                return ['請檢查 API 文件', '聯絡後端開發人員', '檢查網路連線'];\n        }\n    }\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 915, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/services/language.service.ts"],"sourcesContent":["import type { Language } from '@/types';\nimport { apiConfig } from '@/config/api.config';\nimport { BaseApiService } from './base/api-service.base';\nimport { env } from '@/env.mjs';\n\n/**\n * 支援語系服務 - 抽象化 API 呼叫\n * - 不重複 env：基底類別負責超時與 baseUrl 邏輯\n * - 本類別只決定端點 path 與成功日誌格式\n */\nclass LanguageService extends BaseApiService {\n    constructor() {\n        super('支援語系');\n    }\n\n    /**\n     * 取得支援的語系清單\n     */\n    async getLanguages(): Promise<Language[]> {\n        // 端點 path 已由 apiConfig 依 USE_MOCK_API 切換\n        const endpoint = {\n            mock: apiConfig.endpoints.language,\n            external: apiConfig.endpoints.language,\n        };\n\n        const data = await this.apiRequest<Language[]>(endpoint);\n\n        // 成功日誌（不覆寫 base 的 logSuccess，以避免簽名不一致）\n        if (env.API_LOGGING_ENABLED) {\n            console.log(`✅ ${this.serviceName}資料載入成功:`, data.length, '個語系');\n        }\n\n        return data;\n    }\n}\n\n// 匯出單例實例\nexport const languageService = new LanguageService();"],"names":[],"mappings":";;;AACA;AACA;AACA;;;;AAEA;;;;CAIC,GACD,MAAM,wBAAwB,iJAAA,CAAA,iBAAc;IACxC,aAAc;QACV,KAAK,CAAC;IACV;IAEA;;KAEC,GACD,MAAM,eAAoC;QACtC,yCAAyC;QACzC,MAAM,WAAW;YACb,MAAM,8HAAA,CAAA,YAAS,CAAC,SAAS,CAAC,QAAQ;YAClC,UAAU,8HAAA,CAAA,YAAS,CAAC,SAAS,CAAC,QAAQ;QAC1C;QAEA,MAAM,OAAO,MAAM,IAAI,CAAC,UAAU,CAAa;QAE/C,uCAAuC;QACvC,IAAI,2GAAA,CAAA,MAAG,CAAC,mBAAmB,EAAE;YACzB,QAAQ,GAAG,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE,KAAK,MAAM,EAAE;QAC7D;QAEA,OAAO;IACX;AACJ;AAGO,MAAM,kBAAkB,IAAI","debugId":null}},
    {"offset": {"line": 953, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/services/locales.service.ts"],"sourcesContent":["import { BaseApiService } from './base/api-service.base';\nimport { apiConfig } from '@/config/api.config';\nimport { devInspect, apiSuccess, apiError, devSuccess } from '@/lib/dev-logger';\n\n// 國家語系對照表\nexport interface CountryLocaleMapping {\n    [countryCode: string]: string;\n}\n\n/**\n * 國家語系對應服務\n */\nclass LocalesService extends BaseApiService {\n    constructor() {\n        super('國家語系對應');\n    }\n\n    /**\n     * 取得國家語系對照表\n     */\n    async getLocales(): Promise<CountryLocaleMapping> {\n        const endpoint = {\n            mock: apiConfig.endpoints.locales,\n            external: apiConfig.endpoints.locales,\n        };\n\n        return await this.apiRequest<CountryLocaleMapping>(endpoint);\n    }\n\n    /**\n     * 覆寫成功日誌，提供業務特定的資訊\n     */\n    protected logSuccess(data?: unknown): void {\n        // 業務日誌：使用統一的 apiSuccess 函數\n        if (data && typeof data === 'object' && !Array.isArray(data)) {\n            const keys = Object.keys(data);\n            apiSuccess(`${this.serviceName} 資料載入成功: ${keys.length} 個國家對照`);\n        } else {\n            apiSuccess(`${this.serviceName} 資料載入成功`);\n        }\n\n        // 開發日誌：使用統一的 devSuccess 函數\n        if (data && typeof data === 'object') {\n            devSuccess(`${this.serviceName} 成功載入國家語系對照表`);\n\n            // 開發環境的詳細檢查\n            devInspect('國家語系對照表詳細資訊', {\n                總數量: Object.keys(data).length,\n                前5個國家: Object.keys(data).slice(0, 5),\n                範例對照: Object.entries(data).slice(0, 3),\n                完整資料: data\n            });\n        }\n    }\n\n    /**\n     * 根據國家代碼取得對應語系\n     */\n    async getLocaleByCountry(countryCode: string): Promise<string | null> {\n        try {\n            const locales = await this.getLocales();\n            const result = locales[countryCode] || null;\n\n            // 開發環境記錄查詢結果\n            devInspect(`國家代碼查詢: ${countryCode}`, {\n                輸入: countryCode,\n                結果: result,\n                是否找到: !!result,\n                可用國家: Object.keys(locales).slice(0, 10) // 顯示前10個可用國家\n            });\n\n            return result;\n        } catch (error) {\n            // 使用統一的錯誤日誌函數\n            apiError(`無法取得國家 ${countryCode} 對應的語系`, {\n                countryCode,\n                error: error instanceof Error ? error.message : error\n            });\n            return null;\n        }\n    }\n}\n\nexport const localesService = new LocalesService();"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAOA;;CAEC,GACD,MAAM,uBAAuB,iJAAA,CAAA,iBAAc;IACvC,aAAc;QACV,KAAK,CAAC;IACV;IAEA;;KAEC,GACD,MAAM,aAA4C;QAC9C,MAAM,WAAW;YACb,MAAM,8HAAA,CAAA,YAAS,CAAC,SAAS,CAAC,OAAO;YACjC,UAAU,8HAAA,CAAA,YAAS,CAAC,SAAS,CAAC,OAAO;QACzC;QAEA,OAAO,MAAM,IAAI,CAAC,UAAU,CAAuB;IACvD;IAEA;;KAEC,GACD,AAAU,WAAW,IAAc,EAAQ;QACvC,2BAA2B;QAC3B,IAAI,QAAQ,OAAO,SAAS,YAAY,CAAC,MAAM,OAAO,CAAC,OAAO;YAC1D,MAAM,OAAO,OAAO,IAAI,CAAC;YACzB,CAAA,GAAA,2HAAA,CAAA,aAAU,AAAD,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,KAAK,MAAM,CAAC,MAAM,CAAC;QACjE,OAAO;YACH,CAAA,GAAA,2HAAA,CAAA,aAAU,AAAD,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC;QAC3C;QAEA,2BAA2B;QAC3B,IAAI,QAAQ,OAAO,SAAS,UAAU;YAClC,CAAA,GAAA,2HAAA,CAAA,aAAU,AAAD,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC;YAE5C,YAAY;YACZ,CAAA,GAAA,2HAAA,CAAA,aAAU,AAAD,EAAE,eAAe;gBACtB,KAAK,OAAO,IAAI,CAAC,MAAM,MAAM;gBAC7B,OAAO,OAAO,IAAI,CAAC,MAAM,KAAK,CAAC,GAAG;gBAClC,MAAM,OAAO,OAAO,CAAC,MAAM,KAAK,CAAC,GAAG;gBACpC,MAAM;YACV;QACJ;IACJ;IAEA;;KAEC,GACD,MAAM,mBAAmB,WAAmB,EAA0B;QAClE,IAAI;YACA,MAAM,UAAU,MAAM,IAAI,CAAC,UAAU;YACrC,MAAM,SAAS,OAAO,CAAC,YAAY,IAAI;YAEvC,aAAa;YACb,CAAA,GAAA,2HAAA,CAAA,aAAU,AAAD,EAAE,CAAC,QAAQ,EAAE,aAAa,EAAE;gBACjC,IAAI;gBACJ,IAAI;gBACJ,MAAM,CAAC,CAAC;gBACR,MAAM,OAAO,IAAI,CAAC,SAAS,KAAK,CAAC,GAAG,IAAI,aAAa;YACzD;YAEA,OAAO;QACX,EAAE,OAAO,OAAO;YACZ,cAAc;YACd,CAAA,GAAA,2HAAA,CAAA,WAAQ,AAAD,EAAE,CAAC,OAAO,EAAE,YAAY,MAAM,CAAC,EAAE;gBACpC;gBACA,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;YACpD;YACA,OAAO;QACX;IACJ;AACJ;AAEO,MAAM,iBAAiB,IAAI","debugId":null}},
    {"offset": {"line": 1028, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/i18n/i18n-integration.ts"],"sourcesContent":["import { languageService } from '@/services/language.service';\nimport { localesService } from '@/services/locales.service';\nimport { Language } from '@/types';\nimport { Locale} from '@/types';\nimport { getServerCacheTtl } from '@/config/cache.server.config';\nimport { SERVER_APP_CONFIG } from '@/config/app.server.config';\nimport {devLog, devWarn, DevTimer} from '@/lib/dev-logger';\n\nimport { env } from '@/env.mjs';\n\n/**\n * 國際化整合服務\n *\n * 功能說明：\n * - 統一管理動態語系資料與靜態路由配置的橋接\n * - 提供快取機制，減少 API 請求頻率\n * - 實現容錯降級，確保系統在 API 不可用時仍能正常運作\n * - 支援語系列表和國家地區對應關係的動態獲取\n *\n * 使用場景：\n * - 應用啟動時初始化語系配置\n * - 語系切換器組件獲取可用語系\n * - 中間件處理語系路由驗證\n * - SSR/SSG 伺服器端語系資料獲取\n * - 地理位置偵測後的語系重導\n */\nexport class I18nIntegration {\n    // ==========================================\n    // 資料快取\n    // ==========================================\n\n    /** 語系列表 - 快取 */\n    private static cachedLanguages: Language[] | null = null;\n    /** 語系列表 - 最後更新時間 */\n    private static lastFetchTime: number = 0;\n\n    /** 國家語系對應表 - 快取 */\n    private static cachedCountryLocaleMap: Locale | null = null;\n    /** 國家語系對應表- 最後更新時間 */\n    private static lastLocalesFetchTime: number = 0;\n\n    // ==========================================\n    // 取得資料快取\n    // ==========================================\n\n    /**\n     * 語系清單 - 取得動態並快取\n     *\n     * 功能：\n     * - 從 API 獲取最新語系列表\n     * - 實現記憶體快取，避免重複請求\n     * - API 失敗時自動降級使用靜態配置\n     *\n     * @returns Promise<Language[]> 語系列表\n     */\n    static async getLanguages(): Promise<Language[]> {\n        // 取得現在時間以作為快取效期\n        const now = Date.now();\n        // JavaScript 的 Date.now() 回傳的是毫秒，而配置檔中的 TTL 通常設定為秒，所以需要轉換單位才能正確比較。\n        const cacheExpiry = getServerCacheTtl('languages') * 1000;// 快取時間 (秒) - 1小時 * 轉為毫秒\n\n        // 檢查快取是否有效\n        // 計算距離上次獲取資料經過了多少時間，比較是否小於快取有效期，如果有效，直接返回快取資料\n        if (this.cachedLanguages && (now - this.lastFetchTime) < cacheExpiry) {\n            return this.cachedLanguages;\n        }\n\n        // 如果快取無效，從 API 取得語系列表，並存到快取中\n        try {\n            // 從 API 獲取最新語系資料\n            const languages = await languageService.getLanguages();\n\n            // 儲存到快取中\n            this.cachedLanguages = languages;\n            this.lastFetchTime = now;\n\n            return languages;\n        } catch (error) {\n            devWarn('無法載入動態語系，使用靜態配置', error);\n            // 降級處理：返回靜態配置的語系\n            return this.getStaticFallbackLanguages();\n        }\n    }\n\n    /**\n     * 國家語系對應表 - 取得動態並快取\n     *\n     * 功能：\n     * - 從 API 獲取國家代碼與語系的對應關係\n     * - 用於地理位置偵測後的語系重導\n     * - 支援記憶體快取機制\n     *\n     * 使用場景：\n     * - 中間件根據 IP 地理位置重導語系\n     * - 語系切換器顯示地區相關選項\n     *\n     * @returns Promise<Locale> 國家語系對應表\n     */\n    static async getLocales(): Promise<Locale> {\n        // 取得現在時間以作為快取效期\n        const now = Date.now();\n        // JavaScript 的 Date.now() 回傳的是毫秒，而配置檔中的 TTL 通常設定為秒，所以需要轉換單位才能正確比較。\n        const cacheExpiry = getServerCacheTtl('locales') * 1000; // 快取時間 (秒) - 1小時 * 轉為毫秒\n\n        // 檢查快取是否有效\n        // 計算距離上次獲取資料經過了多少時間，比較是否小於快取有效期，如果有效，直接返回快取資料\n        if (this.cachedCountryLocaleMap && now - this.lastLocalesFetchTime < cacheExpiry) {\n            return this.cachedCountryLocaleMap;\n        }\n\n        // 如果快取無效，從 API 取得語系列表，並存到快取中\n        try {\n            // 從 API 獲取最新對應表\n            const map = await localesService.getLocales();\n            // 儲存到快取中\n            this.cachedCountryLocaleMap = map;\n            this.lastLocalesFetchTime = now;\n            return map;\n        } catch (error) {\n            devWarn('無法載入地區對應表，使用空對應表', error);\n            // 降級處理：返回空的對應表\n            return {} as Locale;\n        }\n    }\n\n    /**\n     * 將 Language[] 轉換為 next-intl 需要的 locales 陣列\n     *\n     * 用途：橋接動態語系資料與 Next.js 路由系統\n     *\n     * @returns Promise<string[]> 支援的語系代碼陣列\n     */\n    static async getSupportedLocales(): Promise<string[]> {\n        const languages = await this.getLanguages();\n        return languages.map(lang => lang.id);\n    }\n\n    /**\n     * 取得預設語系\n     *\n     * 邏輯：\n     * 1. 優先使用動態資料中標記為 default 的語系\n     * 2. 找不到時使用配置檔的預設值\n     *\n     * @returns Promise<string> 預設語系代碼\n     */\n    static async getDefaultLocale(): Promise<string> {\n        const languages = await I18nIntegration.getLanguages();\n        const defaultLang = languages.find(lang => lang.default);\n        return defaultLang?.id || env.DEFAULT_LANGUAGE;\n    }\n\n    // ==========================================\n    // 私有輔助方法\n    // ==========================================\n\n    /**\n     * 靜態備援語系資料\n     *\n     * 當 API 不可用時的降級方案：\n     * - 使用 locales.config 的靜態配置\n     * - 自動生成基本的語系資訊\n     * - 確保系統基本功能不受影響\n     *\n     * @returns Language[] 靜態語系列表\n     */\n    private static getStaticFallbackLanguages(): Language[] {\n        const locales = SERVER_APP_CONFIG.i18n.supportedLocales;\n        const defaultLocale = env.DEFAULT_LANGUAGE;\n        return locales.map((locale) => ({\n            id: locale,\n            title: locale.toUpperCase(),\n            native: locale.toUpperCase(),\n            icon: '🌐',\n            default: locale === defaultLocale\n        }));\n    }\n\n}"],"names":[],"mappings":";;;AAAA;AACA;AAGA;AAAA;AACA;AACA;AAEA;;;;;;;AAkBO,MAAM;IACT,6CAA6C;IAC7C,OAAO;IACP,6CAA6C;IAE7C,cAAc,GACd,OAAe,kBAAqC,KAAK;IACzD,kBAAkB,GAClB,OAAe,gBAAwB,EAAE;IAEzC,iBAAiB,GACjB,OAAe,yBAAwC,KAAK;IAC5D,oBAAoB,GACpB,OAAe,uBAA+B,EAAE;IAEhD,6CAA6C;IAC7C,SAAS;IACT,6CAA6C;IAE7C;;;;;;;;;KASC,GACD,aAAa,eAAoC;QAC7C,gBAAgB;QAChB,MAAM,MAAM,KAAK,GAAG;QACpB,mEAAmE;QACnE,MAAM,cAAc,CAAA,GAAA,0JAAA,CAAA,oBAAiB,AAAD,EAAE,eAAe,MAAK,wBAAwB;QAElF,WAAW;QACX,8CAA8C;QAC9C,IAAI,IAAI,CAAC,eAAe,IAAI,AAAC,MAAM,IAAI,CAAC,aAAa,GAAI,aAAa;YAClE,OAAO,IAAI,CAAC,eAAe;QAC/B;QAEA,6BAA6B;QAC7B,IAAI;YACA,iBAAiB;YACjB,MAAM,YAAY,MAAM,sIAAA,CAAA,kBAAe,CAAC,YAAY;YAEpD,SAAS;YACT,IAAI,CAAC,eAAe,GAAG;YACvB,IAAI,CAAC,aAAa,GAAG;YAErB,OAAO;QACX,EAAE,OAAO,OAAO;YACZ,CAAA,GAAA,2HAAA,CAAA,UAAO,AAAD,EAAE,mBAAmB;YAC3B,iBAAiB;YACjB,OAAO,IAAI,CAAC,0BAA0B;QAC1C;IACJ;IAEA;;;;;;;;;;;;;KAaC,GACD,aAAa,aAA8B;QACvC,gBAAgB;QAChB,MAAM,MAAM,KAAK,GAAG;QACpB,mEAAmE;QACnE,MAAM,cAAc,CAAA,GAAA,0JAAA,CAAA,oBAAiB,AAAD,EAAE,aAAa,MAAM,wBAAwB;QAEjF,WAAW;QACX,8CAA8C;QAC9C,IAAI,IAAI,CAAC,sBAAsB,IAAI,MAAM,IAAI,CAAC,oBAAoB,GAAG,aAAa;YAC9E,OAAO,IAAI,CAAC,sBAAsB;QACtC;QAEA,6BAA6B;QAC7B,IAAI;YACA,gBAAgB;YAChB,MAAM,MAAM,MAAM,qIAAA,CAAA,iBAAc,CAAC,UAAU;YAC3C,SAAS;YACT,IAAI,CAAC,sBAAsB,GAAG;YAC9B,IAAI,CAAC,oBAAoB,GAAG;YAC5B,OAAO;QACX,EAAE,OAAO,OAAO;YACZ,CAAA,GAAA,2HAAA,CAAA,UAAO,AAAD,EAAE,oBAAoB;YAC5B,eAAe;YACf,OAAO,CAAC;QACZ;IACJ;IAEA;;;;;;KAMC,GACD,aAAa,sBAAyC;QAClD,MAAM,YAAY,MAAM,IAAI,CAAC,YAAY;QACzC,OAAO,UAAU,GAAG,CAAC,CAAA,OAAQ,KAAK,EAAE;IACxC;IAEA;;;;;;;;KAQC,GACD,aAAa,mBAAoC;QAC7C,MAAM,YAAY,MAAM,gBAAgB,YAAY;QACpD,MAAM,cAAc,UAAU,IAAI,CAAC,CAAA,OAAQ,KAAK,OAAO;QACvD,OAAO,aAAa,MAAM,2GAAA,CAAA,MAAG,CAAC,gBAAgB;IAClD;IAEA,6CAA6C;IAC7C,SAAS;IACT,6CAA6C;IAE7C;;;;;;;;;KASC,GACD,OAAe,6BAAyC;QACpD,MAAM,UAAU,wIAAA,CAAA,oBAAiB,CAAC,IAAI,CAAC,gBAAgB;QACvD,MAAM,gBAAgB,2GAAA,CAAA,MAAG,CAAC,gBAAgB;QAC1C,OAAO,QAAQ,GAAG,CAAC,CAAC,SAAW,CAAC;gBAC5B,IAAI;gBACJ,OAAO,OAAO,WAAW;gBACzB,QAAQ,OAAO,WAAW;gBAC1B,MAAM;gBACN,SAAS,WAAW;YACxB,CAAC;IACL;AAEJ","debugId":null}},
    {"offset": {"line": 1176, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/i18n/request.ts"],"sourcesContent":["import {getRequestConfig} from 'next-intl/server';\nimport {routing} from './routing';\nimport {I18nIntegration} from './i18n-integration';\nimport {cookies} from 'next/headers';\nimport {env} from '@/env.mjs';\nimport {devLog, devWarn} from '@/lib/dev-logger';\n\n/**\n * Next.js 國際化請求配置\n *\n * 功能：\n * - 處理每個請求的語系偵測與驗證\n * - 載入對應的翻譯訊息檔案\n * - 根據多語系開關決定是否整合動態語系\n * - 提供語系降級機制\n */\nexport default getRequestConfig(async ({requestLocale}) => {\n    // 取得請求中的語系參數（來自 URL 路徑、Accept-Language Header 或 Cookie）\n    const requested = await requestLocale;\n\n    // 檢查是否啟用多語系功能\n    if (!env.MULTI_LANGUAGE_ENABLED) {\n        // 單語系模式：直接使用預設語系，不執行動態語系邏輯\n        const locale = routing.defaultLocale;\n\n        devLog(`🌍 單語系模式: 使用預設語系 ${locale}`);\n\n        return {\n            locale,\n            // 載入預設語系的翻譯檔案\n            messages: (await import(`../../messages/${locale}.json`)).default\n        };\n    }\n\n    // 多語系模式：執行完整的動態語系邏輯\n    devLog(`🌍 多語系模式: 開始動態語系處理`);\n\n    // 1) 取得動態有效語系與動態預設語系（內含快取機制）\n    let supportedLocales: string[] = [];\n    let dynamicDefaultLocale = routing.defaultLocale;\n\n    try {\n        // 從 API 取得最新的支援語系清單\n        supportedLocales = await I18nIntegration.getSupportedLocales();\n        // 從 API 取得動態設定的預設語系\n        dynamicDefaultLocale = await I18nIntegration.getDefaultLocale();\n    } catch (e) {\n        // 動態載入失敗時，使用 routing 的靜態預設作為兜底\n        devWarn('⚠️ 載入動態 locales 失敗，使用靜態 routing 作為兜底', e);\n        supportedLocales = [...routing.locales]; // 建立可變副本\n        dynamicDefaultLocale = routing.defaultLocale;\n    }\n\n    // 2) 依優先序決定候選語系：URL 參數 → Cookie 儲存 → 動態預設 → 靜態預設\n    const cookieStore = await cookies();\n    const cookieLocale = cookieStore.get('NEXT_LOCALE')?.value;\n\n    const candidate = requested ||  // 優先使用 URL 中的語系\n        (routing.localeDetection ? cookieLocale : undefined) ||  // 若啟用偵測則使用 Cookie\n        dynamicDefaultLocale ||  // 使用 API 設定的預設語系\n        routing.defaultLocale;   // 最後回退到靜態預設\n\n    // 3) 嚴格驗證候選語系是否在支援清單中，無效則依序回退\n    const isValid = supportedLocales.includes(candidate);\n    const locale = isValid\n        ? candidate  // 候選語系有效，直接使用\n        : supportedLocales.includes(dynamicDefaultLocale)\n            ? dynamicDefaultLocale  // 回退到動態預設語系\n            : routing.defaultLocale;  // 最終回退到靜態預設語系\n\n    // 4) 載入對應語系的翻譯檔案，失敗時回退到預設語系檔案\n    let messages;\n    try {\n        // 嘗試載入目標語系的翻譯檔案\n        messages = (await import(`../../messages/${locale}.json`)).default;\n    } catch (e) {\n        // 翻譯檔案不存在時，回退到預設語系的翻譯檔案\n        devWarn(`⚠️ 找不到 ${locale}.json，回退至 ${routing.defaultLocale}.json`, e);\n        messages = (await import(`../../messages/${routing.defaultLocale}.json`)).default;\n    }\n\n    // 開發環境下輸出語系決策過程，便於除錯\n    devLog(`🌍 語系決策: requested=${requested} cookie=${cookieLocale} final=${locale}`);\n\n    return {\n        locale,    // 最終確定的語系\n        messages   // 對應的翻譯訊息\n    };\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;uCAWe,CAAA,GAAA,0PAAA,CAAA,mBAAgB,AAAD,EAAE,OAAO,EAAC,aAAa,EAAC;IAClD,wDAAwD;IACxD,MAAM,YAAY,MAAM;IAExB,cAAc;IACd,IAAI,CAAC,2GAAA,CAAA,MAAG,CAAC,sBAAsB,EAAE;QAC7B,2BAA2B;QAC3B,MAAM,SAAS,sHAAA,CAAA,UAAO,CAAC,aAAa;QAEpC,CAAA,GAAA,2HAAA,CAAA,SAAM,AAAD,EAAE,CAAC,iBAAiB,EAAE,QAAQ;QAEnC,OAAO;YACH;YACA,cAAc;YACd,UAAU,CAAC;;;;;;;;;;;;;;;;;sBAAa,CAAC,eAAe,EAAE,OAAO,KAAK,CAAC,CAAC,EAAE,OAAO;QACrE;IACJ;IAEA,oBAAoB;IACpB,CAAA,GAAA,2HAAA,CAAA,SAAM,AAAD,EAAE,CAAC,kBAAkB,CAAC;IAE3B,6BAA6B;IAC7B,IAAI,mBAA6B,EAAE;IACnC,IAAI,uBAAuB,sHAAA,CAAA,UAAO,CAAC,aAAa;IAEhD,IAAI;QACA,oBAAoB;QACpB,mBAAmB,MAAM,kIAAA,CAAA,kBAAe,CAAC,mBAAmB;QAC5D,oBAAoB;QACpB,uBAAuB,MAAM,kIAAA,CAAA,kBAAe,CAAC,gBAAgB;IACjE,EAAE,OAAO,GAAG;QACR,+BAA+B;QAC/B,CAAA,GAAA,2HAAA,CAAA,UAAO,AAAD,EAAE,wCAAwC;QAChD,mBAAmB;eAAI,sHAAA,CAAA,UAAO,CAAC,OAAO;SAAC,EAAE,SAAS;QAClD,uBAAuB,sHAAA,CAAA,UAAO,CAAC,aAAa;IAChD;IAEA,iDAAiD;IACjD,MAAM,cAAc,MAAM,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD;IAChC,MAAM,eAAe,YAAY,GAAG,CAAC,gBAAgB;IAErD,MAAM,YAAY,aAAc,gBAAgB;IAC5C,CAAC,sHAAA,CAAA,UAAO,CAAC,eAAe,GAAG,eAAe,SAAS,KAAM,kBAAkB;IAC3E,wBAAyB,iBAAiB;IAC1C,sHAAA,CAAA,UAAO,CAAC,aAAa,EAAI,YAAY;IAEzC,8BAA8B;IAC9B,MAAM,UAAU,iBAAiB,QAAQ,CAAC;IAC1C,MAAM,SAAS,UACT,UAAW,cAAc;OACzB,iBAAiB,QAAQ,CAAC,wBACtB,qBAAsB,YAAY;OAClC,sHAAA,CAAA,UAAO,CAAC,aAAa,EAAG,cAAc;IAEhD,8BAA8B;IAC9B,IAAI;IACJ,IAAI;QACA,gBAAgB;QAChB,WAAW,CAAC;;;;;;;;;;;;;;;;;kBAAa,CAAC,eAAe,EAAE,OAAO,KAAK,CAAC,CAAC,EAAE,OAAO;IACtE,EAAE,OAAO,GAAG;QACR,wBAAwB;QACxB,CAAA,GAAA,2HAAA,CAAA,UAAO,AAAD,EAAE,CAAC,OAAO,EAAE,OAAO,UAAU,EAAE,sHAAA,CAAA,UAAO,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE;QACnE,WAAW,CAAC;;;;;;;;;;;;;;;;;kBAAa,CAAC,eAAe,EAAE,sHAAA,CAAA,UAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,OAAO;IACrF;IAEA,qBAAqB;IACrB,CAAA,GAAA,2HAAA,CAAA,SAAM,AAAD,EAAE,CAAC,mBAAmB,EAAE,UAAU,QAAQ,EAAE,aAAa,OAAO,EAAE,QAAQ;IAE/E,OAAO;QACH;QACA;IACJ;AACJ","debugId":null}},
    {"offset": {"line": 1306, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/geist_e531dabc.module.css [app-rsc] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"className\": \"geist_e531dabc-module__QGiZLq__className\",\n  \"variable\": \"geist_e531dabc-module__QGiZLq__variable\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA","ignoreList":[0]}},
    {"offset": {"line": 1314, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/geist_e531dabc.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22layout.tsx%22,%22import%22:%22Geist%22,%22arguments%22:[{%22variable%22:%22--font-geist-sans%22,%22subsets%22:[%22latin%22]}],%22variableName%22:%22geistSans%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Geist', 'Geist Fallback'\",\n        fontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,WAAW;IACb,WAAW,qJAAA,CAAA,UAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,WAAW;IAEf;AACJ;AAEA,IAAI,qJAAA,CAAA,UAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,qJAAA,CAAA,UAAS,CAAC,QAAQ;AAC1C;uCAEe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1333, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/geist_mono_68a01160.module.css [app-rsc] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"className\": \"geist_mono_68a01160-module__YLcDdW__className\",\n  \"variable\": \"geist_mono_68a01160-module__YLcDdW__variable\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA","ignoreList":[0]}},
    {"offset": {"line": 1341, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/geist_mono_68a01160.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22layout.tsx%22,%22import%22:%22Geist_Mono%22,%22arguments%22:[{%22variable%22:%22--font-geist-mono%22,%22subsets%22:[%22latin%22]}],%22variableName%22:%22geistMono%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Geist Mono', 'Geist Mono Fallback'\",\n        fontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,WAAW;IACb,WAAW,0JAAA,CAAA,UAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,WAAW;IAEf;AACJ;AAEA,IAAI,0JAAA,CAAA,UAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,0JAAA,CAAA,UAAS,CAAC,QAAQ;AAC1C;uCAEe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1361, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/app/%5Blocale%5D/layout.tsx"],"sourcesContent":["import { setRequestLocale } from 'next-intl/server';\nimport { NextIntlClientProvider, hasLocale } from 'next-intl';\nimport { notFound } from 'next/navigation';\nimport { routing } from '@/i18n/routing';\nimport { Geist, Geist_Mono } from 'next/font/google';\nimport { I18nIntegration } from '@/i18n/i18n-integration';\n\nconst geistSans = Geist({ variable: '--font-geist-sans', subsets: ['latin'] });\nconst geistMono = Geist_Mono({ variable: '--font-geist-mono', subsets: ['latin'] });\n\n\n\nexport default async function LocaleLayout({\n                                               children,\n                                               params,\n                                           }: {\n    children: React.ReactNode;\n    params: Promise<{ locale: string }>;\n}) {\n    const { locale } = await params;\n\n    // SSR 初始化語系列表（預熱快取，供後續使用）\n    await I18nIntegration.getLanguages();\n\n    if (!hasLocale(routing.locales, locale)) {\n        notFound();\n    }\n\n    setRequestLocale(locale);\n\n    return (\n        <html lang={locale}>\n        <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>\n        <NextIntlClientProvider>\n            {children}\n        </NextIntlClientProvider>\n        </body>\n        </html>\n    );\n}"],"names":[],"mappings":";;;;AAAA;AACA;AAAA;AACA;AAAA;AACA;;;AAEA;;;;;;;;;AAOe,eAAe,aAAa,EACI,QAAQ,EACR,MAAM,EAIpD;IACG,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM;IAEzB,0BAA0B;IAC1B,MAAM,kIAAA,CAAA,kBAAe,CAAC,YAAY;IAElC,IAAI,CAAC,CAAA,GAAA,iLAAA,CAAA,YAAS,AAAD,EAAE,sHAAA,CAAA,UAAO,CAAC,OAAO,EAAE,SAAS;QACrC,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD;IACX;IAEA,CAAA,GAAA,2QAAA,CAAA,mBAAgB,AAAD,EAAE;IAEjB,qBACI,8OAAC;QAAK,MAAM;kBACZ,cAAA,8OAAC;YAAK,WAAW,GAAG,yIAAA,CAAA,UAAS,CAAC,QAAQ,CAAC,CAAC,EAAE,8IAAA,CAAA,UAAS,CAAC,QAAQ,CAAC,YAAY,CAAC;sBAC1E,cAAA,8OAAC,kQAAA,CAAA,yBAAsB;0BAClB;;;;;;;;;;;;;;;;AAKb","debugId":null}}]
}