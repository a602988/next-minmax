{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/env.mjs"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\n/**\n * 環境變數配置 - 程式碼優先的配置管理\n *\n * 設計原則：\n * 1. env.mjs 包含所有預設值和業務邏輯配置\n * 2. .env 檔案只覆寫需要變更或敏感的設定\n * 3. 開發時依賴預設值，生產時用環境變數覆蓋\n * 4. 共享配置避免重複定義\n *\n * 主要修正：\n * 1. 使用 z.coerce 簡化類型轉換，例如 z.coerce.boolean() 會自動將 \"true\" 轉為 true。\n * 2. 移除動態生成 client config 的函式，直接在 client schema 中定義 NEXT_PUBLIC_ 變數。\n * 3. runtimeEnv 直接設為 process.env，這是 Next.js 環境下的標準做法。\n */\n\nexport const env = createEnv({\n    /**\n     * 伺服器端專用環境變數。\n     * 這些變數「不會」暴露給客戶端，適合放置敏感資訊如 API 金鑰。\n     */\n    server: {\n        // ==========================================\n        // 專案核心配置 - 伺服器端專用\n        // ==========================================\n        PROJECT_CODE: z.string().default(\"minmax2025\"),\n        COUNTRY_SUBDOMAIN_MAP: z.string().default('{}'),\n\n        // ==========================================\n        // API 與外部服務配置 - 伺服器端專用\n        // ==========================================\n        API_BASE_URL: z.string().url().default(\"https://v5.jeffy.test\"),\n        I18N_CACHE_STRATEGY: z.enum([\"memory\", \"redis\", \"none\"]).default(\"memory\"),\n\n        // ==========================================\n        // 🔐 敏感資訊 - 僅伺服器端 (可視需求取消註解)\n        // ==========================================\n        // DATABASE_URL: z.string().url().optional(),\n        // REDIS_URL: z.string().url().optional(),\n        // API_SECRET_KEY: z.string().min(1).optional(),\n        // JWT_SECRET: z.string().min(1).optional(),\n        // ADMIN_API_KEY: z.string().min(1).optional(),\n        // GEO_API_KEY: z.string().min(1).optional(),\n    },\n\n    /**\n     * 客戶端環境變數。\n     * 必須以 `NEXT_PUBLIC_` 開頭，這些變數會被打包進客戶端的 JavaScript bundle 中。\n     * 絕對不要在此處放置任何敏感資訊。\n     */\n    client: {\n        // ==========================================\n        // 🏗️ 專案基本資訊 (來自共享配置)\n        // ==========================================\n        NEXT_PUBLIC_PROJECT_NAME: z.string().default(\"測試網站\"),\n        NEXT_PUBLIC_API_VERSION: z.string().default(\"1.0.0\"),\n\n        // ==========================================\n        // 🌍 國際化與語系配置 (來自共享配置)\n        // ==========================================\n        NEXT_PUBLIC_DEFAULT_LOCALE: z.string().default(\"zh-TW\"),\n        NEXT_PUBLIC_SUPPORTED_LOCALES: z.string().default('zh-TW'),\n        NEXT_PUBLIC_LOCALE_PREFIX_MODE: z.enum(['always', 'as-needed', 'never']).default('as-needed'),\n        NEXT_PUBLIC_LOCALE_DETECTION_ENABLED: z.coerce.boolean().default(true),\n        NEXT_PUBLIC_MULTI_LANGUAGE_ENABLED: z.coerce.boolean().default(true),\n        NEXT_PUBLIC_INTERNATIONALIZATION_ENABLED: z.coerce.boolean().default(true),\n\n        // ==========================================\n        // 🗺️ 地理位置偵測配置 (來自共享配置)\n        // ==========================================\n        NEXT_PUBLIC_GEO_DETECTION_STRATEGY: z.enum([\"cdn-only\", \"api-only\", \"cdn-fallback\"]).default(\"api-only\"),\n        NEXT_PUBLIC_GEO_DETECTION_ENABLED: z.coerce.boolean().default(false),\n        NEXT_PUBLIC_GEO_REDIRECT_MODE: z.enum([\"off\", \"suggest\", \"force\"]).default(\"suggest\"),\n        NEXT_PUBLIC_FORCE_REDIRECT: z.coerce.boolean().default(false),\n        NEXT_PUBLIC_CDN_COUNTRY_HEADER: z.string().default(\"cf-ipcountry\"),\n        NEXT_PUBLIC_GEO_API_PROVIDER: z.enum([\"ipapi\", \"ipinfo\", \"geoplugin\"]).default(\"geoplugin\"),\n        NEXT_PUBLIC_GEO_API_TIMEOUT: z.coerce.number().default(5000),\n\n        // ==========================================\n        // 🔄 快取系統配置 (來自共享配置)\n        // ==========================================\n        NEXT_PUBLIC_CACHE_ENABLED: z.coerce.boolean().default(true),\n        NEXT_PUBLIC_CACHE_CDN_ENABLED: z.coerce.boolean().default(false),\n        NEXT_PUBLIC_CACHE_DEFAULT_TTL: z.coerce.number().default(3600),\n\n        // ==========================================\n        // ⚙️ 功能開關 (來自共享配置)\n        // ==========================================\n        NEXT_PUBLIC_DEV_MODE_ENABLED: z.coerce.boolean().default(false),\n        NEXT_PUBLIC_MEMBERSHIP_ENABLED: z.coerce.boolean().default(false),\n\n        // ==========================================\n        // 🔧 開發與測試配置 (來自共享配置)\n        // ==========================================\n        NEXT_PUBLIC_USE_MOCK_API: z.coerce.boolean().default(true),\n        NEXT_PUBLIC_MOCK_API_DELAY: z.coerce.number().default(100),\n        NEXT_PUBLIC_MOCK_ERROR_ENABLED: z.coerce.boolean().default(false),\n        NEXT_PUBLIC_MOCK_ERROR_RATE: z.coerce.number().min(0).max(1).default(0.0),\n\n        // ==========================================\n        // 📊 監控與日誌配置 (來自共享配置)\n        // ==========================================\n        NEXT_PUBLIC_API_LOGGING_ENABLED: z.coerce.boolean().default(false),\n        NEXT_PUBLIC_PERFORMANCE_MONITORING_ENABLED: z.coerce.boolean().default(false),\n\n        // ==========================================\n        // ⏱️ 超時設定 (來自共享配置)\n        // ==========================================\n        NEXT_PUBLIC_API_TIMEOUT: z.coerce.number().default(30000),\n        NEXT_PUBLIC_CONTENT_API_TIMEOUT: z.coerce.number().default(60000),\n\n        // ==========================================\n        // 🌐 API 與服務配置 - 客戶端專用\n        // ==========================================\n        NEXT_PUBLIC_API_BASE_URL: z.string().url().default(\"http://localhost:3000/api/ssr/\"),\n\n        // ==========================================\n        // 🔧 外部服務配置 - 客戶端專用\n        // ==========================================\n        NEXT_PUBLIC_SENTRY_DSN: z.string().url().optional(),\n    },\n\n    /**\n     * 運行時的環境變數來源。\n     * 對於 Next.js，這應該總是 `process.env`。\n     * createEnv 會自動處理 server-side 和 client-side 的變數分離。\n     */\n    runtimeEnv: process.env,\n\n    /**\n     * 如果你想在建置（build）階段，當缺少客戶端環境變數時就讓建置失敗，\n     * 可以取消下面這行的註解。\n     */\n    // skipValidation: !!process.env.CI,\n});"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 132, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/config/api.config.ts"],"sourcesContent":["import { env } from '@/env.mjs';\n\n/**\n * API 應用配置（只保留業務邏輯）\n * - 不鏡射 env 值；需要時於此集中處理條件/轉換/群組\n * - 命名使用小寫（camelCase）\n */\n\n\n\n\nexport const apiConfig = {\n    // 衍生：根據是否使用 Mock 選擇實際 baseUrl\n    baseUrl: env.NEXT_PUBLIC_USE_MOCK_API ? env.NEXT_PUBLIC_API_BASE_URL : env.API_BASE_URL,\n\n    // 衍生：根據是否使用 Mock 切換端點路徑\n    endpoints: env.NEXT_PUBLIC_USE_MOCK_API\n        ? {\n            language: 'languages',\n            locales: 'locales',\n            systemMenus: 'system-menus',\n            webData: 'web-data',\n            detail: 'detail',\n        }\n        : {\n            language: '/api/v1/languages',\n            locales: '/api/v1/locales',\n            systemMenus: '/api/v1/system-menus',\n            webData: '/api/v1/web-data',\n            detail: '/api/v1/detail',\n        },\n\n    // 群組：超時（毫秒）直接取 env，集中使用\n    timeouts: {\n        api: env.NEXT_PUBLIC_API_TIMEOUT,\n        content: env.NEXT_PUBLIC_CONTENT_API_TIMEOUT,\n        geo: env.NEXT_PUBLIC_GEO_API_TIMEOUT,\n    },\n\n    // 業務常數：重試策略（如需環境化，於此處加衍生邏輯）\n    retry: {\n        attempts: 3,\n        delay: 1000,\n        exponentialBackoff: true,\n    },\n\n    // 業務判斷：是否模擬延遲/錯誤與相關參數\n    shouldSimulateDelay: () => env.NEXT_PUBLIC_USE_MOCK_API && env.NEXT_PUBLIC_MOCK_API_DELAY > 0,\n    getMockDelay: () => env.NEXT_PUBLIC_MOCK_API_DELAY,\n    shouldSimulateError: () => env.NEXT_PUBLIC_MOCK_ERROR_ENABLED && Math.random() < env.NEXT_PUBLIC_MOCK_ERROR_RATE,\n} as const;\n\nexport type ApiConfig = typeof apiConfig;"],"names":[],"mappings":";;;AAAA;;AAWO,MAAM,YAAY;IACrB,8BAA8B;IAC9B,SAAS,8GAAA,CAAA,MAAG,CAAC,wBAAwB,GAAG,8GAAA,CAAA,MAAG,CAAC,wBAAwB,GAAG,8GAAA,CAAA,MAAG,CAAC,YAAY;IAEvF,wBAAwB;IACxB,WAAW,8GAAA,CAAA,MAAG,CAAC,wBAAwB,GACjC;QACE,UAAU;QACV,SAAS;QACT,aAAa;QACb,SAAS;QACT,QAAQ;IACZ,IACE;QACE,UAAU;QACV,SAAS;QACT,aAAa;QACb,SAAS;QACT,QAAQ;IACZ;IAEJ,wBAAwB;IACxB,UAAU;QACN,KAAK,8GAAA,CAAA,MAAG,CAAC,uBAAuB;QAChC,SAAS,8GAAA,CAAA,MAAG,CAAC,+BAA+B;QAC5C,KAAK,8GAAA,CAAA,MAAG,CAAC,2BAA2B;IACxC;IAEA,4BAA4B;IAC5B,OAAO;QACH,UAAU;QACV,OAAO;QACP,oBAAoB;IACxB;IAEA,sBAAsB;IACtB,qBAAqB,IAAM,8GAAA,CAAA,MAAG,CAAC,wBAAwB,IAAI,8GAAA,CAAA,MAAG,CAAC,0BAA0B,GAAG;IAC5F,cAAc,IAAM,8GAAA,CAAA,MAAG,CAAC,0BAA0B;IAClD,qBAAqB,IAAM,8GAAA,CAAA,MAAG,CAAC,8BAA8B,IAAI,KAAK,MAAM,KAAK,8GAAA,CAAA,MAAG,CAAC,2BAA2B;AACpH","debugId":null}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/config/app.client.config.ts"],"sourcesContent":["import { env } from '@/env.mjs';\n\n/**\n * 客戶端應用配置（僅保留必要的業務衍生值）\n * - 直接在使用處讀 env.NEXT_PUBLIC_*，此處不重複包裝\n * - 命名使用小寫（camelCase）\n */\nexport const appConfig = {\n    // 衍生：API 超時（毫秒），若無設定則回退 30000\n    apiTimeout:\n        typeof env.NEXT_PUBLIC_API_TIMEOUT === 'number'\n            ? env.NEXT_PUBLIC_API_TIMEOUT\n            : Number.parseInt(String(env.NEXT_PUBLIC_API_TIMEOUT ?? ''), 10) || 30000,\n\n    // 衍生：i18n 啟用（客戶端視角）的布林正規化\n    i18nEnabled:\n        typeof env.NEXT_PUBLIC_MULTI_LANGUAGE_ENABLED === 'boolean'\n            ? env.NEXT_PUBLIC_MULTI_LANGUAGE_ENABLED\n            : String(env.NEXT_PUBLIC_MULTI_LANGUAGE_ENABLED).toLowerCase() === 'true',\n} as const;\n\nexport type AppClientConfig = typeof appConfig;"],"names":[],"mappings":";;;AAAA;;IAYqC;AAL9B,MAAM,YAAY;IACrB,8BAA8B;IAC9B,YACI,OAAO,8GAAA,CAAA,MAAG,CAAC,uBAAuB,KAAK,WACjC,8GAAA,CAAA,MAAG,CAAC,uBAAuB,GAC3B,OAAO,QAAQ,CAAC,OAAO,CAAA,+BAAA,8GAAA,CAAA,MAAG,CAAC,uBAAuB,cAA3B,0CAAA,+BAA+B,KAAK,OAAO;IAE5E,0BAA0B;IAC1B,aACI,OAAO,8GAAA,CAAA,MAAG,CAAC,kCAAkC,KAAK,YAC5C,8GAAA,CAAA,MAAG,CAAC,kCAAkC,GACtC,OAAO,8GAAA,CAAA,MAAG,CAAC,kCAAkC,EAAE,WAAW,OAAO;AAC/E","debugId":null}},
    {"offset": {"line": 201, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/config/app.server.config.ts"],"sourcesContent":["import { env } from '@/env.mjs';\n\n/**\n * 服務端應用配置層\n * 只包含真正需要業務邏輯處理的配置\n * ⚠️ 此檔案只能在伺服器端使用\n */\nexport const SERVER_APP_CONFIG = {\n    // 國際化配置 - 數據轉換\n    i18n: {\n        supportedLocales: env.SUPPORTED_LOCALES.split(',').map((locale) => locale.trim()),\n        countrySubdomainMap: JSON.parse(env.COUNTRY_SUBDOMAIN_MAP || '{}'),\n    },\n\n    // API 配置 - 條件邏輯\n    api: {\n        baseUrl: env.USE_MOCK_API ? env.API_BASE_URL : env.API_BASE_URL,\n    },\n} as const;\n\n// 導出計算屬性 - 只包含真正的業務邏輯組合\nexport const SERVER_COMPUTED = {\n    /** 是否啟用完整國際化功能（伺服端視角） */\n    isI18nEnabled: () => env.INTERNATIONALIZATION_ENABLED && env.MULTI_LANGUAGE_ENABLED,\n\n    /** 檢查是否支援特定語系 */\n    isLocaleSupported: (locale: string) => SERVER_APP_CONFIG.i18n.supportedLocales.includes(locale),\n\n    /** 是否應該模擬 API 延遲 */\n    shouldSimulateDelay: () => env.USE_MOCK_API && env.MOCK_API_DELAY > 0,\n\n    /** 是否應該模擬錯誤 */\n    shouldSimulateError: () => env.MOCK_ERROR_ENABLED && Math.random() < env.MOCK_ERROR_RATE,\n} as const;\n\nexport type ServerAppConfig = typeof SERVER_APP_CONFIG;"],"names":[],"mappings":";;;;AAAA;;AAOO,MAAM,oBAAoB;IAC7B,eAAe;IACf,MAAM;QACF,kBAAkB,8GAAA,CAAA,MAAG,CAAC,iBAAiB,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,SAAW,OAAO,IAAI;QAC9E,qBAAqB,KAAK,KAAK,CAAC,8GAAA,CAAA,MAAG,CAAC,qBAAqB,IAAI;IACjE;IAEA,gBAAgB;IAChB,KAAK;QACD,SAAS,8GAAA,CAAA,MAAG,CAAC,YAAY,GAAG,8GAAA,CAAA,MAAG,CAAC,YAAY,GAAG,8GAAA,CAAA,MAAG,CAAC,YAAY;IACnE;AACJ;AAGO,MAAM,kBAAkB;IAC3B,uBAAuB,GACvB,eAAe,IAAM,8GAAA,CAAA,MAAG,CAAC,4BAA4B,IAAI,8GAAA,CAAA,MAAG,CAAC,sBAAsB;IAEnF,eAAe,GACf,mBAAmB,CAAC,SAAmB,kBAAkB,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC;IAExF,kBAAkB,GAClB,qBAAqB,IAAM,8GAAA,CAAA,MAAG,CAAC,YAAY,IAAI,8GAAA,CAAA,MAAG,CAAC,cAAc,GAAG;IAEpE,aAAa,GACb,qBAAqB,IAAM,8GAAA,CAAA,MAAG,CAAC,kBAAkB,IAAI,KAAK,MAAM,KAAK,8GAAA,CAAA,MAAG,CAAC,eAAe;AAC5F","debugId":null}},
    {"offset": {"line": 233, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/config/locale.server.config.ts"],"sourcesContent":["import { env } from '@/env.mjs';\n\n/**\n * 服務端語系配置（只保留需要的轉換與工具）\n * - 不鏡射 env 值（如 defaultLocale/localePrefixMode），在使用處直接讀 env\n * - 命名使用小寫（camelCase）\n */\n\nexport const serverLocaleConfig = {\n    // 衍生：支援語系陣列\n    supportedLocales: env.SUPPORTED_LOCALES.split(',').map((l) => l.trim()),\n    // 工具：語系驗證（使用衍生 supportedLocales）\n    isValidLocale: (locale: string): boolean => {\n        return serverLocaleConfig.supportedLocales.includes(locale);\n    },\n    // 工具：取得有效的預設語系\n    getValidDefaultLocale: (): string => {\n        const envDefault = env.DEFAULT_LANGUAGE;\n        return serverLocaleConfig.supportedLocales.includes(envDefault)\n            ? envDefault\n            : serverLocaleConfig.supportedLocales[0];\n    },\n    // 衍生：國家子網域映射\n    countrySubdomainMap: JSON.parse(env.COUNTRY_SUBDOMAIN_MAP || '{}'),\n    // 工具：依國家取子網域（使用衍生 countrySubdomainMap）\n    getSubdomainByCountry: (country: string): string | null => {\n        return serverLocaleConfig.countrySubdomainMap[country] || null;\n    },\n} as const;\n\nexport type ServerLocaleConfig = typeof serverLocaleConfig;"],"names":[],"mappings":";;;AAAA;;AAQO,MAAM,qBAAqB;IAC9B,YAAY;IACZ,kBAAkB,8GAAA,CAAA,MAAG,CAAC,iBAAiB,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,IAAM,EAAE,IAAI;IACpE,iCAAiC;IACjC,eAAe,CAAC;QACZ,OAAO,mBAAmB,gBAAgB,CAAC,QAAQ,CAAC;IACxD;IACA,eAAe;IACf,uBAAuB;QACnB,MAAM,aAAa,8GAAA,CAAA,MAAG,CAAC,gBAAgB;QACvC,OAAO,mBAAmB,gBAAgB,CAAC,QAAQ,CAAC,cAC9C,aACA,mBAAmB,gBAAgB,CAAC,EAAE;IAChD;IACA,aAAa;IACb,qBAAqB,KAAK,KAAK,CAAC,8GAAA,CAAA,MAAG,CAAC,qBAAqB,IAAI;IAC7D,uCAAuC;IACvC,uBAAuB,CAAC;QACpB,OAAO,mBAAmB,mBAAmB,CAAC,QAAQ,IAAI;IAC9D;AACJ","debugId":null}},
    {"offset": {"line": 266, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/config/locale.client.config.ts"],"sourcesContent":["import { env } from '@/env.mjs';\n\n/**\n * 客戶端語系配置（僅保留業務邏輯）\n * 原則：\n * - 不重複 env.mjs，原始值在使用處直接讀 env.NEXT_PUBLIC_*\n * - 只做必要的衍生/工具，命名用小寫（camelCase）\n */\nexport const clientLocaleConfig = {\n    // 衍生：支援語系陣列\n    supportedLocales: env.NEXT_PUBLIC_SUPPORTED_LOCALES.split(',').map((l) => l.trim()),\n\n    // 工具：驗證語系是否被支援（使用衍生 supportedLocales）\n    isValidLocale: (locale: string): boolean => {\n        return clientLocaleConfig.supportedLocales.includes(locale);\n    },\n} as const;\n\nexport type ClientLocaleConfig = typeof clientLocaleConfig;\n"],"names":[],"mappings":";;;AAAA;;AAQO,MAAM,qBAAqB;IAC9B,YAAY;IACZ,kBAAkB,8GAAA,CAAA,MAAG,CAAC,6BAA6B,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,IAAM,EAAE,IAAI;IAEhF,sCAAsC;IACtC,eAAe,CAAC;QACZ,OAAO,mBAAmB,gBAAgB,CAAC,QAAQ,CAAC;IACxD;AACJ","debugId":null}},
    {"offset": {"line": 288, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/config/cache.client.config.ts"],"sourcesContent":["/**\n * 快取系統客戶端配置檔案（僅業務邏輯）\n */\n\n// redis 相關鍵格式（客戶端僅作 key 規則使用，不連線）\nconst redisConfig = {\n    prefix: 'minmax:',\n    keySeparator: ':',\n} as const;\n\n/**\n * 快取資料類型定義 - 統一管理所有快取相關設定\n * - 僅保留客戶端需要的預設 ttl/tags/描述\n */\nconst cacheDataTypes = {\n    languages: {\n        ttl: 7200, // 2 小時\n        tags: ['languages', 'static-data'] as string[],\n        description: '語言資料快取',\n    },\n    locales: {\n        ttl: 7200, // 2 小時\n        tags: ['locales', 'static-data'] as string[],\n        description: '地區設定快取',\n    },\n    menus: {\n        ttl: 3600, // 1 小時\n        tags: ['menus', 'navigation'] as string[],\n        description: '選單資料快取',\n    },\n    webData: {\n        ttl: 3600, // 1 小時\n        tags: ['web-data', 'static-data'] as string[],\n        description: '網站資料快取',\n    },\n    pages: {\n        ttl: 1800, // 30 分鐘\n        tags: ['pages', 'content'] as string[],\n        description: '頁面內容快取',\n    },\n    geoData: {\n        ttl: 1800, // 30 分鐘\n        tags: ['geo-data', 'location'] as string[],\n        description: '地理位置資料快取',\n    },\n    userData: {\n        ttl: 600, // 10 分鐘\n        tags: ['user-data', 'dynamic-data'] as string[],\n        description: '使用者資料快取',\n    },\n    apiResponse: {\n        ttl: 3600, // 預設 1 小時，服務端可覆蓋\n        tags: ['api-response'] as string[],\n        description: 'API 回應快取',\n    },\n} as const;\n\nexport type CacheDataType = keyof typeof cacheDataTypes;\n\n/**\n * 客戶端快取配置（僅業務邏輯）\n */\nexport const cacheConfig = {\n    // 基礎配置（客戶端預設值）\n    enabled: true,\n    cdnEnabled: false,\n    defaultTtl: 3600,\n    strategy: 'memory' as const,\n\n    // key 規則（僅作為 key 生成規範）\n    redis: redisConfig,\n\n    // 從 cacheDataTypes 自動生成 ttl 與 tags 映射\n    ttl: {\n        languages: cacheDataTypes.languages.ttl,\n        locales: cacheDataTypes.locales.ttl,\n        menus: cacheDataTypes.menus.ttl,\n        webData: cacheDataTypes.webData.ttl,\n        pages: cacheDataTypes.pages.ttl,\n        geoData: cacheDataTypes.geoData.ttl,\n        userData: cacheDataTypes.userData.ttl,\n        apiResponse: cacheDataTypes.apiResponse.ttl,\n    },\n\n    tags: {\n        languages: cacheDataTypes.languages.tags,\n        locales: cacheDataTypes.locales.tags,\n        menus: cacheDataTypes.menus.tags,\n        webData: cacheDataTypes.webData.tags,\n        pages: cacheDataTypes.pages.tags,\n        geoData: cacheDataTypes.geoData.tags,\n        userData: cacheDataTypes.userData.tags,\n        apiResponse: cacheDataTypes.apiResponse.tags,\n    },\n\n    // 快取鍵值生成（不依賴自身物件，避免初始化順序問題）\n    generateKey: (type: CacheDataType, identifier: string, locale?: string): string => {\n        const parts = [redisConfig.prefix, type, identifier];\n        if (locale) parts.push(locale);\n        return parts.join(redisConfig.keySeparator);\n    },\n} as const;\n\n/**\n * 取得指定資料類型的完整配置\n */\nexport function getCacheConfig(type: CacheDataType) {\n    return cacheDataTypes[type];\n}\n\n/**\n * 取得指定資料類型的 TTL（毫秒）\n */\nexport function getCacheTtl(type: CacheDataType): number {\n    return cacheDataTypes[type].ttl * 1000;\n}\n\n/**\n * 取得指定資料類型的標籤\n */\nexport function getCacheTags(type: CacheDataType): string[] {\n    return cacheDataTypes[type].tags;\n}\n\n/**\n * 根據標籤找到相關的資料類型\n */\nexport function getDataTypesByTag(tag: string): CacheDataType[] {\n    return Object.entries(cacheDataTypes)\n        .filter(([_, config]) => config.tags.includes(tag))\n        .map(([key]) => key as CacheDataType);\n}\n\n/**\n * 取得所有可用的標籤\n */\nexport function getAllCacheTags(): string[] {\n    const allTags = Object.values(cacheDataTypes).flatMap((config) => config.tags);\n    return [...new Set(allTags)];\n}\n\n/**\n * 取得快取配置摘要（用於除錯）\n */\nexport function getCacheConfigSummary() {\n    return Object.entries(cacheDataTypes).map(([type, config]) => ({\n        type,\n        ttl: `${config.ttl}s (${config.ttl / 60}min)`,\n        tags: config.tags.join(', '),\n        description: config.description,\n    }));\n}"],"names":[],"mappings":"AAAA;;CAEC,GAED,kCAAkC;;;;;;;;;;AAClC,MAAM,cAAc;IAChB,QAAQ;IACR,cAAc;AAClB;AAEA;;;CAGC,GACD,MAAM,iBAAiB;IACnB,WAAW;QACP,KAAK;QACL,MAAM;YAAC;YAAa;SAAc;QAClC,aAAa;IACjB;IACA,SAAS;QACL,KAAK;QACL,MAAM;YAAC;YAAW;SAAc;QAChC,aAAa;IACjB;IACA,OAAO;QACH,KAAK;QACL,MAAM;YAAC;YAAS;SAAa;QAC7B,aAAa;IACjB;IACA,SAAS;QACL,KAAK;QACL,MAAM;YAAC;YAAY;SAAc;QACjC,aAAa;IACjB;IACA,OAAO;QACH,KAAK;QACL,MAAM;YAAC;YAAS;SAAU;QAC1B,aAAa;IACjB;IACA,SAAS;QACL,KAAK;QACL,MAAM;YAAC;YAAY;SAAW;QAC9B,aAAa;IACjB;IACA,UAAU;QACN,KAAK;QACL,MAAM;YAAC;YAAa;SAAe;QACnC,aAAa;IACjB;IACA,aAAa;QACT,KAAK;QACL,MAAM;YAAC;SAAe;QACtB,aAAa;IACjB;AACJ;AAOO,MAAM,cAAc;IACvB,eAAe;IACf,SAAS;IACT,YAAY;IACZ,YAAY;IACZ,UAAU;IAEV,uBAAuB;IACvB,OAAO;IAEP,sCAAsC;IACtC,KAAK;QACD,WAAW,eAAe,SAAS,CAAC,GAAG;QACvC,SAAS,eAAe,OAAO,CAAC,GAAG;QACnC,OAAO,eAAe,KAAK,CAAC,GAAG;QAC/B,SAAS,eAAe,OAAO,CAAC,GAAG;QACnC,OAAO,eAAe,KAAK,CAAC,GAAG;QAC/B,SAAS,eAAe,OAAO,CAAC,GAAG;QACnC,UAAU,eAAe,QAAQ,CAAC,GAAG;QACrC,aAAa,eAAe,WAAW,CAAC,GAAG;IAC/C;IAEA,MAAM;QACF,WAAW,eAAe,SAAS,CAAC,IAAI;QACxC,SAAS,eAAe,OAAO,CAAC,IAAI;QACpC,OAAO,eAAe,KAAK,CAAC,IAAI;QAChC,SAAS,eAAe,OAAO,CAAC,IAAI;QACpC,OAAO,eAAe,KAAK,CAAC,IAAI;QAChC,SAAS,eAAe,OAAO,CAAC,IAAI;QACpC,UAAU,eAAe,QAAQ,CAAC,IAAI;QACtC,aAAa,eAAe,WAAW,CAAC,IAAI;IAChD;IAEA,4BAA4B;IAC5B,aAAa,CAAC,MAAqB,YAAoB;QACnD,MAAM,QAAQ;YAAC,YAAY,MAAM;YAAE;YAAM;SAAW;QACpD,IAAI,QAAQ,MAAM,IAAI,CAAC;QACvB,OAAO,MAAM,IAAI,CAAC,YAAY,YAAY;IAC9C;AACJ;AAKO,SAAS,eAAe,IAAmB;IAC9C,OAAO,cAAc,CAAC,KAAK;AAC/B;AAKO,SAAS,YAAY,IAAmB;IAC3C,OAAO,cAAc,CAAC,KAAK,CAAC,GAAG,GAAG;AACtC;AAKO,SAAS,aAAa,IAAmB;IAC5C,OAAO,cAAc,CAAC,KAAK,CAAC,IAAI;AACpC;AAKO,SAAS,kBAAkB,GAAW;IACzC,OAAO,OAAO,OAAO,CAAC,gBACjB,MAAM,CAAC;YAAC,CAAC,GAAG,OAAO;eAAK,OAAO,IAAI,CAAC,QAAQ,CAAC;OAC7C,GAAG,CAAC;YAAC,CAAC,IAAI;eAAK;;AACxB;AAKO,SAAS;IACZ,MAAM,UAAU,OAAO,MAAM,CAAC,gBAAgB,OAAO,CAAC,CAAC,SAAW,OAAO,IAAI;IAC7E,OAAO;WAAI,IAAI,IAAI;KAAS;AAChC;AAKO,SAAS;IACZ,OAAO,OAAO,OAAO,CAAC,gBAAgB,GAAG,CAAC;YAAC,CAAC,MAAM,OAAO;eAAM;YAC3D;YACA,KAAK,AAAC,GAAkB,OAAhB,OAAO,GAAG,EAAC,OAAqB,OAAhB,OAAO,GAAG,GAAG,IAAG;YACxC,MAAM,OAAO,IAAI,CAAC,IAAI,CAAC;YACvB,aAAa,OAAO,WAAW;QACnC;;AACJ","debugId":null}},
    {"offset": {"line": 456, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/config/cache.server.config.ts"],"sourcesContent":["/**\n * 快取系統服務端配置（僅業務邏輯）\n * - 不重複 env：用 getter 直接回傳 env 值\n * - 保留 server 覆寫 ttl 與鍵規則（generateKey）\n * - 命名使用小寫（camelCase）\n */\nimport { env } from '@/env.mjs';\nimport {\n    cacheConfig,                 // client 的 key 規則與基本 ttl/tags\n    getCacheConfig,\n    getCacheTtl as getCacheTtlClientMs,\n    getCacheTags as getCacheTagsClient,\n    getDataTypesByTag,\n    getAllCacheTags,\n    getCacheConfigSummary,\n    type CacheDataType,\n} from './cache.client.config';\n\n// 服務端覆寫：僅作必要差異（例：apiResponse）\nconst serverTtl = {\n    ...cacheConfig.ttl,\n    apiResponse: env.CACHE_DEFAULT_TTL, // 秒\n} as const;\n\nconst serverTags = {\n    ...cacheConfig.tags,\n} as const;\n\nexport const serverCacheConfig = {\n    // key 規則（沿用 client）\n    redis: cacheConfig.redis,\n\n    // ttl/tags 聚合（server 覆寫）\n    ttl: serverTtl,   // 秒\n    tags: serverTags,\n\n    // 快取鍵值生成（純規則）\n    generateKey: (type: CacheDataType, identifier: string, locale?: string): string => {\n        const parts = [cacheConfig.redis.prefix, type, identifier];\n        if (locale) parts.push(locale);\n        return parts.join(cacheConfig.redis.keySeparator);\n    },\n} as const;\n\n// 直接讀 env（避免鏡射）\nexport const isCacheEnabled = (): boolean => env.CACHE_ENABLED;\nexport const isCdnEnabled = (): boolean => env.CACHE_CDN_ENABLED;\nexport const getDefaultTtl = (): number => env.CACHE_DEFAULT_TTL; // 秒\nexport const getCacheStrategy = (): 'memory' | 'redis' | 'none' => env.I18N_CACHE_STRATEGY;\n\n// 共用導出\nexport {\n    getCacheConfig,\n    getCacheTtlClientMs,\n    getCacheTagsClient,\n    getDataTypesByTag,\n    getAllCacheTags,\n    getCacheConfigSummary,\n    type CacheDataType,\n};\n\n// 服務端便捷函式\nexport function getServerCacheConfig(type: CacheDataType) {\n    const base = getCacheConfig(type);\n    return {\n        type,\n        ttl: serverTtl[type],            // 秒\n        tags: serverTags[type],\n        description: base.description,\n    };\n}\nexport function getServerCacheTtl(type: CacheDataType): number {\n    return serverTtl[type];            // 秒\n}\nexport function getServerCacheTtlMs(type: CacheDataType): number {\n    return serverTtl[type] * 1000;     // 毫秒\n}\nexport function getServerCacheTags(type: CacheDataType): string[] {\n    return serverTags[type];\n}\nexport function getServerCacheConfigSummary() {\n    return (Object.keys(serverTtl) as CacheDataType[]).map((type) => ({\n        type,\n        ttl: `${serverTtl[type]}s (${serverTtl[type] / 60}min)`,\n        tags: serverTags[type].join(', '),\n        description: getCacheConfig(type).description,\n    }));\n}\n\nexport type ServerCacheConfig = typeof serverCacheConfig;"],"names":[],"mappings":"AAAA;;;;;CAKC;;;;;;;;;;;;AACD;AACA;;;AAWA,8BAA8B;AAC9B,MAAM,YAAY;IACd,GAAG,6IAAA,CAAA,cAAW,CAAC,GAAG;IAClB,aAAa,8GAAA,CAAA,MAAG,CAAC,iBAAiB;AACtC;AAEA,MAAM,aAAa;IACf,GAAG,6IAAA,CAAA,cAAW,CAAC,IAAI;AACvB;AAEO,MAAM,oBAAoB;IAC7B,oBAAoB;IACpB,OAAO,6IAAA,CAAA,cAAW,CAAC,KAAK;IAExB,yBAAyB;IACzB,KAAK;IACL,MAAM;IAEN,cAAc;IACd,aAAa,CAAC,MAAqB,YAAoB;QACnD,MAAM,QAAQ;YAAC,6IAAA,CAAA,cAAW,CAAC,KAAK,CAAC,MAAM;YAAE;YAAM;SAAW;QAC1D,IAAI,QAAQ,MAAM,IAAI,CAAC;QACvB,OAAO,MAAM,IAAI,CAAC,6IAAA,CAAA,cAAW,CAAC,KAAK,CAAC,YAAY;IACpD;AACJ;AAGO,MAAM,iBAAiB,IAAe,8GAAA,CAAA,MAAG,CAAC,aAAa;AACvD,MAAM,eAAe,IAAe,8GAAA,CAAA,MAAG,CAAC,iBAAiB;AACzD,MAAM,gBAAgB,IAAc,8GAAA,CAAA,MAAG,CAAC,iBAAiB,EAAE,IAAI;AAC/D,MAAM,mBAAmB,IAAmC,8GAAA,CAAA,MAAG,CAAC,mBAAmB;;AAcnF,SAAS,qBAAqB,IAAmB;IACpD,MAAM,OAAO,CAAA,GAAA,6IAAA,CAAA,iBAAc,AAAD,EAAE;IAC5B,OAAO;QACH;QACA,KAAK,SAAS,CAAC,KAAK;QACpB,MAAM,UAAU,CAAC,KAAK;QACtB,aAAa,KAAK,WAAW;IACjC;AACJ;AACO,SAAS,kBAAkB,IAAmB;IACjD,OAAO,SAAS,CAAC,KAAK,EAAa,IAAI;AAC3C;AACO,SAAS,oBAAoB,IAAmB;IACnD,OAAO,SAAS,CAAC,KAAK,GAAG,MAAU,KAAK;AAC5C;AACO,SAAS,mBAAmB,IAAmB;IAClD,OAAO,UAAU,CAAC,KAAK;AAC3B;AACO,SAAS;IACZ,OAAO,AAAC,OAAO,IAAI,CAAC,WAA+B,GAAG,CAAC,CAAC,OAAS,CAAC;YAC9D;YACA,KAAK,AAAC,GAAuB,OAArB,SAAS,CAAC,KAAK,EAAC,OAA0B,OAArB,SAAS,CAAC,KAAK,GAAG,IAAG;YAClD,MAAM,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC;YAC5B,aAAa,CAAA,GAAA,6IAAA,CAAA,iBAAc,AAAD,EAAE,MAAM,WAAW;QACjD,CAAC;AACL","debugId":null}},
    {"offset": {"line": 550, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/config/index.ts"],"sourcesContent":["/**\n * 統一配置導出\n * 整合所有配置相關的設定\n */\n\n// 導出環境變數配置\n// export { env } from '../env.mjs';\n\n// 導出 API 配置\nexport * from './api.config';\n\n// 導出應用程式配置\nexport * from './app.client.config';\nexport * from './app.server.config';\n\n// 導出語系配置\nexport * from './locale.server.config';\nexport * from './locale.client.config';\n\n// 導出快取配置\nexport * from './cache.client.config';\nexport * from './cache.server.config';"],"names":[],"mappings":"AAAA;;;CAGC,GAED,WAAW;AACX,oCAAoC;AAEpC,YAAY;;AACZ;AAEA,WAAW;AACX;AACA;AAEA,SAAS;AACT;AACA;AAEA,SAAS;AACT;AACA","debugId":null}},
    {"offset": {"line": 596, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/i18n/routing.ts"],"sourcesContent":["import { defineRouting } from 'next-intl/routing';\nimport { serverLocaleConfig } from '@/config/';\nimport { env } from '@/env.mjs';\n\n\nexport const routing = defineRouting({\n    // 支援的語系 - 從環境變數讀取，會被 API 動態覆蓋\n    locales: serverLocaleConfig.supportedLocales,\n\n    // 預設語系 - 先用 env，若不在支援清單內則回退第一個\n    defaultLocale: serverLocaleConfig.getValidDefaultLocale(),\n\n\n    // 語系前綴模式 - 從環境變數讀取\n    localePrefix: env.LOCALE_PREFIX_MODE,\n\n    // 啟用語系檢測 - 從環境變數讀取\n    localeDetection: env.LOCALE_DETECTION_ENABLED\n});"],"names":[],"mappings":";;;AAAA;AACA;AAAA;AACA;;;;AAGO,MAAM,UAAU,CAAA,GAAA,qOAAA,CAAA,gBAAa,AAAD,EAAE;IACjC,8BAA8B;IAC9B,SAAS,8IAAA,CAAA,qBAAkB,CAAC,gBAAgB;IAE5C,+BAA+B;IAC/B,eAAe,8IAAA,CAAA,qBAAkB,CAAC,qBAAqB;IAGvD,mBAAmB;IACnB,cAAc,8GAAA,CAAA,MAAG,CAAC,kBAAkB;IAEpC,mBAAmB;IACnB,iBAAiB,8GAAA,CAAA,MAAG,CAAC,wBAAwB;AACjD","debugId":null}},
    {"offset": {"line": 625, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/i18n/navigation.ts"],"sourcesContent":["import {createNavigation} from 'next-intl/navigation';\nimport {routing} from './routing';\n\n//這是在 Next.js 導航 API 基礎上，考量到路由設定的輕量級封裝。\nexport const {Link, redirect, usePathname, useRouter, getPathname} =\n    createNavigation(routing);\n"],"names":[],"mappings":";;;;;;;AAAA;AACA;;;AAGO,MAAM,EAAC,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,EAAC,GAC9D,CAAA,GAAA,iQAAA,CAAA,mBAAgB,AAAD,EAAE,yHAAA,CAAA,UAAO","debugId":null}},
    {"offset": {"line": 646, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/lib/locale-utils.ts"],"sourcesContent":["import { routing } from '@/i18n/routing';\n\n/**\n * 移除路徑中的語系前綴，取得基底路徑\n * @param pathname - 當前路徑 (例如: /en/about 或 /about)\n * @returns 不含語系前綴的基底路徑 (例如: /about)\n */\nexport function getBasePathWithoutLocale(pathname: string): string {\n    const parts = pathname.split('/').filter(Boolean);\n    const first = parts[0];\n\n    // 檢查第一段是否為支援的語系\n    const hasLocalePrefix = !!first && routing.locales.includes(first as any);\n\n    // 移除語系前綴\n    const withoutLocale = hasLocalePrefix ? parts.slice(1) : parts;\n    const path = `/${withoutLocale.join('/')}`;\n\n    return path === '' ? '/' : path;\n}\n\n/**\n * 檢查路徑是否包含語系前綴\n * @param pathname - 當前路徑\n * @returns 是否包含語系前綴\n */\nexport function hasLocalePrefix(pathname: string): boolean {\n    const parts = pathname.split('/').filter(Boolean);\n    const first = parts[0];\n    return !!first && routing.locales.includes(first as any);\n}\n\n/**\n * 將查詢參數附加到路徑上\n * @param path - 基底路徑\n * @param searchParams - URLSearchParams 物件\n * @returns 包含查詢參數的完整路徑\n */\nexport function appendSearchParams(path: string, searchParams?: URLSearchParams | null): string {\n    const qsString = searchParams?.toString();\n    return qsString ? `${path}?${qsString}` : path;\n}\n\n/**\n * 為語系切換器準備 href\n * 整合路徑處理和查詢參數邏輯\n * @param pathname - 當前路徑\n * @param searchParams - 查詢參數\n * @returns 處理後的 href\n */\nexport function prepareLanguageSwitcherHref(pathname: string, searchParams?: URLSearchParams | null): string {\n    const basePath = getBasePathWithoutLocale(pathname);\n    return appendSearchParams(basePath, searchParams);\n}"],"names":[],"mappings":";;;;;;AAAA;;AAOO,SAAS,yBAAyB,QAAgB;IACrD,MAAM,QAAQ,SAAS,KAAK,CAAC,KAAK,MAAM,CAAC;IACzC,MAAM,QAAQ,KAAK,CAAC,EAAE;IAEtB,gBAAgB;IAChB,MAAM,kBAAkB,CAAC,CAAC,SAAS,yHAAA,CAAA,UAAO,CAAC,OAAO,CAAC,QAAQ,CAAC;IAE5D,SAAS;IACT,MAAM,gBAAgB,kBAAkB,MAAM,KAAK,CAAC,KAAK;IACzD,MAAM,OAAO,AAAC,IAA2B,OAAxB,cAAc,IAAI,CAAC;IAEpC,OAAO,SAAS,KAAK,MAAM;AAC/B;AAOO,SAAS,gBAAgB,QAAgB;IAC5C,MAAM,QAAQ,SAAS,KAAK,CAAC,KAAK,MAAM,CAAC;IACzC,MAAM,QAAQ,KAAK,CAAC,EAAE;IACtB,OAAO,CAAC,CAAC,SAAS,yHAAA,CAAA,UAAO,CAAC,OAAO,CAAC,QAAQ,CAAC;AAC/C;AAQO,SAAS,mBAAmB,IAAY,EAAE,YAAqC;IAClF,MAAM,WAAW,yBAAA,mCAAA,aAAc,QAAQ;IACvC,OAAO,WAAW,AAAC,GAAU,OAAR,MAAK,KAAY,OAAT,YAAa;AAC9C;AASO,SAAS,4BAA4B,QAAgB,EAAE,YAAqC;IAC/F,MAAM,WAAW,yBAAyB;IAC1C,OAAO,mBAAmB,UAAU;AACxC","debugId":null}},
    {"offset": {"line": 686, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/components/LanguageSwitcher.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\nimport type { Language } from '@/types';\nimport { Link } from '@/i18n/navigation';\nimport { routing } from '@/i18n/routing';\nimport { prepareLanguageSwitcherHref } from '@/lib/locale-utils';\nimport type { ReadonlyURLSearchParams } from 'next/navigation';\n\ntype LanguageSwitcherProps = {\n    /** 自定義 CSS 類名，便於外部控制排版與間距 */\n    className?: string;\n    /** 可用語言清單（來源應與系統支援語系一致） */\n    languages: Language[];\n    /** 目前頁面的語系 ID（例如：'zh-TW'、'en'） */\n    currentLocale: string;\n    /** 目前路徑（不含網域），建議為「不含 locale 前綴」的語系無關路徑 */\n    pathname: string;\n    /** 目前 URL 的查詢參數集合（唯讀），切換語系時保留 */\n    searchParams: ReadonlyURLSearchParams | null;\n    /** 是否顯示語言標籤（預設顯示），可用於僅顯示國旗或圖示的場合 */\n    showLabels?: boolean;\n    /** 是否顯示語言圖示（預設顯示） */\n    showIcons?: boolean;\n    /** 顯示樣式：下拉選單或內聯列表（預設為內聯列表） */\n    variant?: 'dropdown' | 'inline';\n    /** 是否顯示預設語言標記（預設隱藏） */\n    showDefaultBadge?: boolean;\n};\n\n/**\n * 語言切換器 LanguageSwitcher\n *\n * 設計重點：\n * - 無障礙：使用 aria-* 提供更清楚的語意；目前語言不提供連結避免誤點\n * - SEO：切換連結帶上 lang/hrefLang，頁面 head 的 hreflang 請另由 metadata 產生\n * - 路徑保留：切換語系時保留當前 pathname 與 searchParams\n * - 擴充性：提供 dropdown/inline 兩種模式；dropdown 尚可擴充鍵盤導覽與彈出選單\n */\nexport default function LanguageSwitcher({\n         className,\n         languages,\n         currentLocale,\n         pathname,\n         searchParams,\n         showLabels = true,\n         showIcons = false,\n         variant = 'inline',\n         showDefaultBadge = false\n     }: LanguageSwitcherProps) {\n    // 基礎資料檢查：若語系列表為空\n    if (!languages || languages.length === 0) {\n        // 開發環境下提示，協助定位資料注入問題\n        if (process.env.NODE_ENV === 'development') {\n            return (\n                <div className={className}>\n                    <span className=\"text-red-500 text-sm\">⚠️ 無語系資料</span>\n                </div>\n            );\n        }\n        // 生產環境直接不渲染，避免影響版面\n        return null;\n    }\n\n    // 取得目前語系對應的語言物件（用於顯示圖示或標籤）\n    const currentLanguage = languages.find((lang) => lang.id === currentLocale);\n\n    return (\n        // nav 容器：指定 aria-label，協助讀屏器辨識此導覽區塊用途\n        <nav className={className} aria-label=\"Language switcher\">\n            {variant === 'dropdown' ? (\n                // 下拉模式：目前僅示範按鈕，尚未加入彈出選單與鍵盤操作\n                <div className=\"relative\">\n                    <button\n                        className=\"inline-flex items-center gap-2 rounded px-3 py-1 text-sm bg-gray-100 text-gray-800 hover:bg-gray-200\"\n                        // 尚未開啟，下拉內容會對應 aria-expanded 與 aria-controls\n                        aria-expanded=\"false\"\n                        // 表示將會打開 menu 類型的彈出內容\n                        aria-haspopup=\"menu\"\n                        // 讀屏器描述目前語言\n                        aria-label={`Current language: ${currentLanguage?.native || currentLanguage?.title}`}\n                    >\n                        {/* 語言圖示（若有且開啟顯示） */}\n                        {showIcons && currentLanguage?.icon && (\n                            <span aria-hidden=\"true\" className={`${currentLanguage.icon} inline-block h-4 w-4`} />\n                        )}\n                        {/* 顯示語言名稱（優先原生名稱，否則使用英文名稱） */}\n                        {showLabels && <span>{currentLanguage?.native || currentLanguage?.title}</span>}\n\n                        {/* 下拉箭頭圖示（裝飾性，對讀屏器隱藏） */}\n                        <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                        </svg>\n                    </button>\n                    {/* TODO：在此加入彈出式選單內容（role=\"menu\"、menuitem、鍵盤導覽、焦點管理等） */}\n                </div>\n            ) : (\n                // 內聯模式：直接列出所有可切換的語言\n                <ul className=\"flex flex-wrap items-center gap-2\">\n                    {languages.map((lang) => {\n                        // 顯示標籤：優先顯示原生語言名稱\n                        const label = lang.native || lang.title;\n                        // 產生「語系無關」的 href，以便由 Link 的 locale 屬性插入目標語系\n                        const href = prepareLanguageSwitcherHref(pathname, searchParams);\n                        // 是否為當前語言\n                        const active = currentLocale === lang.id;\n\n                        return (\n                            <li key={lang.id}>\n                                {active ? (\n                                    // 當前語言：不渲染為連結，避免重整同頁與誤點\n                                    <span\n                                        className=\"inline-flex items-center gap-2 rounded px-3 py-1 text-sm bg-blue-600 text-white cursor-default\"\n                                        // 指示目前所處頁面語言\n                                        aria-current=\"page\"\n                                        aria-label={`Current language: ${label}`}\n                                    >\n                                        {/* 語言圖示（裝飾性，可控制顯示） */}\n                                        {showIcons && lang.icon && <span aria-hidden=\"true\" className={`${lang.icon} inline-block h-4 w-4`} />}\n                                        {/* 語言標籤（可關閉） */}\n                                        {showLabels && <span>{label}</span>}\n                                        {/* 預設語言的輔助標記（若為系統預設語言且開啟顯示） */}\n                                        {showDefaultBadge && lang.default && (\n                                            <span\n                                                className=\"ml-1 rounded bg-blue-500/20 px-1.5 py-0.5 text-[10px]\"\n                                                aria-label=\"Default language\"\n                                            >\n                                                default\n                                            </span>\n                                        )}\n                                        {/* 給讀屏器的額外提示（視覺隱藏） */}\n                                        <span className=\"sr-only\">(current)</span>\n                                    </span>\n                                ) : (\n                                    // 其他語言：渲染為可點擊的 Link，交由 Link 的 locale 屬性切換語系\n                                    <Link\n                                        href={href}\n                                        // 透過 locale 指定目標語系；型別上收斂為 routing.locales 的成員\n                                        locale={lang.id as (typeof routing.locales)[number]}\n                                        className=\"inline-flex items-center gap-2 rounded px-3 py-1 text-sm transition-colors bg-gray-100 text-gray-800 hover:bg-gray-200 focus:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\n                                        // 讀屏器說明：切換到某語言（若有原生名稱則一併說明）\n                                        aria-label={`Switch to ${lang.title}${lang.native ? ` (${lang.native})` : ''}`}\n                                        // 滑鼠提示：與 aria-label 保持一致\n                                        title={`${lang.title}${lang.native ? ` (${lang.native})` : ''}`}\n                                        // SEO 輔助：標示此連結目標的語言（可留可不留，hreflang 正式應放在 head alternates）\n                                        hrefLang={lang.id}\n                                        // HTML 語言屬性，輔助正確渲染語言特性\n                                        lang={lang.id}\n                                    >\n                                        {/* 語言圖示（可控制顯示） */}\n                                        {showIcons && lang.icon && <span aria-hidden=\"true\" className={`${lang.icon} inline-block h-4 w-4`} />}\n                                        {/* 語言標籤 */}\n                                        {showLabels && <span>{label}</span>}\n                                        {/* 預設語言標記（展示用，實際決策以系統設定為準，預設隱藏） */}\n                                        {showDefaultBadge && lang.default && (\n                                            <span\n                                                className=\"ml-1 rounded bg-blue-500/20 px-1.5 py-0.5 text-[10px]\"\n                                                aria-label=\"Default language\"\n                                            >\n                                                default\n                                            </span>\n                                        )}\n                                    </Link>\n                                )}\n                            </li>\n                        );\n                    })}\n                </ul>\n            )}\n        </nav>\n    );\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 915, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/hooks/useLanguageSwitcher.ts"],"sourcesContent":["'use client';\n\nimport { usePathname, useSearchParams } from 'next/navigation';\nimport { useLocale } from 'next-intl';\nimport { useState, useEffect } from 'react';\nimport type { Language } from '@/types';\n\n/**\n * 語言切換器相關資料的自定義 Hook\n */\nexport function useLanguageSwitcher() {\n    // 取得當前路徑，用於生成語言切換連結\n    const pathname = usePathname() || '/';\n    // 取得當前語系\n    const currentLocale = useLocale();\n    // 取得 URL 查詢參數，用於保持切換語言時的參數\n    const searchParams = useSearchParams();\n\n    // 語言列表狀態\n    const [languages, setLanguages] = useState<Language[]>([]);\n    // 載入狀態\n    const [isLoading, setIsLoading] = useState(true);\n    // 錯誤狀態\n    const [error, setError] = useState<string | null>(null);\n\n    // 載入語言列表\n    useEffect(() => {\n        let isMounted = true;\n\n        const loadLanguages = async () => {\n            try {\n                setIsLoading(true);\n                setError(null);\n\n                // 使用客戶端 API 路由來獲取語言列表\n                const response = await fetch('/api/languages');\n                if (!response.ok) {\n                    throw new Error('Failed to fetch languages');\n                }\n                const languageList = await response.json();\n\n                if (isMounted) {\n                    setLanguages(languageList);\n                }\n            } catch (err) {\n                if (isMounted) {\n                    setError(err instanceof Error ? err.message : '載入語言列表失敗');\n                    console.error('Failed to load languages:', err);\n                }\n            } finally {\n                if (isMounted) {\n                    setIsLoading(false);\n                }\n            }\n        };\n\n        loadLanguages();\n\n        return () => {\n            isMounted = false;\n        };\n    }, []);\n\n    return {\n        pathname,\n        currentLocale,\n        searchParams,\n        languages,\n        isLoading,\n        error,\n    };\n}"],"names":[],"mappings":";;;AAEA;AACA;AACA;;AAJA;;;;AAUO,SAAS;;IACZ,oBAAoB;IACpB,MAAM,WAAW,CAAA,GAAA,qIAAA,CAAA,cAAW,AAAD,OAAO;IAClC,SAAS;IACT,MAAM,gBAAgB,CAAA,GAAA,qKAAA,CAAA,YAAS,AAAD;IAC9B,2BAA2B;IAC3B,MAAM,eAAe,CAAA,GAAA,qIAAA,CAAA,kBAAe,AAAD;IAEnC,SAAS;IACT,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAc,EAAE;IACzD,OAAO;IACP,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,OAAO;IACP,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAElD,SAAS;IACT,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;yCAAE;YACN,IAAI,YAAY;YAEhB,MAAM;+DAAgB;oBAClB,IAAI;wBACA,aAAa;wBACb,SAAS;wBAET,sBAAsB;wBACtB,MAAM,WAAW,MAAM,MAAM;wBAC7B,IAAI,CAAC,SAAS,EAAE,EAAE;4BACd,MAAM,IAAI,MAAM;wBACpB;wBACA,MAAM,eAAe,MAAM,SAAS,IAAI;wBAExC,IAAI,WAAW;4BACX,aAAa;wBACjB;oBACJ,EAAE,OAAO,KAAK;wBACV,IAAI,WAAW;4BACX,SAAS,eAAe,QAAQ,IAAI,OAAO,GAAG;4BAC9C,QAAQ,KAAK,CAAC,6BAA6B;wBAC/C;oBACJ,SAAU;wBACN,IAAI,WAAW;4BACX,aAAa;wBACjB;oBACJ;gBACJ;;YAEA;YAEA;iDAAO;oBACH,YAAY;gBAChB;;QACJ;wCAAG,EAAE;IAEL,OAAO;QACH;QACA;QACA;QACA;QACA;QACA;IACJ;AACJ;GA7DgB;;QAEK,qIAAA,CAAA,cAAW;QAEN,qKAAA,CAAA,YAAS;QAEV,qIAAA,CAAA,kBAAe","debugId":null}},
    {"offset": {"line": 1003, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/hooks/index.ts"],"sourcesContent":["export { useLanguageSwitcher } from './useLanguageSwitcher';"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 1022, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/components/LanguageSwitcherContainer.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\nimport { useLanguageSwitcher } from '../hooks';\nimport LanguageSwitcher from './LanguageSwitcher';\nimport type { Language } from '@/types';\n\n/**\n * 語言切換器容器組件\n *\n * 自動處理資料載入和狀態管理的語言切換器包裝組件\n */\ntype LanguageSwitcherContainerProps = {\n    /** 自定義 CSS 類名 */\n    className?: string;\n    /** 是否顯示語言標籤文字，預設為 true */\n    showLabels?: boolean;\n    /** 顯示變體：下拉選單或內聯列表，預設為 'inline' */\n    variant?: 'dropdown' | 'inline';\n    /** 載入中的顯示內容 */\n    loadingComponent?: React.ReactNode;\n    /** 錯誤時的顯示內容 */\n    errorComponent?: React.ReactNode;\n    /** 可選的語言資料，如果提供則不會重新載入 */\n    languages?: Language[];\n};\n\nexport default function LanguageSwitcherContainer({\n                                                      className,\n                                                      showLabels = true,\n                                                      variant = 'inline',\n                                                      loadingComponent,\n                                                      errorComponent,\n                                                      languages: providedLanguages,\n                                                  }: LanguageSwitcherContainerProps) {\n    const {\n        pathname,\n        currentLocale,\n        searchParams,\n        languages: hookLanguages,\n        isLoading,\n        error,\n    } = useLanguageSwitcher();\n\n    // 如果有提供語言資料，就使用提供的，否則使用 hook 載入的\n    const languages = providedLanguages || hookLanguages;\n    const shouldShowLoading = !providedLanguages && isLoading;\n    const shouldShowError = !providedLanguages && error;\n\n    // 載入中狀態\n    if (shouldShowLoading) {\n        return loadingComponent || (\n            <div className={className}>\n                <span className=\"text-gray-500 text-sm\">載入語言選項...</span>\n            </div>\n        );\n    }\n\n    // 錯誤狀態\n    if (shouldShowError) {\n        return errorComponent || (\n            <div className={className}>\n                <span className=\"text-red-500 text-sm\">⚠️ {error}</span>\n            </div>\n        );\n    }\n\n    // 正常渲染\n    return (\n        <LanguageSwitcher\n            className={className}\n            languages={languages}\n            currentLocale={currentLocale}\n            pathname={pathname}\n            searchParams={searchParams}\n            showLabels={showLabels}\n            variant={variant}\n        />\n    );\n}"],"names":[],"mappings":";;;;AAGA;AAAA;AACA;;;AAJA;;;AA2Be,SAAS,0BAA0B,KAOiC;QAPjC,EACI,SAAS,EACT,aAAa,IAAI,EACjB,UAAU,QAAQ,EAClB,gBAAgB,EAChB,cAAc,EACd,WAAW,iBAAiB,EACC,GAPjC;;IAQ9C,MAAM,EACF,QAAQ,EACR,aAAa,EACb,YAAY,EACZ,WAAW,aAAa,EACxB,SAAS,EACT,KAAK,EACR,GAAG,CAAA,GAAA,8JAAA,CAAA,sBAAmB,AAAD;IAEtB,iCAAiC;IACjC,MAAM,YAAY,qBAAqB;IACvC,MAAM,oBAAoB,CAAC,qBAAqB;IAChD,MAAM,kBAAkB,CAAC,qBAAqB;IAE9C,QAAQ;IACR,IAAI,mBAAmB;QACnB,OAAO,kCACH,6LAAC;YAAI,WAAW;sBACZ,cAAA,6LAAC;gBAAK,WAAU;0BAAwB;;;;;;;;;;;IAGpD;IAEA,OAAO;IACP,IAAI,iBAAiB;QACjB,OAAO,gCACH,6LAAC;YAAI,WAAW;sBACZ,cAAA,6LAAC;gBAAK,WAAU;;oBAAuB;oBAAI;;;;;;;;;;;;IAGvD;IAEA,OAAO;IACP,qBACI,6LAAC,iKAAA,CAAA,UAAgB;QACb,WAAW;QACX,WAAW;QACX,eAAe;QACf,UAAU;QACV,cAAc;QACd,YAAY;QACZ,SAAS;;;;;;AAGrB;GApDwB;;QAehB,8JAAA,CAAA,sBAAmB;;;KAfH","debugId":null}}]
}