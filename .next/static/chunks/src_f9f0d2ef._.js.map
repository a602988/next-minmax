{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/i18n/routing.ts"],"sourcesContent":["import { defineRouting } from 'next-intl/routing';\n\nexport const routing = defineRouting({\n  // 支援的語系 - 這個會被 API 動態覆蓋\n  locales: ['zh-TW', 'zh-CN', 'en', 'ja'],\n  \n  // 預設語系 - 這個也會被 API 動態覆蓋\n  defaultLocale: 'zh-TW',\n  \n  // 預設語系不加前綴\n  localePrefix: 'as-needed',\n  \n  // 啟用語系檢測\n  localeDetection: true\n});\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,UAAU,CAAA,GAAA,qOAAA,CAAA,gBAAa,AAAD,EAAE;IACnC,wBAAwB;IACxB,SAAS;QAAC;QAAS;QAAS;QAAM;KAAK;IAEvC,wBAAwB;IACxB,eAAe;IAEf,WAAW;IACX,cAAc;IAEd,SAAS;IACT,iBAAiB;AACnB","debugId":null}},
    {"offset": {"line": 36, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/i18n/navigation.ts"],"sourcesContent":["import {createNavigation} from 'next-intl/navigation';\nimport {routing} from './routing';\n\n//這是在 Next.js 導航 API 基礎上，考量到路由設定的輕量級封裝。\nexport const {Link, redirect, usePathname, useRouter, getPathname} =\n    createNavigation(routing);\n"],"names":[],"mappings":";;;;;;;AAAA;AACA;;;AAGO,MAAM,EAAC,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,EAAC,GAC9D,CAAA,GAAA,iQAAA,CAAA,mBAAgB,AAAD,EAAE,yHAAA,CAAA,UAAO","debugId":null}},
    {"offset": {"line": 57, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/lib/locale-utils.ts"],"sourcesContent":["import { routing } from '@/i18n/routing';\n\n/**\n * 移除路徑中的語系前綴，取得基底路徑\n * @param pathname - 當前路徑 (例如: /en/about 或 /about)\n * @returns 不含語系前綴的基底路徑 (例如: /about)\n */\nexport function getBasePathWithoutLocale(pathname: string): string {\n    const parts = pathname.split('/').filter(Boolean);\n    const first = parts[0];\n\n    // 檢查第一段是否為支援的語系\n    const hasLocalePrefix = !!first && routing.locales.includes(first as any);\n\n    // 移除語系前綴\n    const withoutLocale = hasLocalePrefix ? parts.slice(1) : parts;\n    const path = `/${withoutLocale.join('/')}`;\n\n    return path === '' ? '/' : path;\n}\n\n/**\n * 檢查路徑是否包含語系前綴\n * @param pathname - 當前路徑\n * @returns 是否包含語系前綴\n */\nexport function hasLocalePrefix(pathname: string): boolean {\n    const parts = pathname.split('/').filter(Boolean);\n    const first = parts[0];\n    return !!first && routing.locales.includes(first as any);\n}\n\n/**\n * 將查詢參數附加到路徑上\n * @param path - 基底路徑\n * @param searchParams - URLSearchParams 物件\n * @returns 包含查詢參數的完整路徑\n */\nexport function appendSearchParams(path: string, searchParams?: URLSearchParams | null): string {\n    const qsString = searchParams?.toString();\n    return qsString ? `${path}?${qsString}` : path;\n}\n\n/**\n * 為語系切換器準備 href\n * 整合路徑處理和查詢參數邏輯\n * @param pathname - 當前路徑\n * @param searchParams - 查詢參數\n * @returns 處理後的 href\n */\nexport function prepareLanguageSwitcherHref(pathname: string, searchParams?: URLSearchParams | null): string {\n    const basePath = getBasePathWithoutLocale(pathname);\n    return appendSearchParams(basePath, searchParams);\n}"],"names":[],"mappings":";;;;;;AAAA;;AAOO,SAAS,yBAAyB,QAAgB;IACrD,MAAM,QAAQ,SAAS,KAAK,CAAC,KAAK,MAAM,CAAC;IACzC,MAAM,QAAQ,KAAK,CAAC,EAAE;IAEtB,gBAAgB;IAChB,MAAM,kBAAkB,CAAC,CAAC,SAAS,yHAAA,CAAA,UAAO,CAAC,OAAO,CAAC,QAAQ,CAAC;IAE5D,SAAS;IACT,MAAM,gBAAgB,kBAAkB,MAAM,KAAK,CAAC,KAAK;IACzD,MAAM,OAAO,AAAC,IAA2B,OAAxB,cAAc,IAAI,CAAC;IAEpC,OAAO,SAAS,KAAK,MAAM;AAC/B;AAOO,SAAS,gBAAgB,QAAgB;IAC5C,MAAM,QAAQ,SAAS,KAAK,CAAC,KAAK,MAAM,CAAC;IACzC,MAAM,QAAQ,KAAK,CAAC,EAAE;IACtB,OAAO,CAAC,CAAC,SAAS,yHAAA,CAAA,UAAO,CAAC,OAAO,CAAC,QAAQ,CAAC;AAC/C;AAQO,SAAS,mBAAmB,IAAY,EAAE,YAAqC;IAClF,MAAM,WAAW,yBAAA,mCAAA,aAAc,QAAQ;IACvC,OAAO,WAAW,AAAC,GAAU,OAAR,MAAK,KAAY,OAAT,YAAa;AAC9C;AASO,SAAS,4BAA4B,QAAgB,EAAE,YAAqC;IAC/F,MAAM,WAAW,yBAAyB;IAC1C,OAAO,mBAAmB,UAAU;AACxC","debugId":null}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/components/LanguageSwitcher.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\nimport type { Language } from '@/types';\nimport { Link } from '@/i18n/navigation';\nimport { routing } from '@/i18n/routing';\nimport { prepareLanguageSwitcherHref } from '@/lib/locale-utils';\nimport type { ReadonlyURLSearchParams } from 'next/navigation';\n\ntype LanguageSwitcherProps = {\n    /** 自定義 CSS 類名，便於外部控制排版與間距 */\n    className?: string;\n    /** 可用語言清單（來源應與系統支援語系一致） */\n    languages: Language[];\n    /** 目前頁面的語系 ID（例如：'zh-TW'、'en'） */\n    currentLocale: string;\n    /** 目前路徑（不含網域），建議為「不含 locale 前綴」的語系無關路徑 */\n    pathname: string;\n    /** 目前 URL 的查詢參數集合（唯讀），切換語系時保留 */\n    searchParams: ReadonlyURLSearchParams | null;\n    /** 是否顯示語言標籤（預設顯示），可用於僅顯示國旗或圖示的場合 */\n    showLabels?: boolean;\n    /** 是否顯示語言圖示（預設顯示） */\n    showIcons?: boolean;\n    /** 顯示樣式：下拉選單或內聯列表（預設為內聯列表） */\n    variant?: 'dropdown' | 'inline';\n    /** 是否顯示預設語言標記（預設隱藏） */\n    showDefaultBadge?: boolean;\n};\n\n/**\n * 語言切換器 LanguageSwitcher\n *\n * 設計重點：\n * - 無障礙：使用 aria-* 提供更清楚的語意；目前語言不提供連結避免誤點\n * - SEO：切換連結帶上 lang/hrefLang，頁面 head 的 hreflang 請另由 metadata 產生\n * - 路徑保留：切換語系時保留當前 pathname 與 searchParams\n * - 擴充性：提供 dropdown/inline 兩種模式；dropdown 尚可擴充鍵盤導覽與彈出選單\n */\nexport default function LanguageSwitcher({\n         className,\n         languages,\n         currentLocale,\n         pathname,\n         searchParams,\n         showLabels = true,\n         showIcons = false,\n         variant = 'inline',\n         showDefaultBadge = false\n     }: LanguageSwitcherProps) {\n    // 基礎資料檢查：若語系列表為空\n    if (!languages || languages.length === 0) {\n        // 開發環境下提示，協助定位資料注入問題\n        if (process.env.NODE_ENV === 'development') {\n            return (\n                <div className={className}>\n                    <span className=\"text-red-500 text-sm\">⚠️ 無語系資料</span>\n                </div>\n            );\n        }\n        // 生產環境直接不渲染，避免影響版面\n        return null;\n    }\n\n    // 取得目前語系對應的語言物件（用於顯示圖示或標籤）\n    const currentLanguage = languages.find((lang) => lang.id === currentLocale);\n\n    return (\n        // nav 容器：指定 aria-label，協助讀屏器辨識此導覽區塊用途\n        <nav className={className} aria-label=\"Language switcher\">\n            {variant === 'dropdown' ? (\n                // 下拉模式：目前僅示範按鈕，尚未加入彈出選單與鍵盤操作\n                <div className=\"relative\">\n                    <button\n                        className=\"inline-flex items-center gap-2 rounded px-3 py-1 text-sm bg-gray-100 text-gray-800 hover:bg-gray-200\"\n                        // 尚未開啟，下拉內容會對應 aria-expanded 與 aria-controls\n                        aria-expanded=\"false\"\n                        // 表示將會打開 menu 類型的彈出內容\n                        aria-haspopup=\"menu\"\n                        // 讀屏器描述目前語言\n                        aria-label={`Current language: ${currentLanguage?.native || currentLanguage?.title}`}\n                    >\n                        {/* 語言圖示（若有且開啟顯示） */}\n                        {showIcons && currentLanguage?.icon && (\n                            <span aria-hidden=\"true\" className={`${currentLanguage.icon} inline-block h-4 w-4`} />\n                        )}\n                        {/* 顯示語言名稱（優先原生名稱，否則使用英文名稱） */}\n                        {showLabels && <span>{currentLanguage?.native || currentLanguage?.title}</span>}\n\n                        {/* 下拉箭頭圖示（裝飾性，對讀屏器隱藏） */}\n                        <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                        </svg>\n                    </button>\n                    {/* TODO：在此加入彈出式選單內容（role=\"menu\"、menuitem、鍵盤導覽、焦點管理等） */}\n                </div>\n            ) : (\n                // 內聯模式：直接列出所有可切換的語言\n                <ul className=\"flex flex-wrap items-center gap-2\">\n                    {languages.map((lang) => {\n                        // 顯示標籤：優先顯示原生語言名稱\n                        const label = lang.native || lang.title;\n                        // 產生「語系無關」的 href，以便由 Link 的 locale 屬性插入目標語系\n                        const href = prepareLanguageSwitcherHref(pathname, searchParams);\n                        // 是否為當前語言\n                        const active = currentLocale === lang.id;\n\n                        return (\n                            <li key={lang.id}>\n                                {active ? (\n                                    // 當前語言：不渲染為連結，避免重整同頁與誤點\n                                    <span\n                                        className=\"inline-flex items-center gap-2 rounded px-3 py-1 text-sm bg-blue-600 text-white cursor-default\"\n                                        // 指示目前所處頁面語言\n                                        aria-current=\"page\"\n                                        aria-label={`Current language: ${label}`}\n                                    >\n                                        {/* 語言圖示（裝飾性，可控制顯示） */}\n                                        {showIcons && lang.icon && <span aria-hidden=\"true\" className={`${lang.icon} inline-block h-4 w-4`} />}\n                                        {/* 語言標籤（可關閉） */}\n                                        {showLabels && <span>{label}</span>}\n                                        {/* 預設語言的輔助標記（若為系統預設語言且開啟顯示） */}\n                                        {showDefaultBadge && lang.default && (\n                                            <span\n                                                className=\"ml-1 rounded bg-blue-500/20 px-1.5 py-0.5 text-[10px]\"\n                                                aria-label=\"Default language\"\n                                            >\n                                                default\n                                            </span>\n                                        )}\n                                        {/* 給讀屏器的額外提示（視覺隱藏） */}\n                                        <span className=\"sr-only\">(current)</span>\n                                    </span>\n                                ) : (\n                                    // 其他語言：渲染為可點擊的 Link，交由 Link 的 locale 屬性切換語系\n                                    <Link\n                                        href={href}\n                                        // 透過 locale 指定目標語系；型別上收斂為 routing.locales 的成員\n                                        locale={lang.id as (typeof routing.locales)[number]}\n                                        className=\"inline-flex items-center gap-2 rounded px-3 py-1 text-sm transition-colors bg-gray-100 text-gray-800 hover:bg-gray-200 focus:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\n                                        // 讀屏器說明：切換到某語言（若有原生名稱則一併說明）\n                                        aria-label={`Switch to ${lang.title}${lang.native ? ` (${lang.native})` : ''}`}\n                                        // 滑鼠提示：與 aria-label 保持一致\n                                        title={`${lang.title}${lang.native ? ` (${lang.native})` : ''}`}\n                                        // SEO 輔助：標示此連結目標的語言（可留可不留，hreflang 正式應放在 head alternates）\n                                        hrefLang={lang.id}\n                                        // HTML 語言屬性，輔助正確渲染語言特性\n                                        lang={lang.id}\n                                    >\n                                        {/* 語言圖示（可控制顯示） */}\n                                        {showIcons && lang.icon && <span aria-hidden=\"true\" className={`${lang.icon} inline-block h-4 w-4`} />}\n                                        {/* 語言標籤 */}\n                                        {showLabels && <span>{label}</span>}\n                                        {/* 預設語言標記（展示用，實際決策以系統設定為準，預設隱藏） */}\n                                        {showDefaultBadge && lang.default && (\n                                            <span\n                                                className=\"ml-1 rounded bg-blue-500/20 px-1.5 py-0.5 text-[10px]\"\n                                                aria-label=\"Default language\"\n                                            >\n                                                default\n                                            </span>\n                                        )}\n                                    </Link>\n                                )}\n                            </li>\n                        );\n                    })}\n                </ul>\n            )}\n        </nav>\n    );\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 326, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/hooks/useLanguageSwitcher.ts"],"sourcesContent":["'use client';\n\nimport { usePathname, useSearchParams } from 'next/navigation';\nimport { useLocale } from 'next-intl';\nimport { useState, useEffect } from 'react';\nimport type { Language } from '@/types';\n\n/**\n * 語言切換器相關資料的自定義 Hook\n */\nexport function useLanguageSwitcher() {\n    // 取得當前路徑，用於生成語言切換連結\n    const pathname = usePathname() || '/';\n    // 取得當前語系\n    const currentLocale = useLocale();\n    // 取得 URL 查詢參數，用於保持切換語言時的參數\n    const searchParams = useSearchParams();\n\n    // 語言列表狀態\n    const [languages, setLanguages] = useState<Language[]>([]);\n    // 載入狀態\n    const [isLoading, setIsLoading] = useState(true);\n    // 錯誤狀態\n    const [error, setError] = useState<string | null>(null);\n\n    // 載入語言列表\n    useEffect(() => {\n        let isMounted = true;\n\n        const loadLanguages = async () => {\n            try {\n                setIsLoading(true);\n                setError(null);\n\n                // 使用客戶端 API 路由來獲取語言列表\n                const response = await fetch('/api/languages');\n                if (!response.ok) {\n                    throw new Error('Failed to fetch languages');\n                }\n                const languageList = await response.json();\n\n                if (isMounted) {\n                    setLanguages(languageList);\n                }\n            } catch (err) {\n                if (isMounted) {\n                    setError(err instanceof Error ? err.message : '載入語言列表失敗');\n                    console.error('Failed to load languages:', err);\n                }\n            } finally {\n                if (isMounted) {\n                    setIsLoading(false);\n                }\n            }\n        };\n\n        loadLanguages();\n\n        return () => {\n            isMounted = false;\n        };\n    }, []);\n\n    return {\n        pathname,\n        currentLocale,\n        searchParams,\n        languages,\n        isLoading,\n        error,\n    };\n}"],"names":[],"mappings":";;;AAEA;AACA;AACA;;AAJA;;;;AAUO,SAAS;;IACZ,oBAAoB;IACpB,MAAM,WAAW,CAAA,GAAA,qIAAA,CAAA,cAAW,AAAD,OAAO;IAClC,SAAS;IACT,MAAM,gBAAgB,CAAA,GAAA,qKAAA,CAAA,YAAS,AAAD;IAC9B,2BAA2B;IAC3B,MAAM,eAAe,CAAA,GAAA,qIAAA,CAAA,kBAAe,AAAD;IAEnC,SAAS;IACT,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAc,EAAE;IACzD,OAAO;IACP,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,OAAO;IACP,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAElD,SAAS;IACT,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;yCAAE;YACN,IAAI,YAAY;YAEhB,MAAM;+DAAgB;oBAClB,IAAI;wBACA,aAAa;wBACb,SAAS;wBAET,sBAAsB;wBACtB,MAAM,WAAW,MAAM,MAAM;wBAC7B,IAAI,CAAC,SAAS,EAAE,EAAE;4BACd,MAAM,IAAI,MAAM;wBACpB;wBACA,MAAM,eAAe,MAAM,SAAS,IAAI;wBAExC,IAAI,WAAW;4BACX,aAAa;wBACjB;oBACJ,EAAE,OAAO,KAAK;wBACV,IAAI,WAAW;4BACX,SAAS,eAAe,QAAQ,IAAI,OAAO,GAAG;4BAC9C,QAAQ,KAAK,CAAC,6BAA6B;wBAC/C;oBACJ,SAAU;wBACN,IAAI,WAAW;4BACX,aAAa;wBACjB;oBACJ;gBACJ;;YAEA;YAEA;iDAAO;oBACH,YAAY;gBAChB;;QACJ;wCAAG,EAAE;IAEL,OAAO;QACH;QACA;QACA;QACA;QACA;QACA;IACJ;AACJ;GA7DgB;;QAEK,qIAAA,CAAA,cAAW;QAEN,qKAAA,CAAA,YAAS;QAEV,qIAAA,CAAA,kBAAe","debugId":null}},
    {"offset": {"line": 414, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/hooks/index.ts"],"sourcesContent":["export { useLanguageSwitcher } from './useLanguageSwitcher';"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 433, "column": 0}, "map": {"version":3,"sources":["file:///Users/linchian/Documents/GitHub/next-minmax/src/features/language/components/LanguageSwitcherContainer.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\nimport { useLanguageSwitcher } from '../hooks';\nimport LanguageSwitcher from './LanguageSwitcher';\nimport type { Language } from '@/types';\n\n/**\n * 語言切換器容器組件\n *\n * 自動處理資料載入和狀態管理的語言切換器包裝組件\n */\ntype LanguageSwitcherContainerProps = {\n    /** 自定義 CSS 類名 */\n    className?: string;\n    /** 是否顯示語言標籤文字，預設為 true */\n    showLabels?: boolean;\n    /** 顯示變體：下拉選單或內聯列表，預設為 'inline' */\n    variant?: 'dropdown' | 'inline';\n    /** 載入中的顯示內容 */\n    loadingComponent?: React.ReactNode;\n    /** 錯誤時的顯示內容 */\n    errorComponent?: React.ReactNode;\n    /** 可選的語言資料，如果提供則不會重新載入 */\n    languages?: Language[];\n};\n\nexport default function LanguageSwitcherContainer({\n                                                      className,\n                                                      showLabels = true,\n                                                      variant = 'inline',\n                                                      loadingComponent,\n                                                      errorComponent,\n                                                      languages: providedLanguages,\n                                                  }: LanguageSwitcherContainerProps) {\n    const {\n        pathname,\n        currentLocale,\n        searchParams,\n        languages: hookLanguages,\n        isLoading,\n        error,\n    } = useLanguageSwitcher();\n\n    // 如果有提供語言資料，就使用提供的，否則使用 hook 載入的\n    const languages = providedLanguages || hookLanguages;\n    const shouldShowLoading = !providedLanguages && isLoading;\n    const shouldShowError = !providedLanguages && error;\n\n    // 載入中狀態\n    if (shouldShowLoading) {\n        return loadingComponent || (\n            <div className={className}>\n                <span className=\"text-gray-500 text-sm\">載入語言選項...</span>\n            </div>\n        );\n    }\n\n    // 錯誤狀態\n    if (shouldShowError) {\n        return errorComponent || (\n            <div className={className}>\n                <span className=\"text-red-500 text-sm\">⚠️ {error}</span>\n            </div>\n        );\n    }\n\n    // 正常渲染\n    return (\n        <LanguageSwitcher\n            className={className}\n            languages={languages}\n            currentLocale={currentLocale}\n            pathname={pathname}\n            searchParams={searchParams}\n            showLabels={showLabels}\n            variant={variant}\n        />\n    );\n}"],"names":[],"mappings":";;;;AAGA;AAAA;AACA;;;AAJA;;;AA2Be,SAAS,0BAA0B,KAOiC;QAPjC,EACI,SAAS,EACT,aAAa,IAAI,EACjB,UAAU,QAAQ,EAClB,gBAAgB,EAChB,cAAc,EACd,WAAW,iBAAiB,EACC,GAPjC;;IAQ9C,MAAM,EACF,QAAQ,EACR,aAAa,EACb,YAAY,EACZ,WAAW,aAAa,EACxB,SAAS,EACT,KAAK,EACR,GAAG,CAAA,GAAA,8JAAA,CAAA,sBAAmB,AAAD;IAEtB,iCAAiC;IACjC,MAAM,YAAY,qBAAqB;IACvC,MAAM,oBAAoB,CAAC,qBAAqB;IAChD,MAAM,kBAAkB,CAAC,qBAAqB;IAE9C,QAAQ;IACR,IAAI,mBAAmB;QACnB,OAAO,kCACH,6LAAC;YAAI,WAAW;sBACZ,cAAA,6LAAC;gBAAK,WAAU;0BAAwB;;;;;;;;;;;IAGpD;IAEA,OAAO;IACP,IAAI,iBAAiB;QACjB,OAAO,gCACH,6LAAC;YAAI,WAAW;sBACZ,cAAA,6LAAC;gBAAK,WAAU;;oBAAuB;oBAAI;;;;;;;;;;;;IAGvD;IAEA,OAAO;IACP,qBACI,6LAAC,iKAAA,CAAA,UAAgB;QACb,WAAW;QACX,WAAW;QACX,eAAe;QACf,UAAU;QACV,cAAc;QACd,YAAY;QACZ,SAAS;;;;;;AAGrB;GApDwB;;QAehB,8JAAA,CAAA,sBAAmB;;;KAfH","debugId":null}}]
}